<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nacyot의 프로그래밍 이야기</title>
  <subtitle>Nacyot의 프로그래밍 이야기</subtitle>
  <id>http://blog.nacyot.com/</id>
  <link href="http://blog.nacyot.com/"/>
  <link href="http://blog.nacyot.com/feed.xml" rel="self"/>
  <updated>2015-07-07T01:25:00Z</updated>
  <author>
    <name>nacyot(Daekwon Kim)</name>
  </author>
  <entry>
    <title>Serverspec(서버스펙)을 통한 도커 이미지 테스트 자동화</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-06-30-serverspec-with-docker/"/>
    <id>http://blog.nacyot.com/articles/2015-06-30-serverspec-with-docker/</id>
    <published>2015-07-07T01:25:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/MyCDEgF.jpg' /&gt;&lt;p&gt;Immutable Infrastructure와 컨테이너로 대표되는 도커(Docker)와 함께 서버 분야에 많은 변화를 가져온 것은 Configuration Management 도구들이었다. 쉐프(Chef), 퍼펫(Puppet), 앤서블(Ansible)로 대표되는 CM 툴들은 독자적인 DSL을 통해서 서버의 이상적인 상태와 그에 다다르는 과정을 선언적으로 기록한다. 그리고 이 기록을 통해서 원하는 서버의 특정 상태를 재현하게 도와준다. 이러한 흐름을 Infrastructure as Code라고 표현하기도 한다. 서버의 코드화, 여기서 한 단계 더 나아가면 또 다른 흥미로운 아이디어를 만나게된다. 서버가 코드라면 소프트웨어를 검증하는 기법들을 똑같이 적용할 수 있지 않을까?&lt;/p&gt;

&lt;p&gt;서버스펙(Serverspec)은 바로 이 질문에 대한 답을 보여주는 도구이다. 이 글에서는 Serverspec을 통해서 도커 이미지를 테스트하는 방법에 대해서 다룬다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='서버스펙(serverspec)을-통한-도커-이미지-테스트'&gt;서버스펙(Serverspec)을 통한 도커 이미지 테스트&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이제 테스트 환경을 마련하고 실제로 테스트를 작성해보도록하자. 서버스펙에는 기본적으로 프로젝트를 초기화를 돕는 &lt;code&gt;serverspec-init&lt;/code&gt;이라는 명령어가 포함되어있다. 여기서는 이 명령어를 사용하지 않고 진행한다. 먼저 루비의 기본적인 구조와 비슷하게 spec 디렉터리를 만들고 그 아래에 테스트 코드를 넣을 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;serverspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;Gemfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;mongodb_image_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;spec_helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;디렉터리 구조는 아주 간단한다. 프로젝트 메인 디렉터리 아래에 spec 디렉터리를 만들고 테스트 설정 파일은 &lt;code&gt;spec_helper.rb&lt;/code&gt;와 테스트 파일은 &lt;code&gt;mongodb_image_spec.rb&lt;/code&gt;를 준비한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-이미지-준비'&gt;도커 이미지 준비&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서는 시스템에 도커가 설치되어있다고 가정한다(boot2docker도 무방하며, 실제로 이 글의 내용은 boot2docker를 통해서 테스트되었다). 도커를 통해서 nginx 공식 이미지를 다운로드 받는다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull nginx:latest
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='gemfile을-통한-의존성-관리'&gt;Gemfile을 통한 의존성 관리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Serverspec을 통한 인프라 테스트는 루비를 기반으로 돌아간다(즉, 시스템에 루비가 설치되어있어야한다). 루비를 테스트를 위해 사용할 의존성 관리를 위해 프로젝트 루트에 다음과 같이 Gemfile을 작성한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://rubygems.org&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3e,21ec&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;docker-api&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gemfile은 프로젝트의 의존성을 관리하고, 프로젝트 내에서 사용될 실행 가능한 명령어들을 관리하기 위해 사용된다. 이제 의존성을 설치해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle install
&lt;/span&gt;&lt;span id="line-2"&gt;Fetching gem metadata from https://rubygems.org/.......
&lt;/span&gt;&lt;span id="line-3"&gt;Resolving dependencies...
&lt;/span&gt;&lt;span id="line-4"&gt;Using diff-lcs 1.2.5
&lt;/span&gt;&lt;span id="line-5"&gt;Using excon 0.45.3
&lt;/span&gt;&lt;span id="line-6"&gt;...
&lt;/span&gt;&lt;span id="line-7"&gt;Using specinfra 2.36.6
&lt;/span&gt;&lt;span id="line-8"&gt;Using serverspec 2.19.0
&lt;/span&gt;&lt;span id="line-9"&gt;Using bundler 1.7.3
&lt;/span&gt;&lt;span id="line-10"&gt;Your bundle is &lt;span class="nb"&gt;complete&lt;/span&gt;!
&lt;/span&gt;&lt;span id="line-11"&gt;Use &lt;span class="sb"&gt;`&lt;/span&gt;bundle show &lt;span class="o"&gt;[&lt;/span&gt;gemname&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; to see where a bundled gem is installed.
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치가 끝났으면 프로젝트 루트 아래에서 rspec 명령어가 작동하는지 테스트해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rspec --version
&lt;/span&gt;&lt;span id="line-2"&gt;3.3.1
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;잘 동작한다!&lt;/p&gt;

&lt;h3&gt;&lt;a name='spec_helper.rb'&gt;&lt;code&gt;spec_helper.rb&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;spec_helper.rb&lt;/code&gt;는 프로젝트에 적용되는 RSpec 설정파일이다. &lt;code&gt;:host&lt;/code&gt;에는 테스트에 사용할 적절한 도커 서버의 주소를 입력한다. &lt;code&gt;:docker_image&lt;/code&gt;는 테스트할 대상을 의미하며, &lt;code&gt;:os&lt;/code&gt;는 테스트 대상이 되는 서버의 운영체제를 의미한다. 서버스펙은 이 옵션을 통해서 테스트에서 사용하는 DSL을 추상화한다. &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt;에는 적절한 사용자 이름을 넣어준다. 여기서는 OSX에서 boot2docker를 사용하고 있다고 가정하고 있으며 ssl key가 다른 곳에 있다면 적절한 위치를 지정해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;serverspec&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s1"&gt;require &amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="s1"&gt;set :backend, &amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="s1"&gt;set :host, &amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//192.168.59.103:2376&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="kt"&gt;set&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;docker_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tutum/mongodb&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="kt"&gt;set&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;Docker.options&lt;/span&gt;&lt;span class="o"&gt; =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="nx"&gt;client_cert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/Users/&amp;lt;USERNAME&amp;gt;/.boot2docker/certs/boot2docker-vm/cert.pem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;  &lt;span class="nx"&gt;client_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/Users/&amp;lt;USERNAME&amp;gt;/.boot2docker/certs/boot2docker-vm/key.pem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;  &lt;span class="nx"&gt;ssl_ca_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/Users/&amp;lt;USERNAME&amp;gt;/.boot2docker/certs/boot2docker-vm/ca.pem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;  &lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;  &lt;span class="nx"&gt;read_timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="nx"&gt;Excon.defaults&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;ssl_verify_peer&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = false
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='mongodb_image_spec.rb'&gt;&lt;code&gt;mongodb_image_spec.rb&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이 파일에는 테스트 코드를 작성한다. 테스트 코드는 RSpec 고유의 DSL로 작성되며, 서버스펙은 서버를 검증하기 위한 도구들을 제공한다. 아마 루비나 RSpec에 친숙하다면, 이 코드를 보고 어떤 내용인지 바로 알 수 있을 것이며, 안 써봤어도 직관적으로 이해할 수 있을 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;spec_helper&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;tutum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mongodb&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_directory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;mongod&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_running&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_listening&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기에는 3개의 테스트가 기술되어있다. 서버스펙에서는 리소스라는 개념을 사용해서 테스트를 수행한다. 먼저 첫번째 테스트에서 쓰인 리소스는 &lt;code&gt;file&lt;/code&gt;이다. 이를 통해서 &lt;code&gt;/etc&lt;/code&gt;가 디렉터리인지 검증한다. 그 다음으로 두번째 테스트에서는 &lt;code&gt;process&lt;/code&gt; 리소스를 통해서 &lt;code&gt;mongod&lt;/code&gt; 프로세스가 실행중인지 검증한다. 마지막으로 &lt;code&gt;port&lt;/code&gt; 리소스를 통해서 27017 포트가 대기중인지 검증한다. 서버스펙은 서버를 검증하기 위한 다양한 리소스를 제공하고 있으며 더 많은 리소스들에 대해서는 &lt;a href="http://serverspec.org/resource_types.html"&gt;서버스펙 공식 사이트&lt;/a&gt;에서 찾아볼 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='rspec으로-테스트-실행하기'&gt;rspec으로 테스트 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이제 테스트 코드도 모두 작성했으니, 테스트가 정상적으로 작동하는지 검증하는 일만 남았다. 프로젝트 메인에서 테스트를 실행해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rspec .
&lt;/span&gt;&lt;span id="line-2"&gt;tutum/mongodb IMage
&lt;/span&gt;&lt;span id="line-3"&gt;  File &lt;span class="s2"&gt;&amp;quot;/etc&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;    should be directory
&lt;/span&gt;&lt;span id="line-5"&gt;  Process &lt;span class="s2"&gt;&amp;quot;mongod&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;    should be running
&lt;/span&gt;&lt;span id="line-7"&gt;  Port &lt;span class="s2"&gt;&amp;quot;27017&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    should be listening
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;Finished in 6.18 seconds &lt;span class="o"&gt;(&lt;/span&gt;files took 1.14 seconds to load&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;3 examples, 0 failures
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모든 테스트가 성공했다! 테스트를 통해서 &lt;code&gt;/etc&lt;/code&gt; 디렉터리가 존재하고, &lt;code&gt;mongod&lt;/code&gt; 프로세스가 실행되고 있으며, &lt;code&gt;27017&lt;/code&gt; 포트가 대기중임을 알 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='테스트-주도-인프라스트럭처(test-driven-infrastructure)'&gt;테스트 주도 인프라스트럭처(Test Driven Infrastructure)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;여기까지 서버스펙을 통해서 이미 생성되어져 있는 도커 이미지를 검증하는 방법에 대해서 살펴보았다. 그렇다면 소프트웨어 개발과 마찬가지로 &lt;code&gt;Dockerfile&lt;/code&gt;을 만드는 과정 전체를 테스트해보는 것은 어떨까?&lt;/p&gt;

&lt;p&gt;물론 이것도 가능하다. 여기서는 redis 이미지를 직접 만들어가면서 테스트를 수행해보자.&lt;/p&gt;

&lt;h3&gt;&lt;a name='디렉터리-구조'&gt;디렉터리 구조&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;serverspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;Gemfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;Guardfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;spec_helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='spec_helper.rb'&gt;&lt;code&gt;spec_helper.rb&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 spec_helper.rb은 앞선 예제를 그대로 사용하되, 이미지 부분을 주석처리 한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c"&gt;# set :docker_image, &amp;#39;nacyot/redis&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='nacyot_redis_image_spec.rb'&gt;&lt;code&gt;nacyot_redis_image_spec.rb&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Redis 서버가 정상적으로 작동하는 지 확인하기 위한 테스트를 준비한다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;spec_helper&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_from_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;docker_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_directory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_installed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_executable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_running&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_listening&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 작성한 테스트들 역시 기본적인 rspec 문법으로 작성되었으며 서버스펙의 리소스들을 사용하고 있다.&lt;/p&gt;

&lt;p&gt;주목할만한 부분이 있다. 이전에는 없었던 &lt;code&gt;before(:all)&lt;/code&gt; 절이 추가되었는데, 이 부분은 테스트를 실행하기에 앞서 한 번 실행된다. 여기서 하는 일은 프로젝트 루트의 &lt;code&gt;Dockerfile&lt;/code&gt;로부터 도커 이미지를 생성하고, 테스트 대상 이미지를 동적으로 지정하는 일이다(이 때 이미지 이름이 아니라, 빌드로부터 반환되는 이미지 ID를 사용한다). 이를 통해서 별도로 빌드 명령을 수행하지 않아도, 테스트를 수행할 때마다 자동적으로 빌드를 하고 테스트를 수행한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='guard를-통한-자동테스트'&gt;Guard를 통한 자동테스트&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이번 프로젝트에서는 Guard를 통해서 Dockerfile과 spec 파일의 변경을 감지하고 테스트할 수 있도록 한다. 이를 위해 Gemfile을 다음과 같이 수정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//rubygems.org&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;serverspec&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rspec&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로젝트 루트에서 추가한 의존성을 설치해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 아래와 같이 Guardfile을 작성한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bundle exec rspec&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guard/rspec/dsl&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guard&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Dsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;spec_files&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;(%&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;{^&lt;/span&gt;&lt;span class="n"&gt;Dockerfile$&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spec/nacyot_redis_image_spec.rb&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 Guard 파일의 내용은 spec 디렉터리 아래의 파일이나 dockerfile이 변경되었을 때 테스트를 자동적으로 실행하도록 한다.&lt;/p&gt;

&lt;p&gt;이제 별도의 터미널을 실행해서 프로젝트 루트에서 다음 명령어를 실행하면 파일이 변경될 때마다 테스트가 자동적으로 실행된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# bundle exec guard&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Guard&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RSpec&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Guard&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;watching&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serverspec&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='첫번째-이터레이션-:-이미지-생성하기'&gt;첫번째 이터레이션 : 이미지 생성하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 빈 Dockerfile을 만들고 베이스 이미지를 지정해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;14.04&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Guard에서 이 변화를 알아채고 자동적으로 테스트를 수행할 것이다. 앞서 이야기했듯이 테스트가 실행되면 자동적으로 이미지가 빌드되므로 빌드는 별도로 수행하지 않아도 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin/redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;listening&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;5.23&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;took&lt;/span&gt; &lt;span class="mf"&gt;0.30381&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="n"&gt;Failed&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;rspec&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;rspec&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin/redis-server&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;rspec&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="n"&gt;rspec&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;listening&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째 테스트만 성공하고, 나머지 테스트가 실패했다! &lt;/p&gt;

&lt;h3&gt;&lt;a name='두번째-이터레이션-:-apt-get을-통해서-redis-설치하기'&gt;두번째 이터레이션 : apt-get을 통해서 redis 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dockerfile 뒤에 다음 내용을 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;\
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자동적으로 테스트가 실행된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin/redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;listening&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.42&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;took&lt;/span&gt; &lt;span class="mf"&gt;0.29263&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="n"&gt;Failed&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;rspec&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;rspec&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;listening&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;redis-server 패키지의 설치를 검증하는 두번째, 세번째 테스트도 통과했다!&lt;/p&gt;

&lt;h3&gt;&lt;a name='세번째-이터레이션-:-redis-실행하기'&gt;세번째 이터레이션 : redis 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dockerfile 뒤에 다음 내용을 추가해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에도 자동적으로 테스트가 실행된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin/redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;listening&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;6.94&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;took&lt;/span&gt; &lt;span class="mf"&gt;0.29334&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테스트가 모두 통과했다! 이를 통해 이 이미지로부터 레디스(redis) 서버가 정상적으로 실행되는 것을 보장할 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='테스트-코드'&gt;테스트 코드&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서 사용한 프로젝트와 테스트 코드는 &lt;a href="https://github.com/nacyot/serverspec_tutorial"&gt;serverspec_tutorial&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;인프라가 정상적인 상태에 있다는 것을 증명하는 것은 매우 중요한 주제이다. 그럼에도 불구하고 이러한 테스트는 대부분 자동화되어있지 않다. Serverspec은 원래 ssh를 통해서 서버의 상태나 CM 툴과 함께 사용을 목적으로 만들어진 도구이다. 이 훌륭한 도구는 단순히 기존 서버 환경 뿐만 아니라 빌드를 통해 완성된 이미지를 구성하는 도커와 같은 컨테이너 시스템을 테스트하는 데도 적격이다. 이를 통해 소프트웨어 테스트 뿐만 아니라 소프트웨어를 탑재한 이미지가  배포되기 전에 정상적으로 작동하는지, 필요한 파일들을 제대로 포함하고 있는지까지 함께 검증하는 것이 가능하다. 또한 서버가 코드처럼 다뤄질 수 있다면, 테스트 자동화는 물론 저장소와 연동해서 CI를 통해 지속적인 통합 역시 가능해진다.&lt;/p&gt;

&lt;p&gt;이제 딱딱해 보이고 하드웨어에 더 가깝게 취급되던 인프라가 이제 정말로 소프트웨어 영역에 좀 더 가까워지고 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='보충'&gt;보충&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;테스트 과정에서 도커 공식 이미지에서 주로 이용되는 debian 환경에 대해서는 포트 리스닝 테스트가 정상적으로 작동하지 않았다. 아직 일부 환경에서 몇몇 리소스들이 정상적으로 작동하지 않을 가능성이 있다. 다음 글에서는 서버스펙에서 도커 테스트가 어떻게 실행되는 지 살펴본다.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>엘라스틱서치(elasticsearch)에 한글 형태소 분석기 은전한잎(eunjeon) 적용하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-06-13-eunjeon-with-elasticsearch/"/>
    <id>http://blog.nacyot.com/articles/2015-06-13-eunjeon-with-elasticsearch/</id>
    <published>2015-06-12T21:05:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/DxnlLeu.jpg' /&gt;&lt;p&gt;엘라스틱(elastic)에서 개발한 엘라스틱서치(elasticsearch)는 루씬 기반의 검색 서버이다. 설치도 간편하며 기본 설정으로 사용해도 충분히 강력하지만 기본적으로 한국어 분석을 지원하지 않는다. 예를 들어 &amp;quot;아버지가 방에 들어간다&amp;quot;라는 한국어 문장을 인덱스해도 &amp;quot;아버지&amp;quot;로는 검색이 안 되고, 반드시 &amp;quot;아버지가&amp;quot;로 검색해야만 결과에 출력된다. 이는 엘라스틱서치의 기본 토크나이저가 공백이나 특수문자만으로 단어들을 분리하기 때문이다. 이러한 문제를 해결하기 위해서는 n-gram 분석이나, 형태소 분석과 같은 인덱스를 추가로 지원해야한다. 이 글에서는 일본어 형태소 분석기 mecab를 한국어에 맞춰 수정한 은전한잎(mecab-ko)을 통해 엘라스틱서치에서 한국어를 인덱스하는 방법에 대해서 다룬다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='tl;dr'&gt;TL;DR&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Docker를 사용해 한글 형태소 분석기가 적용된 엘라스틱서치를 바로 사용해볼 수 있다. 필요한 경우 (일반적으로 boot2docker 사용할 경우 사용하는 주소인) &lt;code&gt;192.168.59.103&lt;/code&gt; 대신 적절한 주소로 대체한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -p 9200:9200 nacyot/elasticsearch-korean
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XPUT http://192.168.59.103:9200/korean/ -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;settings&amp;quot;: {&amp;quot;index&amp;quot;:{&amp;quot;analysis&amp;quot;:{&amp;quot;analyzer&amp;quot;:{&amp;quot;korean&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;custom&amp;quot;,&amp;quot;tokenizer&amp;quot;:&amp;quot;mecab_ko_standard_tokenizer&amp;quot;}}}}}}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://192.168.59.103:9200/korean/_analyze?analyzer&lt;span class="o"&gt;=&lt;/span&gt;korean&lt;span class="se"&gt;\&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.tokens[] | {token: .token, type: .type}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c"&gt;# 분석 결과&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-13"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-25"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;INFLECT&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='설치하기'&gt;설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;엘라스틱서치에서 한글 형태소 분석기를 사용하려면 은전한잎을 설치할 필요가 있다. 다음 설치 방법은 우분투 14.04 운영체제에 오라클 자바 8 버전과 엘라스틱서치가 설치되었다는 것을 전제로 작성되었다. 은전한잎 플러그인은 엘라스틱서치 1.3 ~ 1.6(2015년 6월 현재 최신버전)에서 사용가능하다. 테스트에 사용한 버전은 1.6이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='은전한잎(mecab-ko)-설치'&gt;은전한잎(mecab-ko) 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 은전한잎을 설치한다. 은전한잎은 일본어 형태소 분석기 mecab를 한국어에 맞게 수정한 프로젝트로 mecab-ko라는 프로젝트 이름을 가지고 있다. 최신버전 및 자세한 내용은 &lt;a href="https://bitbucket.org/eunjeon/mecab-ko"&gt;저장소&lt;/a&gt;를 참고하기 바란다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 의존성 설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;automake&lt;/span&gt; &lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# mecab-ko 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvf&lt;/span&gt; &lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.9.2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="cp"&gt;# 빌드 및 설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.9.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ldconfig&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='mecab-ko-dic-설치'&gt;mecab-ko-dic 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음으로 형태소 분석을 위한 사전을 설치한다. 자세한 내용은 &lt;a href="https://bitbucket.org/eunjeon/mecab-ko-dic/"&gt;저장소&lt;/a&gt;를 참조하기 바란다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# mecab-ko-dic 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.0.0-20150517.tar.gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvf&lt;/span&gt; &lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.6.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;20140814.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="cp"&gt;# 빌드 및 설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.6.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20140814&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;autogen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='mecab-java-설치'&gt;mecab-java 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음므로 tagger와 lexicon의 메모리 누수가 해결된 mecab-java 버전을 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 환경 변수 설정&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;JAVA_TOOL_OPTIONS&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# mecab-java 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//mecab.googlecode.com/files/mecab-java-0.996.tar.gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvf&lt;/span&gt; &lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.996&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="cp"&gt;# 빌드 및 설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.996&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;|/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;Makefile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="cp"&gt;# 빌드된 파일 이동(elasticsearch 실행시 참조해주어야 함)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="n"&gt;libMeCab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='엘라스틱서치-mecab-ko-플러그인-설치'&gt;엘라스틱서치 mecab-ko 플러그인 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;마지막으로 엘라스틱서치에서 사용할 수 있도록 mecab-ko를 설치한다. &lt;code&gt;&amp;lt;ELASTICSEARCH_PATH&amp;gt;&lt;/code&gt;에는 엘라스틱서치가 설치된 경로를 넣어준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nt"&gt;&amp;lt;ELASTICSEARCH_PATH&amp;gt;&lt;/span&gt;/bin/plugin --install analysis-mecab-ko-0.17.0 --url https://bitbucket.org/eunjeon/mecab-ko-lucene-analyzer/downloads/elasticsearch-analysis-mecab-ko-0.17.0.zip
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='형태소-분석을-통한-한국어-문장-검색'&gt;형태소 분석을 통한 한국어 문장 검색&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 엘라스틱서치를 앞서 빌드한 &lt;code&gt;mecab-java&lt;/code&gt;를 참조시켜서 실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;elasticsearch -Djava.library.path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/lib
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;한글 분석기가 정상적으로 작동하는 지 확인하기 위해 우선 기본 분석기를 통해서 문장을 분석해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://0.0.0.0:9200/_analyze?pretty&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c"&gt;# 분석 결과&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;tokens&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 0,
&lt;/span&gt;&lt;span id="line-10"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 4,
&lt;/span&gt;&lt;span id="line-11"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-12"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 1
&lt;/span&gt;&lt;span id="line-13"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-14"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-16"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 5,
&lt;/span&gt;&lt;span id="line-17"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 7,
&lt;/span&gt;&lt;span id="line-18"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-19"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 2
&lt;/span&gt;&lt;span id="line-20"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-23"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 8,
&lt;/span&gt;&lt;span id="line-24"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 12,
&lt;/span&gt;&lt;span id="line-25"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-26"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 3
&lt;/span&gt;&lt;span id="line-27"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에 얘기한대로 문장이 &amp;quot;아버지가&amp;quot; 통째로 분석된다. 이렇게 되면 &amp;quot;아버지&amp;quot;로는 이 문장을 검색할 수 없다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 데이터 입력&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XPUT&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/default/text/1&amp;#39; -d &amp;#39;{&amp;quot;text&amp;quot;: &amp;quot;아버지가 방에 들어간다&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# &amp;#39;아버지&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XGET&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/default/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="s"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="cp"&gt;# &amp;#39;아버지가&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XGET&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/default/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지가&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;  &lt;span class="s"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;  &lt;span class="s"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="s"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;      &lt;span class="s"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;      &lt;span class="s"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;      &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;      &lt;span class="s"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;      &lt;span class="s"&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;        &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;아버지가 방에 들어간다&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 &lt;code&gt;korean&lt;/code&gt;이라는 이름으로 &lt;code&gt;mecab_ko_standard_tokenizer&lt;/code&gt;가 적용된 인덱스를 생성한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XPUT http://0.0.0.0:9200/korean/ -d &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s1"&gt;  &amp;quot;settings&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="s1"&gt;    &amp;quot;index&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="s1"&gt;      &amp;quot;analysis&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="s1"&gt;        &amp;quot;analyzer&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="s1"&gt;          &amp;quot;korean&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="s1"&gt;            &amp;quot;type&amp;quot;:&amp;quot;custom&amp;quot;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="s1"&gt;            &amp;quot;tokenizer&amp;quot;:&amp;quot;mecab_ko_standard_tokenizer&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="s1"&gt;          }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="s1"&gt;        }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="s1"&gt;  },&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="s1"&gt;  &amp;quot;mappings&amp;quot;: {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="s1"&gt;    &amp;quot;text&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="s1"&gt;      &amp;quot;properties&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="s1"&gt;        &amp;quot;text&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="s1"&gt;          &amp;quot;type&amp;quot; : &amp;quot;string&amp;quot;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="s1"&gt;          &amp;quot;analyzer&amp;quot;: &amp;quot;korean&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="s1"&gt;        }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="s1"&gt;  }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 인덱스를 통해서 한국어 문장을 분석해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://0.0.0.0:9200/korean/_analyze?analyzer&lt;span class="o"&gt;=&lt;/span&gt;korean&lt;span class="se"&gt;\&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.tokens[] | {token: .token, type: .type}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-13"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;INFLECT&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 &amp;quot;아버지&amp;quot;나 &amp;quot;방&amp;quot;이 명사로 분석된 것을 알 수 있다. 이렇게 인덱스가 되면 정상적으로 검색이 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 데이터 입력&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XPUT&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/korean/text/1&amp;#39; -d &amp;#39;{&amp;quot;text&amp;quot;: &amp;quot;아버지가 방에 들어간다&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# &amp;#39;아버지&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XGET&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/korean/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="s"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;      &lt;span class="s"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;korean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;      &lt;span class="s"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;      &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;      &lt;span class="s"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;      &lt;span class="s"&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;        &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;아버지가 방에 들어간다&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞서 확인한 분석 결과대로 검색이 되는 것을 알 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;일반적으로 동적으로 풀텍스트 서치를 하는 경우 원하는 결과가 검색될 가능성은 높지만, 매우 비효율적이고 검색 대상이 많아질수록 느려진다. 반면에 이른바 검색엔진으로 분류되는 도구들은 미리 텍스트를 분석해 인덱스를 만들기 때문에 매우 효율적으로 검색이 가능하다. 단, 인덱스를 의도한대로 만들어야만 원하는 검색결과를 얻을 수 있다. 앞서 살펴보았듯이 한글 문장을 검색하고자 한다면, 적절히 형태소 분석을 통한 한글 인덱스와 n-gram 인덱스를 만들어줄 필요가 있다. 엘라스틱서치에서는 analyzer와 mapping을 통해서 각 인덱스와 타입들에 대해서 섬세하고 풍부한 인덱스 기능을 지원하고 있다. 이러한 기능들을 잘 활용한다면 의도한 대로 검색 결과를 얻을 수 있을 것이다.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>주피터(Jupyter) 노트북과 자바스크립트 환경 이해하기 - 주피터 위에서 d3.js를 활용한 시각화</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-05-21-d3js-in-jupyter/"/>
    <id>http://blog.nacyot.com/articles/2015-05-21-d3js-in-jupyter/</id>
    <published>2015-05-20T23:45:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/eDpIHJo.jpg' /&gt;&lt;p&gt;기존의 아이파이썬(IPython)에서 이제 본격적으로 주피터 프로젝트로 옮겨가는 과정이 한창 진행중이다. 주피터의 핵심에 대해서는 &lt;strong&gt;&lt;a href="http://blog.nacyot.com/articles/2015-05-08-jupyter-multiple-pythons/"&gt;주피터 다중 커널 개념 이해하기&lt;/a&gt;&lt;/strong&gt;에서 이미 다루었듯이, 파이썬을 비롯한 다양한 언어의 커널을 지원한다는 데 있다. 맥락은 조금 다르지만, 아이파이썬은 이미 훌륭한 자바스크립트 실행환경에서 작동한다는 점에서 주피터 이전에도 이미 멀티 커널을 기본적으로 지원하고 있었다고 할 수 있다. 이 글에서는 이러한 기능을 활용해 주피터 위에서 자바스크립트 코드를 작성 및 실행하고, d3.js 라이브러리를 통해 시각화를 하는 방법에 대해 간단히 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#45432;&amp;#53944;&amp;#48513;-&amp;#47564;&amp;#46308;&amp;#44592;'&gt;&amp;#45432;&amp;#53944;&amp;#48513; &amp;#47564;&amp;#46308;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#45432;&amp;#53944;&amp;#48513;-&amp;#47564;&amp;#46308;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;먼저 주피터를 실행하고 Python3 커널로 노트북을 만든다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/tJdRdHAm.png" alt="Python3 커널 노트북 만들기"&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a name='&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#47588;&amp;#51649;'&gt;&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944; &amp;#47588;&amp;#51649;&lt;a class="anchor-link" href="#&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#47588;&amp;#51649;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;주피터 노트북에서는 매직 커맨드를 통해 단순히 파이썬 코드를 실행시키는 것 이외에도 다양한 작업을 수행할 수 있도록 도와준다. 이러한 매직 커맨드들은 언어 커널에 정의되어 있으면 파이썬 커널에서는 이를 위해 &lt;code&gt;%%&lt;/code&gt;를 앞에 붙여서 실행한다. 예를 들어 &lt;code&gt;%%html&lt;/code&gt; 매직을 사용하면 html 코드를 직접 결과 블록에 삽입할 수 있다. &lt;code&gt;%%html&lt;/code&gt;을 첫 줄에 작성하고, 아래부터는 html코드를 작성한다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;68번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;html&lt;/span&gt;

&amp;lt;style&amp;gt;
.hello-world{
    border: 1px solid black; 
    width: 300px; 
    height: 50px; 
    font-size: 2em; 
    padding: 0.3em;
}
&amp;lt;/style&amp;gt;

&amp;lt;div class=&amp;#39;hello-world&amp;#39;&amp;gt;
Hello ,html magic!
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_html rendered_html output_subarea "&gt;

&lt;style&gt;
.hello-world{
    border: 1px solid black; 
    width: 300px; 
    height: 50px; 
    font-size: 2em; 
    padding: 0.3em;
}
&lt;/style&gt;

&lt;div class='hello-world'&gt;
Hello ,html magic!
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;위와 같이 html 코드를 바로 사용할 수 있음을 알 수 있다. 더욱 편리한 점은 주피터의 기본 에디터 &lt;a href="http://codemirror.net"&gt;CodeMirror&lt;/a&gt;는 다양한 언어를 지원하기 있어서, 주피터는 이를 통해 자동적으로 HTML 문법을 지원해준다.&lt;/p&gt;
&lt;p&gt;이와 마찬가지로 자바스크립트 코드를 실행할 수 있도록 &lt;code&gt;%%javascript&lt;/code&gt; 매직도 지원하고 있다. 여기서는 먼저 현재 주피터 셀의 결과 요소를 얻어올 수 있도록 헬퍼를 작성해서 사용한다(이 헬퍼가 필요한 이유에 대해서는 뒤에서 자세히 설명한다).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;69번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

window.get_element = function(el){
    if(el){ $(el).html('') }
    return (el !== undefined) ? el[0] : $('script').last().parent()[0];
};

element = undefined;
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;70번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;Hello, js magic!&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

var target = get_element(element)
$(target).append('&lt;div class="hello-world"&gt;Hello, js magic!&lt;/div&gt;')
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;자바스크립트 블록도 정상적으로 출력이 된다. 주피터 노트북은 웹브라우저에서 작동하기 때문에 커널을 통해서 파이썬 코드를 평가하는 것은 물론, 이제 &lt;code&gt;%%html&lt;/code&gt;과 &lt;code&gt;%%javascript&lt;/code&gt; 매직을 통해서 자유롭게 웹 페이지의 요소들을 다룰 수 있다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#54764;&amp;#54140;-&amp;#54632;&amp;#49688;-&amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;'&gt;&amp;#54764;&amp;#54140; &amp;#54632;&amp;#49688; &amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#54764;&amp;#54140;-&amp;#54632;&amp;#49688;-&amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;앞선 예제에서는 &lt;code&gt;get_element&lt;/code&gt;라는 헬퍼 함수를 작성했다. 이 함수를 이해하기에 앞서 한가지 짚고 넘어갈 부분이 있다. 주피터 노트북의 &lt;code&gt;%%javascript&lt;/code&gt; 매직 안에서는 element라는 특별한 요소가 정의되어있다. 이 element에는 현재 주피터 노트북 셀의 결과 요소가 지정되어 있고, 이를 조작해서 현재 셀의 출력 결과에 대한 조작을 할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어서 jupyter notebook 위에서는 헬퍼 함수 없이도 다음과 같이 코드가 정상적으로 작동한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;I don&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/dNogkPrl.png" alt="element를 활용한 자바스크립트 평가"&gt;&lt;/p&gt;
&lt;p&gt;일반적이지 않은 매직 셀을 평범한 셀처럼 사용할 수 있게 해주는 흥미로운 부분이다. 하지만 주피터 노트북의 저장 포맷인 ipynb 파일에는 자바스크립트 매직 셀의 실행 결과가 저장되지는 않는다. 이는 단지 브라우저 위에서 실행될 뿐이다. ipynb에는 실행 결과가 저장되는 대신에 output 속성 아래에 다음과 같이 &lt;code&gt;application/javascript&lt;/code&gt; 형식으로 소스코드 자체가 저장된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "$(element).append('&amp;lt;div class="hello-world"&amp;gt;I don't need helper!&amp;lt;/div&amp;gt;')",

(이하 생략)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 저장된 ipynb 파일은 jupyter notebook이나 nbviewer에서 파일을 읽었을 때 이 스크립트를 그대로 실행하는 방식으로 결과를 복원해준다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;&lt;a name='jupyter-notebook&amp;#44284;-nbviewer-&amp;#47784;&amp;#46160;-&amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;'&gt;jupyter notebook&amp;#44284; nbviewer &amp;#47784;&amp;#46160; &amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#jupyter-notebook&amp;#44284;-nbviewer-&amp;#47784;&amp;#46160;-&amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;그런데 문제는 element에 있다. jupyter notebook에서는 코드를 직접 실행하거나, 저장된 파일을 읽어들여도 element 요소가 적절하게 해석된다. 하지만 nbviewer에서는 element 요소를 적절하게 해석하지 못 한다. 실제로 nbviewer에서 실행되는 코드를 살펴보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output_subarea output_javascript &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;I don&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&amp;#39;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nbviewer에서 ipynb 파일을 로드해서 코드를 열어보면 해당하는 output 위치에 이런 스크립트 태그가 들어가게 된다. 여기서는 element 요소가 없을 뿐더러, 더더욱 심각한 것은 이 스크립트 실행되고 있는 위치를 특정할 수 있는 어떠한 방법도 제공하지 않는다. 당연하지만 웹 브라우저는 &lt;code&gt;element&lt;/code&gt; 요소를 찾을 수 없다는 에러를 내며 아무것도 보여주지 않는다. 주피터 노트북을 직접 사용할 수 있는 환경이라면 무방하지만, 이렇게 되면 nbviewer를 통해서 정적으로 노트북을 공유하는 것이 불가능해진다. 위에서 정의한 헬퍼함수는 바로 이러한 문제를 해결하기 위해서 만든 임시방편이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수는 element가 있는 환경과 없는 환경을 나눠서 출력 결과를 반환한다. element가 있으면 이를 그대로 사용하고, 없으면 현재 실행되고 있는 스크립트 태그를 찾아 그 부모를 반환하다. 이는 이 코드가 실행될 때 정의되어있는 마지막 스크립트 요소가 해당 코드를 포함한 script 요소라는 점을 활용한 약간은 편법적인 방법이다(이 방법 외에 코드가 실행되는 위치를 특정하는 방법을 찾기 쉽지 않았다).&lt;/p&gt;
&lt;p&gt;이 헬퍼는 &lt;code&gt;get_element(element)&lt;/code&gt;와 같이 사용하며, 이를 통해서 노트북과 뷰어 양 쪽 모두를 지원할 수 있다. 마지막 줄에서는 nbviewer에서 element가 정의되어 있지 않다는 에러를 방지하기 위해서 전역 환경 element 변수에 undefined를 대입한다. 이제 nbviewer에서도 정상적으로 작동하는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/0Up02eWl.png" alt="nbviewer에서도 실행 결과가 정상적으로 출력된다!"&gt;&lt;/p&gt;
&lt;p&gt;이제 자바스크립트를 사용해 노트북을 작성할 수 있음은 물론, 이를 정적으로 공유도 할 수 있게 되었다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='require.js-&amp;#49324;&amp;#50857;&amp;#54644;-&amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196;-&amp;#50808;&amp;#48512;-&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;'&gt;require.js &amp;#49324;&amp;#50857;&amp;#54644; &amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196; &amp;#50808;&amp;#48512; &amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944; &amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#require.js-&amp;#49324;&amp;#50857;&amp;#54644;-&amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196;-&amp;#50808;&amp;#48512;-&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;조금 더 나아가보자. 주피터 노트북에는 기본적으로 몇 가지 외부 스크립트들이 포함되어 있다. jquery, moment, require.js가 기본 외부 스크립트이다. 이러한 스크립트는 프로필 설정을 통해서 미리 추가할 수도 있지만, &lt;code&gt;require.js&lt;/code&gt;가 눈에 띈다. 이를 사용하면 AMD 방식으로 동적으로 외부 스크립트를 읽어오는 것이 가능해진다. 이를 통해 미리 외부 스크립트들을 준비해야하는 번잡함과 전역 환경에 스크립트들을 로드해서 생길 수 있는 문제들을 피해갈 수 있다.&lt;/p&gt;
&lt;p&gt;이를 사용하려면 먼저 외부 스크립트 주소를 &lt;code&gt;require.config&lt;/code&gt;에 정의한다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;71번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://d3js.org/d3.v3.min&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

require.config({
    paths: {
        d3: "http://d3js.org/d3.v3.min"
    }
});
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;config에 정의한 d3 스크립트를 사용하려면 다음과 같이 require 함수에 사용하고자 하는 외부스크립트와 실행하려는 함수를 넘겨주면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;// 이제 이 안에서는,&lt;/span&gt;
  &lt;span class="c1"&gt;// d3.js 라이브러리를 사용해 코드를 작성할 수 있다&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;스크립트가 제대로 로드되었는지 확인해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;&lt;a name='&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752;-&amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688;-&amp;#54056;&amp;#53556;&amp;#51012;-&amp;#54876;&amp;#50857;&amp;#54644;-&amp;#52636;&amp;#47141;-&amp;#50948;&amp;#52824;-&amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;'&gt;&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752; &amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688; &amp;#54056;&amp;#53556;&amp;#51012; &amp;#54876;&amp;#50857;&amp;#54644; &amp;#52636;&amp;#47141; &amp;#50948;&amp;#52824; &amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752;-&amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688;-&amp;#54056;&amp;#53556;&amp;#51012;-&amp;#54876;&amp;#50857;&amp;#54644;-&amp;#52636;&amp;#47141;-&amp;#50948;&amp;#52824;-&amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;안타깝게도, 여기서도 위에서 이야기했던 것과 비슷한 문제가 하나 있다. require는 비동기적으로 실행되며 d3가 로드된 다음에서야 넘겨진 함수를 호출하도록 되어있다. 즉, d3가 로드되는 것을 기다리지 않고 다음 스크립트들을 실행해버린다. 주피터 노트북 위에서는 자바스크립트 실행에 대해서 독립된 영역이 사용되기 때문에 무방하지만, nbviewer에서는 위에서 보았듯이 모든 코드가 script 태그로 그냥 삽입된다. 따라서 그냥 실행하면 모든 변수가 전역에 노출되어 버린다. 따라서 target 변수는 실행하자마자 갱신되고, 이미 모든 코드가 실행되어버렸기 때문에 nbviewer에서 마지막에 호출된 &lt;code&gt;get_element(element)&lt;/code&gt;가 모든 셀의 출력 위치가 된다. 아래는 여러 셀에서 출력한 모든 그래프가 마지막 셀에 그려져 버린 경우이다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/5OU34Exl.png" alt="클로저를 사용하지 않은 경우"&gt;&lt;/p&gt;
&lt;p&gt;이 문제를 해결하려면 즉시실행함수 패턴과 클로저를 사용해서 미리 결과를 출력한 대상을 정의해두어야 한다. 즉 위에서 정의했던 코드는 다음과 같이 작성되어야 한다. 이를 통해서 함수로 각 셀의 실행 환경을 분리하고, &lt;code&gt;targetElement&lt;/code&gt;를 정확히 지정할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// 이 안에서 d3.js 라이브러리를 사용하고,&lt;/span&gt;
        &lt;span class="c1"&gt;// targetElement를 통해서 결과를 출력한다&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 모든 결과가 의도한 위치에서 출력될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/DuRRFgXl.png" alt="클로저를 사용한 경우"&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='d3.js&amp;#47484;-&amp;#54876;&amp;#50857;&amp;#54620;-&amp;#49884;&amp;#44033;&amp;#54868;'&gt;d3.js&amp;#47484; &amp;#54876;&amp;#50857;&amp;#54620; &amp;#49884;&amp;#44033;&amp;#54868;&lt;a class="anchor-link" href="#d3.js&amp;#47484;-&amp;#54876;&amp;#50857;&amp;#54620;-&amp;#49884;&amp;#44033;&amp;#54868;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;자잘한 문제들로 인해 조금 돌아서 왔다. 이제 d3.js를 실제로 사용해서 정말 간단하게 동그라미 몇 개를 실제로 그려보자.&lt;/p&gt;
&lt;p&gt;먼저 require를 통해서 정말로 d3 객체를 읽어오는 지 확인해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;72번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        $(targetElement).append($('&lt;p&gt;' + d3 + '&lt;/p&gt;'))
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;code&gt;[object Object]&lt;/code&gt;가 나오는 것을 봐서는 무언가 읽어온 것을 알 수 있다. 이번엔 d3.js의 &lt;code&gt;max&lt;/code&gt; 함수를 사용해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;73번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        $(targetElement).append($('&lt;p&gt;' + d3.max([3,91,82,34,19]) + '&lt;/p&gt;'))
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;결과값이 정상적으로 출력된다. 이를 통해 d3.js가 정상적으로 로드되었다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이제 동그라미를 그려보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;74번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;350px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;100px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;border&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1px solid lightgray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        
        &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;skyblue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;50px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        var data = [1, 2, 3, 4, 5, 6, 10]
        var svg = d3.select(targetElement).append('svg')
            .attr('width', '350px')
            .attr('height', '100px')
            .style('border', '1px solid lightgray');
        
        svg.selectAll('circle')
            .data(data)
            .enter()
            .append('circle')
            .style('fill', 'skyblue')
            .attr('cx', function(d, i){ return i * (350/data.length) + 15})
            .attr('cy', '50px')
            .attr('r', function(d){ return d * 3})
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;정말 그냥 데이터 배열을 통해서 생성한 동그라미다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#44208;&amp;#47200;'&gt;&amp;#44208;&amp;#47200;&lt;a class="anchor-link" href="#&amp;#44208;&amp;#47200;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;이를 통해 자바스크립트와 d3.js를 활용해(다른 라이브러리 어떤 것이라도 가능하다) 노트북을 작성할 수 있다. 아직 nbviewer에서는 이런 부분에 대한 지원이 약한 편인데(앞으로 지원 여부도 명확하지 않다), 약간의 편법을 통해서 피해갈 수 있다. 아래 링크들은 실제로 이러한 방식을 사용해서 만들어본 몇 가지 예제들이다. 모두 nbviewer를 통해서 웹에서 직접 확인해볼 수 있다. 심지어(?) 지금 읽고 있는 글도 nbviewer에서 직접 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/nacyot/blog.nacyot.com-source/blob/master/source/iruby/d3js-in-jupyter.ipynb"&gt;D3.js in Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/2abc5e8c80c3916500ba"&gt;Rounded Donut Chart 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/e868d09bb6434d9c76c4"&gt;Line Graph Iterations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/c0190709f56024eb516e"&gt;D3.js 5장, 6장 예제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>launchctl을 사용한 맥 OSX에서 서비스 등록하기 - 주피터(Jupyter, IPython &gt;= 3) 노트북 서비스 등록 예제</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-05-13-jupyter-as-a-service/"/>
    <id>http://blog.nacyot.com/articles/2015-05-13-jupyter-as-a-service/</id>
    <published>2015-05-13T01:13:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/3tBPtzI.jpg' /&gt;&lt;p&gt;아주 자주 사용하는 프로그램은 컴퓨터가 켜져있으면 어김없이 실행된다. 그래서 사용자들은 보통 이러한 프로그램을 시작 프로그램에 등록해서 사용하곤 한다. 이러한 프로그램이 백그라운드 작업을 하는 프로그램이거나 서버 프로그램이라면 매번 터미널을 열어서 실행한다는 것이 여간 번거로운 일이 아닐 것이다. 맥 OSX에서도 이와 같은 상황을 겪을 수 있는데, 적절히 커스텀 서비스를 등록해 이러한 번거로움을 피해갈 수 있다. 이 글에서는 &lt;a href="http://www.jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;을 예제로 OSX 서비스 등록과 간단한 조작법에 대해서 살펴본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='jupyter-notebook-서비스-등록-예제'&gt;Jupyter Notebook 서비스 등록 예제&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서는 Jupyter(IPython) Notebook을 예제로 소개한다. IPython은 파이썬 REPL의 확장으로 웹 기반의 노트북을 지원한다. 이는 서버로 작동하는데, 데스크탑에서 사용하는 경우 매번 서버를 실행해줘야하는 번거로움이 있다. 여기서는 로컬 환경에서 실행되는 Jupyter Notebook을 서비스로 만들어서 항상 &lt;code&gt;http://localhost:8888&lt;/code&gt;로 접근 가능하도록 만든다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='jupyter-notebook'&gt;Jupyter Notebook&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 Jupyter Notebook을 사용가능한 환경을 준비한다(기본적으로 설치된 파이썬을 이용하거나 필요하면 &lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt; 등을 이용해 적절한 환경을 구축한다. 파이썬 &amp;gt; 3, 아이파이썬 &amp;gt; 3를 추천한다). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install zeromq
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install ipython&lt;span class="o"&gt;[&lt;/span&gt;notebook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.061 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Using MathJax from CDN: https://cdn.mathjax.org/mathjax/latest/MathJax.js
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.117 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Serving notebooks from &lt;span class="nb"&gt;local &lt;/span&gt;directory: /Users/toto/Library/LaunchAgents
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; 0 active kernels
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; The IPython Notebook is running at: http://localhost:8888/
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Use Control-C to stop this server and shut down all kernels &lt;span class="o"&gt;(&lt;/span&gt;twice to skip confirmation&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code&gt;localhost:8888&lt;/code&gt;로 노트북 서버에 접근가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/rbIGYXi.png" alt="Jupyter(IPython) Notebook"&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name='launchagent-서비스-파일-준비하기'&gt;LaunchAgent 서비스 파일 준비하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 &lt;code&gt;~/Library&lt;/code&gt; 디렉터리 아래에 &lt;code&gt;LaunchAgents&lt;/code&gt; 디렉터리가 있는 지 확인한다. 그리고 &lt;code&gt;com.jupyter.server.plist&lt;/code&gt; 파일을 생성해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p ~/Library/LaunchAgents/
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;touch com.jupyter-python3.server.plist
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;com.jupyter.server.plist&lt;/code&gt; 파일에 다음과 같이 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;    &lt;span class="nt"&gt;&amp;lt;true&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    &lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.jupyter.server&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;    &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/your/ipython/path&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;notebook&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--ip=0.0.0.0&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--port=8888&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--notebook-dir=/your/notebook/path&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;  &lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 설정에서 &lt;code&gt;/your/ipython/path&lt;/code&gt;와 &lt;code&gt;/your/notebook/path&lt;/code&gt;는 직접 자신이 사용하는 디렉터리로 지정해야한다. &lt;code&gt;/your/ipython/path&lt;/code&gt;는 &lt;code&gt;which ipython&lt;/code&gt; 명령어로 위치를 확인할 수 있고, &lt;code&gt;your/notebook/path&lt;/code&gt;는 앞으로 작성하게 될 노트북을 디렉터리를 원하는 곳에 생성하고 그 경로를 지정해준다.&lt;/p&gt;

&lt;p&gt;다음으로 서비스를 등록(load)한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl load ~/Library/LaunchAgents/com.jupyter.server.plist
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;단, launchctl은 tmux와 같은 터미널 멀티플렉서 환경에서는 정상적으로 실행되지 않는 경우가 있으니, 기본 터미널에서 사용하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기까지 정상적으로 설정했다면 이제 시스템이 실행될 때 자동적으로 서비스를 실행할 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='서비스-실행하기'&gt;서비스 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl start com.jupyter.server
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 설정의 경우, &lt;code&gt;RunAtLoad&lt;/code&gt; 키를 통해서 로드 시에 서비스를 자동 실행한다. 필요한 경우 launchctl을 통해서 직접 서비스를 실행할 수도 있다. 서비스를 실행하면 웹페이지가 직접 기본 브라우저로 실행된다. 그렇지 않다면 웹브라우저에서 &lt;code&gt;http://localhost:8888&lt;/code&gt;로 접근할 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='서비스-중지하기'&gt;서비스 중지하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl stop com.jupyter.server
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;launchctl을 통해서 서비스를 중지할 수 있다(자동으로 실행되지 않게하려면 unload 후 파일을 삭제해야한다). 단, 위와 같이 &lt;code&gt;KeepAlive&lt;/code&gt;가 설정되어 있으면 종료되도 다시 실행된다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서는 Jupyter Notebook을 서비스로 등록해서 사용하는 법에 대해서 살펴보았다. 하지만 서비스 파일의 기본적인 구조만 익혀둔다면, 이외에도 다양한 서비스들을 직접 정의해서 편리하게 사용할 수 있을 것이다. 더불어 OSX의 서비스는 실행 상태 유지(&lt;code&gt;&amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;&lt;/code&gt;), 로드 시 실행하기(&lt;code&gt;&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;&lt;/code&gt;), 반복 실행(&lt;code&gt;&amp;lt;key&amp;gt;StartInterval&amp;lt;/key&amp;gt;&lt;/code&gt;), 표준 출력(&lt;code&gt;&amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;&lt;/code&gt;), 표준 에러(&lt;code&gt;&amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;&lt;/code&gt;) 리다이렉트 등 더 다양한 설정들도 지원한다. 자세한 내용은 다음 페이지를 참조하기 바란다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html"&gt;Apple Developer - Daemons and Services Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>주피터(Jupyter, IPython &gt;= 3)의 다중 커널 개념 이해하기 - 파이썬2와 파이썬3 동시에 사용하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-05-08-jupyter-multiple-pythons/"/>
    <id>http://blog.nacyot.com/articles/2015-05-08-jupyter-multiple-pythons/</id>
    <published>2015-05-07T18:00:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/ww5UMh7.jpg' /&gt;&lt;p&gt;아이파이썬 노트북(IPython Notebook)은 원래 파이썬 REPL의 확장으로 개발되었다. 원래 메시지 처리 부분을 분리한 현재의 아키텍처는 파이썬이라는 언어에 대해서 콘솔과 qt를 통한 GUI, 그리고 웹을 기반으로하는 노트북 등 클라이언트를 분리하기 위해서 도입되었다. 하지만 이는 동시에 언어 실행기의 확장 (즉, 파이썬 이외의 것들을 실행할 수 있는) 가능성도 열어주었다. 원래 IPython에서는 이런 부분에 대한 고려가 없었기 때문에 언어를 해석하는 커널은 기본적으로 한 가지만을 지원한다. 따라서 커널을 바꿀 수는 있지만, 커널을 바꾸려면 IPython Notebook 서버를 새로 실행해야만 했다. 반면에 주피터(IPython &amp;gt;= 3의 다른 이름)에서는 하나의 서버에서 다수의 커널을 바꿔가며 실행할 수 있다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='ipython2의-커널-설정-이해하기'&gt;IPython2의 커널 설정 이해하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 IPython2 버전의 노트북 서버는 다음과 같이 실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 명령어로 파이썬을 실행하면, 현재 버전의 인터프리터 커널로 IPython Notebook 서버가 실행된다. 즉, 파이썬 버전이 2.7.9라면, IPython Kenrel도 2.7.9가 되고, 3.4.2면 3.4.2가 된다. 실행이 가능하다면 다른 인터프리터에 대해서도 마찬가지이다.&lt;/p&gt;

&lt;p&gt;먼저 명령행에서 파이썬 버전을 확인해보고, 파이썬 노트북을 실행해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python --version
&lt;/span&gt;&lt;span id="line-2"&gt;Python 2.7.9
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install &lt;span class="s2"&gt;&amp;quot;ipython[notebook]&amp;lt;3&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;...
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;서버를 실행하면 &lt;code&gt;http://localhost:8888&lt;/code&gt;이나 출력되는 주소로 IPython Notebook에 접근할 수 있다. 새로운 노트북을 만들고, 노트북 위에서 파이썬 버전을 확인해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/vmEJyXA.png" alt="파이썬 버전 확인"&gt;&lt;/p&gt;

&lt;p&gt;명령행에서와 마찬가지로 2.7.9임을 확인할 수 있다. 만일 다른 언어나 다른 버전의 파이썬 커널을 실행하고자 한다면, 별도의 IPython Profile(설정들을 모아놓은 디렉터리)를 만들고 아래의 명령어로 해당하는 프로필을 적용할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook --profile &amp;lt;PROFILE&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아니면 커널 옵션을 직접 지정하는 방법도 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook --KernelManager.kernel_cmd&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;COMMAND&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, 하나의 서버에서는 다수의 커널을 지원하지 않기 때문에 매번 새로 실행하거나 별도의 서버를 실행해야하는 번거로움이 있었다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='왜-주피터(jupyter)가-되었을까?'&gt;왜 주피터(Jupyter)가 되었을까?&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;전술하였듯이, 원래 IPython에서 클라이언트와 파이썬 해석기 사이에 메시지를 중개하기 위한 ZeroMQ가 사용된 것은 사실 다양한 클라이언트를 지원하기 위해서였다. 그런데 이는 동시에 다양한 커널을 도입하게 되는 계기가 되기도 했다(&lt;a href="https://github.com/ipython/ipython/wiki/IPEP-25%3A-Registry-of-installed-kernels"&gt;IPEP 25&lt;/a&gt;). 이러한 요구사항은 IPython이라는 이름 대신 새로운 이름이 필요했던 가장 큰 이유라고 생각된다.&lt;/p&gt;

&lt;p&gt;Jupyter(IPython &amp;gt;= 3)에서는 하나의 노트북 서버에서 다수의 커널을 지원한다. 즉, 하나의 서버를 실행한 상태에서 커널을 선택해서 노트북을 작성할 수 있도록 구조가 변경되었다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='주피터(jupyter)의-기본-커널'&gt;주피터(Jupyter)의 기본 커널&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 여기에서는 OSX나 Linux 계열 운영체제에서 파이썬3를 사용하고 있다고 가정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python --version
&lt;/span&gt;&lt;span id="line-2"&gt;Python 3.4.2
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;최신 버전의 주피터를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install ipython&lt;span class="o"&gt;[&lt;/span&gt;notebook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython --version
&lt;/span&gt;&lt;span id="line-3"&gt;3.1.0
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;주피터에는 현재 사용가능한 kernel들을 확인할 수 있는 명령어가 추가되었다. 먼저 현재 사용할 수 있는 커널을 살펴보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython kernelspec list
&lt;/span&gt;&lt;span id="line-2"&gt;python kernelspec list
&lt;/span&gt;&lt;span id="line-3"&gt;Available kernels:
&lt;/span&gt;&lt;span id="line-4"&gt;  python3
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이를 통해서 현재 파이썬 버전이 사용가능하다는 것을 알 수 있다. 실제로 서버를 실행해서 확인해보면 새로운 노트북을 만들 때 Python 3만을 선택할 수 있을 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='다중-커널-개념-이해하기'&gt;다중 커널 개념 이해하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;앞서 이야기한 것처럼 주피터에서는 다중 커널을 하나의 노트북 서버에서 지원한다. 이러한 기능을 활성화하려면 적절히 커널 설정 파일을 추가해주어야한다. 과거에는 이러한 작업을 위해서 프로필 개념을 주로 사용했으나, 현재는 &lt;code&gt;~/.ipython&lt;/code&gt; 디렉터리 아래에 &lt;code&gt;kernels&lt;/code&gt;라는 디렉터리를 사용하는 것이 더 편리하다.&lt;/p&gt;

&lt;p&gt;여기에 가보면 처음에는 아무런 커널도 없음을 알 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기에 커널 설정이 없더라도, 주피터는 기본 커널(파이썬3)을 적절히 실행해준다. 명시적으로 커널 설정을 확인하고 수정하기 위해서는 다음 명령어를 사용한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython kernelspec install-self
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 명령어를 실행하면, &lt;code&gt;/usr/local/share/jupyter/kernels&lt;/code&gt;에 Python3 커널 설정을 추가할 것이다. 편의상 이를 ipython 설정 디렉터리 아래로 복사한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv /usr/local/share/jupyter/kernels/python3 &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;커널 디렉터리로 이동해보면 다음과 같은 파일들을 볼 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.ipython/kernels/python3
&lt;/span&gt;&lt;span id="line-2"&gt;kernel.json    logo-32x32.png logo-64x64.png
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;logo-*.png&lt;/code&gt; 이미지 파일은 해당하는 커널을 사용할 때 화면에 보여줄 이미지이다. 여기서 주목할 파일은 kernel.json이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat kernel.json
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt; &lt;span class="s2"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-4"&gt; &lt;span class="s2"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Python 3&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-5"&gt; &lt;span class="s2"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;/usr/bin/python3&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;IPython.kernel&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;langugae&lt;/code&gt;는 커널의 언어, &lt;code&gt;display_name&lt;/code&gt;은 화면에 보여줄 이름이라는 것을 쉽게 유추할 수 있다. 그리고 &lt;code&gt;argv&lt;/code&gt; 속성이 바로 파이썬 커널 서버를 실행하기 위한 명령어이다. 이 명령어를 그대로 복사해서 실행해보도록하자. &lt;code&gt;connection_file&lt;/code&gt;은 임의로 &lt;code&gt;python3.ipython&lt;/code&gt;이라고 붙였다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nl"&gt;NOTE:&lt;/span&gt; &lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;quit&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="n"&gt;sending&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="s"&gt;&amp;quot;quit&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;UNIX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;environments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/ipython/ipython/issues/2049&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;existing&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 커널 서버가 실행되고 명령을 기다린다. 맨 아래에서 설명하고 있듯이 &lt;code&gt;--existing python3.ipython&lt;/code&gt; 옵션을 통해서 ipython에서 이 커널 서버를 직접 사용하는 것도 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 다른 셸에서 실행&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;existing&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;IPython&lt;/span&gt; &lt;span class="n"&gt;Console&lt;/span&gt; &lt;span class="mf"&gt;3.1.0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a name='다른-언어-커널-예제(ruby)'&gt;다른 언어 커널 예제(ruby)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;위의 예제는 사용하는 커널이 파이썬3이기 때문에 &lt;code&gt;ipython console&lt;/code&gt;을 그냥 사용하는 것과 어떻게 다른지 알 수 없다. 실제로 커널 서버가 작동하는 것을 보여주기 위해, 다음 예제에서는 IRuby가 설치되어있다고 가정한다.(IRuby에 대해서는 이전 글 &lt;a href="http://blog.nacyot.com/articles/2015-04-15-rorlab-jupyter-iruby-notebook/"&gt;IRuby Notebook&lt;/a&gt; 참조)&lt;/p&gt;

&lt;p&gt;IRuby를 위한 &lt;code&gt;kernel.json&lt;/code&gt;을 살펴본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels/ruby
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat kernel.json
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="s2"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iruby&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;kernel&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="s2"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;:     &lt;span class="s2"&gt;&amp;quot;ruby&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본적인 구조는 파이썬의 &lt;code&gt;kernel.json&lt;/code&gt;과 완전히 같다. 간단히 설명하자면 IRuby는 Jupyter와 소통하기 위한 커널 서버의 Ruby 구현체라고 할 수 있다. 앞서와 마찬가치로 커널 서버를 실행한다. 단, iruby 커널은 자동적으로 connection 파일을 생성하지 않으므로, 임시 파일을 미리 생성해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s1"&gt;  &amp;quot;stdin_port&amp;quot;: 57533, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="s1"&gt;  &amp;quot;ip&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="s1"&gt;  &amp;quot;control_port&amp;quot;: 40023, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="s1"&gt;  &amp;quot;hb_port&amp;quot;: 35724, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="s1"&gt;  &amp;quot;signature_scheme&amp;quot;: &amp;quot;hmac-sha256&amp;quot;, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="s1"&gt;  &amp;quot;key&amp;quot;: &amp;quot;29e39299-76c7-495f-be03-eb1722c25efe&amp;quot;, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="s1"&gt;  &amp;quot;shell_port&amp;quot;: 52952, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="s1"&gt;  &amp;quot;transport&amp;quot;: &amp;quot;tcp&amp;quot;, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="s1"&gt;  &amp;quot;iopub_port&amp;quot;: 41730&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt; &amp;gt; ruby.ipython
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 IPython을 이 connection 파일로 실행하면, 루비 코드가 실행된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython console --existing ruby.ipython
&lt;/span&gt;&lt;span id="line-2"&gt;IPython Console 3.1.0
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;In &lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;: puts &lt;span class="s2"&gt;&amp;quot;puts is not python method!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;puts is not python method!
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 같이 어떤 원리로 커널(실행기)가 클라이언트가 실행되는 지를 이해하면, 다중 커널이 무엇을 의미하고 어떻게 설정할 수 있는 지도 어렵지 않게 이해할 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='주피터(jupyter)에서-파이썬2와-파이썬3-동시에-사용하기'&gt;주피터(Jupyter)에서 파이썬2와 파이썬3 동시에 사용하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;앞서서 살펴보았듯이 IPython에서는 IPython을 실행한 파이썬 버전을 우선적으로 사용한다. 이는 주피터에서도 마찬가지이다. 파이썬3를 사용하고 있다면 기본 커널은 파이썬3가 된다. 그렇다면 파이썬2를 사용하고자 한다면 어떻게 해야할까? 물론 파이썬2를 설치하고 pip로 ipython을 설치하고 notebook 서버를 실행하는 것도 방법이긴 하다. 하지만 앞서 다중 커널에 대해서 배웠으니, 여기서는 이를 활용해보도록 하자.&lt;/p&gt;

&lt;p&gt;다시 한 번 되새겨보자. 커널은 노트북 서버나 클라이언트와는 분리되어있다. 따라서 커널이 파이썬2건 파이썬3건 노트북 서버나 클라이언트는 전혀 신경쓰지 않는다. 단지 기본적으로 실행되는 파이썬은 IPython이 실행되는 파이썬을 사용하도록 설정되어있을 뿐이다.&lt;/p&gt;

&lt;p&gt;여기서는 pyenv와 파이썬3를 사용한다고 가정하고 앞서 보았던 파이썬3의 &lt;code&gt;kernel.json&lt;/code&gt; 파일을 사용해 파이썬2 커널을 지원하도록 만들 것이다.&lt;/p&gt;

&lt;p&gt;먼저 Notebook Server를 실행해 파이썬 3만이 지원된다는 것을 확인해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv install 3.4.2
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv global 3.4.2
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pythen --version
&lt;/span&gt;&lt;span id="line-4"&gt;Python 3.4.2
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음 이미지와 같이 IPython Notebook 서버에서는 기본적으로 &lt;code&gt;Python 3&lt;/code&gt; 하나의 커널만을 지원하다. 기본 커널을 생성하고 이를 IPython 설정 디렉터리로 이동시킨다. 그리고 디렉터리 이름을 python2로 변경한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython kernelspec install-self
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv /usr/local/share/jupyter/kernels/python3 &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv python3 python2
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python2
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 &lt;code&gt;pyenv&lt;/code&gt;를 통해서 파이썬 2를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv install 2.7.8
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;kernel.json&lt;/code&gt;을 다음과 같이 수정한다. &lt;USER&gt;은 적절히 변경한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt; &lt;span class="s2"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt; &lt;span class="s2"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt; &lt;span class="s2"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="s2"&gt;&amp;quot;/Users/&amp;lt;USER&amp;gt;/.pyenv/versions/2.7.8/bin/python2.7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="s2"&gt;&amp;quot;IPython.kernel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt; &lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;}
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이게 전부다. 다시 IPython Notebook을 실행시켜본다(이미 실행이 되어있다면 재실행하지 않아도 바로 적용된다).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 Notebook에 접속해서 새로운 문서를 만들려고 하면 다음과 같이 &amp;quot;Python 2&amp;quot;와 &amp;quot;Python 3&amp;quot; 두 선택지가 있는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/XhKnpqa.png" alt="노트북 생성시 커널 선택 - 파이썬2, 파이썬3"&gt;&lt;/p&gt;

&lt;p&gt;각각의 커널을 선택해서 실제로 작동하는 버전을 확인해보자. 먼저 파이썬2로 노트북을 만들고, 중간에 파이썬3로 커널을 교체한다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/N6Ftpak.png" alt="하나의 서버에서 다른 파이썬 버전 커널 사용하기"&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 파이썬2와 파이썬3 커널을 하나의 노트북 서버에서 사용 가능하다는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;주피터의 다중 커널 개념 지원은 매우 간단하고, 강력하다. IPython이 실행되는 파이썬 실행기에 종속되지 않기 때문에, 다른 언어들의 커널을 지원할 뿐만 아니라, 환경만 갖춰져 있다면 같은 언어의 다양한 버전에 대해서도 별도의 커널을 만들어 사용할 수 있다. 나아가 파이썬의 virtualenv와 결합하면 환경별로도 커널을 분리해 사용할 수 있다. 이와 같이 다중 커널 개념은 Jupyter의 핵심 개념이며, 이를 통해서 좀 더 자유롭게 Notebook 생활이 가능해질 것이다 &amp;gt;_&amp;lt;&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>[RORLab 발표] 주피터(Jupyter) - IRuby Notebook 보충</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-04-15-rorlab-jupyter-iruby-notebook/"/>
    <id>http://blog.nacyot.com/articles/2015-04-15-rorlab-jupyter-iruby-notebook/</id>
    <published>2015-04-15T01:30:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/KsQGjGT.jpg' /&gt;&lt;p&gt;IPython은 Python REPL의 확장 구현이다. 0.12 버전부터 Notebook이라는 이름으로 웹 인터페이스를 지원하고 있다. 또한 파이썬 뿐만 아니라 다른 언어를 실행할 수 있는 다양한 커스텀 커널을 지원하고 있다. IRuby는 IPython의 루비(Ruby) 커널 구현체로 이를 사용해 IPython Notebook에서 Ruby 코드를 실행하고 문서를 작성하는 게 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/x794HK9.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;이 글은 2015년 4월 14일 RORLab에서 발표한 내용을 보충하기 위한 글로 IRuby 설치, 실행 및 발표 레퍼런스를 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='발표자료'&gt;발표자료&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://blog.nacyot.com/presentations/rorlab_jupyter"&gt;IRuby Notebook 원본 발표자료(reveal.js)&lt;/a&gt;&lt;/p&gt;

&lt;div style='max-width:550px'&gt;
&lt;script async class="speakerdeck-embed" data-id="ee397ca6231f4a7a9c2c73eda6e81525" data-ratio="1.29456384323641" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://speakerdeck.com/nacyot/jupyter-iruby-notebook"&gt;https://speakerdeck.com/nacyot/jupyter-iruby-notebook&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name='iruby-설치하기'&gt;IRuby 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;(어제 올렸던 처음으로 소개했던 설치법에는 몇 가지 문제가 있습니다. 유상민 님 지적으로 jsonschema 설치 및 SciRuby/iruby 설치 부분을 보충합니다. 유상민 님께 감사드립니다)&lt;/p&gt;

&lt;h3&gt;&lt;a name='zeromq-설치하기'&gt;ZeroMQ 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;ZeroMQ를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Mac OSX&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;zeromq&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libzmq3&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='python-환경-구축-및-ipython-설치'&gt;python 환경 구축 및 ipython 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;pyenv를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Mac OSX&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pyenv&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/yyuu/pyenv.git ~/.pyenv&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pyenv를 셸에 설정해준다. zsh을 사용한다면 &lt;code&gt;.bash_profile&lt;/code&gt;을 &lt;code&gt;.zshrc&lt;/code&gt;로 바꿔준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬 3.4.3을 설치하고, 사용하도록 설정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv install 3.4.3
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv global 3.4.3
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;관련 라이브러리와 IPython을 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install jinja2 tornado pyzmq jsonschema
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install ipython
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jupyter(IPython3)부터는 jsonschema 라이브러리도 추가로 필요하다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='iruby-설치'&gt;IRuby 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;IRuby 최신 버전은 gem으로 설치할 수 있다. 여기서는 루비 환경은 구축되어있다고 가정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gem install specific_install
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gem specific_install -l https://github.com/SciRuby/iruby -b master
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c"&gt;# rbenv 사용자만&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rbenv rehash
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code&gt;specific_install&lt;/code&gt;을 사용할 필요가 있는데, 이는 현재 최신 &lt;code&gt;iruby&lt;/code&gt;가 &lt;code&gt;SciRuby&lt;/code&gt; 쪽으로 포크되어서 관리되고 있기 때문이다. 그냥 &lt;code&gt;gem install iruby&lt;/code&gt;하게 되면 minad/iruby가 설치되는데 이는 jupyter와 호환성이 없다. (좀 더 자세한 내용은 &lt;a href="https://www.facebook.com/groups/rubyonrailskorea/permalink/830114680390964/"&gt;RORLab&lt;/a&gt;에서 유상민 님이 좀 더 자세히 이야기해주셨습니다. &lt;code&gt;specific_install&lt;/code&gt;로 설치 시 몇 가지 경고가 출력되는데 설치하는 법도 다룹니다.)&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;code&gt;iruby&lt;/code&gt; 명령어가 설치되었는지 확인해본다. &lt;code&gt;iruby&lt;/code&gt; 명령어는 IPython3 이전에는 루비 커널로 IPython을 실행하는 래퍼였으며, 현재는 고유한 명령어들을 가지고 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;iruby --version
&lt;/span&gt;&lt;span id="line-2"&gt;0.1.13
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IPython3부터는 &lt;code&gt;~/.ipython/kernels&lt;/code&gt;에 등록된 커널 설정들을 사용한다. iruby가 정상적으로 설치되었다면 루비 커널을 등록한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# iruby 커널 등록&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;iruby&lt;/span&gt; &lt;span class="k"&gt;register&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래 명령어로 루비 커널이 추가되었는지 확인할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython kernelspec list
&lt;/span&gt;&lt;span id="line-2"&gt;  python2
&lt;/span&gt;&lt;span id="line-3"&gt;  bash
&lt;/span&gt;&lt;span id="line-4"&gt;  julia 0.3
&lt;/span&gt;&lt;span id="line-5"&gt;  ruby
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ruby가 있다면 정상적으로 커널이 등록된 것이다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='iruby-실행하기'&gt;IRuby 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;최신 버전(&amp;gt;=3)에서는 &lt;code&gt;iruby&lt;/code&gt;를 사용하지 않고 &lt;code&gt;ipython&lt;/code&gt;으로 실행해도 정상적으로 ruby 커널을 사용할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook --ip&lt;span class="o"&gt;=&lt;/span&gt;0.0.0.0 --notebook-dir &amp;lt;NOTEBOOKS_DIR&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 서버가 실행되면 &lt;code&gt;http://0.0.0.0:8888&lt;/code&gt;에 접속해본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/uhedvNL.png" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name='레퍼런스'&gt;레퍼런스&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;a name='iruby'&gt;IRuby&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SciRuby/iruby"&gt;SciRuby/iruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Handybook/irails/"&gt;Handybook/irails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='ipython/jupyter'&gt;IPython/Jupyter&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jupyter.org/"&gt;Project Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/fperez/1579699"&gt;IPython 0.0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.fperez.org/2012/01/ipython-notebook-historical.html"&gt;Fernando Perez - The IPython notebook: a historical retrospective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipython.org/ipython-doc/rel-0.11/whatsnew/version0.11.html"&gt;IPython 0.11 Release Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipython.org/ipython-doc/rel-0.12/whatsnew/version0.12.html"&gt;IPython 0.12 Release Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ipython.org/ipython-doc/dev/development/messaging.html"&gt;Ipython documentation - Messaging in IPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages"&gt;IPython wiki - IPython kernels for other languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www4.ncsu.edu/%7Ekimler/hi322/galmoons.html"&gt;Galileo&amp;#39;s Sidereus nuncius - Starry Messenger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/Python/comments/1q9tq7/what_is_the_big_deal_about_ipython_notebooks/"&gt;Reddit - What is the big deal about IPython Notebooks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/payne92/notebooks/blob/master/00%20Javascript%20In%20Notebooks.ipynb"&gt;Javascript Magic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://andrew.gibiansky.com/blog/ipython/ipython-kernels/"&gt;Andrew Gibiansky - Creating Language Kernels for IPython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='ipython-kernel-for-other-languages'&gt;IPython Kernel for other languages&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gibiansky/IHaskell"&gt;gibiansky/IHaskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/bash_kernel"&gt;takluyver/bash_kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaLang/IJulia.jl"&gt;JuliaLang/IJulia.jl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jeroenjanssens.com/2015/02/19/ibash-notebook.html"&gt;Jeroen Janssens - IBash Notebook‽&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='ipython-client'&gt;IPython Client&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ivanov/bipython"&gt;ivanov/bipython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/millejoh/emacs-ipython-notebook"&gt;millejoh/emacs-ipython-notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ivanov/vim-ipython"&gt;ivanov/vim-ipython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/pycharm/help/ipython-notebook-support.html"&gt;PyCharm - IPython Notebook Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='examples'&gt;Examples&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/c0190709f56024eb516e"&gt;D3 Notebook 예제(시각화 스터디)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/melund/ipython/blob/3.x/examples/Interactive%20Widgets/Index.ipynb"&gt;Interactive Widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/jupyter-inline-attachment-sample"&gt;InlineAttachment 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/euler-project"&gt;naycot/euler_project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nacyot.com/articles/2014-04-07-rspec-matchers/"&gt;루비(Ruby) 테스트 프레임워크 RSpec 2.14 매쳐&lt;/a&gt; &lt;a href="https://github.com/nacyot/blog.nacyot.com-source/blob/master/source/iruby/ruby_enumerable.ipynb"&gt;ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nacyot.com/articles/2014-04-19-ruby-enumerable"&gt;루비의 꽃, 열거자 Enumerable 모듈&lt;/a&gt; &lt;a href="https://github.com/nacyot/blog.nacyot.com-source/blob/master/source/iruby/rspec_matchers.ipynb"&gt;ipynb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style='border:1px solid gray;max-width:500px;padding:1.8em'&gt;
&lt;img src='http://i.imgur.com/ir6nP73.png' /&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;a name='active-essays-/-literate-programming'&gt;Active Essays / Literate Programming&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://web.archive.org/web/20060710213801/http://www.squeakland.org/whatis/a_essays.html"&gt;Active Essays - Alan Kay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vpri.org/pdf/tr2009002_active_essays.pdf"&gt;Active Essays on the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://acko.net/files/fullfrontal/fullfrontal/webglmath/online.html"&gt;Steven Wittens - Making WebGL Dance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://setosa.io/blog/2014/07/26/markov-chains/"&gt;Setosa blog - markov Chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome"&gt;Jiongster - Removing User Interface Complexity, or Why React is Awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://greensock.com/position-parameter"&gt;Greensock - Timeline Tip: Understanding the Position Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.literateprogramming.com/knuthweb.pdf"&gt;Donald E. Knuth - Literate Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www-cs-faculty.stanford.edu/%7Euno/programs.html"&gt;Knuth - Programs to Read&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://faq.ktug.org/faq/CWEB"&gt;구조적 문서화를 위한 CWEB 시스템(한국어 번역)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://faq.ktug.org/faq/LiterateProgramming"&gt;KTUGFaq - Literate Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/CWEB"&gt;Wikipedia - CWEB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Literate_programming"&gt;Wikipedia - Literate Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://freesearch.pe.kr/archives/3265"&gt;from &lt;strong&gt;future&lt;/strong&gt; import dream - knitr를 이용한 워드프래스 포스팅하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CuhsPl7JDvc"&gt;전희원 - R Markdown을 이용한 문학적 프로그래밍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/fperez/blog/blob/master/130418-Data-driven%20journalism.ipynb"&gt;Fernando Perez - &amp;quot;Literate computing&amp;quot; and computational reproducibility: IPython in the age of data-driven journalism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/docker_module.html"&gt;Ansible Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='blogging-by-ipython'&gt;Blogging by Ipython&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.fperez.org/2012/09/blogging-with-ipython-notebook.html"&gt;Fernando Perez - Blogging with the IPython notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/"&gt;Pythonic Perambulations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.boxnwhis.kr/2015/02/10/blogging_with_python.html"&gt;Box and Whisker - IPython Notebook으로 블로깅하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='etc'&gt;ETC&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/69448223"&gt;Eyeo 2013 - For example by Mike Bostock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chimera.labs.oreilly.com/books/1230000000345/"&gt;O&amp;#39;Reilly Atlas + jsbin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codemirror.net/"&gt;Codemirror - a versatile text editor implemented in JavaScript for the browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;Bokeh - Python interactive visualization library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>D3.js 기초 - select API와 enter() 이해하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-02-02-d3-selection/"/>
    <id>http://blog.nacyot.com/articles/2015-02-02-d3-selection/</id>
    <published>2015-02-04T06:02:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/YZXcVjR.jpg' /&gt;&lt;p&gt;&lt;a href="http://d3js.org/"&gt;D3JS&lt;/a&gt;에서는 조작하고자 하는 요소를 선택할 수 있는 select API를 제공한다. select API는 jquery의 select API와도 비슷하지만, D3에서는 selection 객체에 대해서 &lt;code&gt;data()&lt;/code&gt;를 통해 특정 데이터를 바인드하고, &lt;code&gt;enter()&lt;/code&gt;와 &lt;code&gt;exit()&lt;/code&gt;를 통해 데이터에 대응하는 객체를 다룰 수 있는 기능들을 제공한다. 이 글에서는 D3에서 이 select API를 통해서 어떻게 시각화를 &lt;strong&gt;시작&lt;/strong&gt;하는 지에 대해서 다룬다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='d3-기초-예제-:-데이터-바인드하고-요소-추가하기'&gt;D3 기초 예제 : 데이터 바인드하고 요소 추가하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 간단한 예제를 하나 살펴보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                 &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New paragraph!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 예제는 Interactive Data Visualization for the Web 5장에서 가져온 예제이다. 이 예제를 말로 풀어써보자면 &lt;code&gt;body&lt;/code&gt; 요소를 선택하고(1) 그 아래에서 &lt;code&gt;p&lt;/code&gt;요소를 전부 선택한다(2). 그리고 &lt;code&gt;dataset&lt;/code&gt;을 이 미리 선택한 selection 객체에 바인드한다(3). 그리고 &lt;code&gt;enter()&lt;/code&gt;를 통해서 &lt;code&gt;p&lt;/code&gt; 요소에 바인드가 되지 않는, 즉 대응하는 &lt;code&gt;p&lt;/code&gt; 요소가 없는 데이터에 대해 새로운 selection을 반환받는다(4). 다음으로 이렇게 선택된 요소들에 대해 실제로 &lt;code&gt;p&lt;/code&gt; 태그로 이루어진 문서 요소를 생성한다(5). 마지막이다. 이 새로운 &lt;code&gt;p&lt;/code&gt; 요소에 &amp;quot;New paragraph!&amp;quot;라는 내용을 쓴다(6).&lt;/p&gt;

&lt;p&gt;먼저 HTML 상에 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 요소가 하나도 없는 상태에서 이 코드를 실행했다면, 결과는 다음과 같을 것이다. (편의상 텍스트로 나타낸다.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 html 요소를 선택하는 (1)과, (1)에서 선택된 요소 아래에서 다시 요소를 선택하는 (2)에서 하는 일은 jquery와도 매우 비슷하고, 이해하기도 쉽다. 하지만 그 다음에 일어나는 일들은 D3에서 사용하는 고유의 데이터 처리 과정을 담고 있다. 이후의 과정에 대해서도 해설을 붙여보았지만, 예상컨데 D3를 따로 배워본 적이 없다면 이러한 접근은 다소 생소하게 느껴질 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='(1)~(2)-d3-select-api-:-시각화할-요소-선택하기'&gt;(1)~(2) D3 select API : 시각화할 요소 선택하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다시 하나하나의 과정을 좀 더 자세히 살펴보자.&lt;/p&gt;

&lt;p&gt;유심히 살펴 보면 (1), (2)에서 하는 일이, 사실은 jquery를 통해 하는 작업과 사실은 별로 비슷하지 않다. jquery를 사용할 때는 일반적으로 이미 어떤 요소가 있다는 것을 가정하고, 그 요소를 선택하기 위해서 select API를 사용한다. 그런데 앞서 위의 출력결과를 얻기 위해서는 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; &lt;strong&gt;&lt;em&gt;요소가 하나도 없는 상태에서 이 코드를 실행했다면&lt;/em&gt;&lt;/strong&gt;이라는 전제를 붙였다. 즉, 의도적으로 &lt;strong&gt;아무것도 선택하지 않았다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;D3에서는 일반적으로 메서드 체이닝 기법을 사용하는데, 이를 기반으로 생각해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 위 코드를 실행한 결과는 무엇을 반환할까? 개발자 도구를 통해서 이를 실행해보면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/qaSyGYM.png" alt="selectAll 반환 결과"&gt;&lt;/p&gt;

&lt;p&gt;여기서 알 수 있다시피 실제 반환값은 배열 비슷한 무언가가 넘어온다(단, 여기서 배열 안의 선택 결과 배열은 비어있다). 이는 엄밀히 말하면 배열이 아니라, d3에서 확장된 d3 selection 객체이다. 이에 대한 좀 더 자세한 내용은 &lt;a href="https://github.com/mbostock/d3/blob/master/src/selection/selection.js"&gt;d3js 소스코드&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;d3_select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d3_document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3_documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d3_selection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 54-58행에서는 여기서 &lt;code&gt;d3_select()&lt;/code&gt; 함수는 실제로는 sizzle 라이브러리를 통해서 요소를 찾고 이를 &lt;code&gt;d3_selection()&lt;/code&gt;으로 랩핑한 결과를 반환한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;d3_selection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nx"&gt;d3_subclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d3_selectionPrototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;d3_selection&lt;/code&gt;은 &lt;code&gt;d3_subclass&lt;/code&gt; 함수를 통해 객체를 확장한다. 대부분의 기능은 &lt;code&gt;/src/selection&lt;/code&gt; 아래의 코드를 import해서 구현된다.&lt;/p&gt;

&lt;p&gt;이를 통해서 select 혹은 selectAll을 통해서 반환되는 결과가 d3 selection 객체라는 것을 확인할 수 있었다. 단, 앞서 지적했듯이, 이 결과물 배열은 그 내용이 비어있다. (1)~(2)에서 하는 작업을 좀 더 쉽게 설명하자면, d3 라이브러리를 사용하기 위해 빈 d3 selection 객체를 만드는 과정이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;이에 대해서 API 문서를 확인해보자. 먼저, selectAll을 보면,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;d3.selectAll(selector)&lt;/p&gt;

&lt;p&gt;Selects all elements that match the specified selector. The elements will be selected in document traversal order (top-to-bottom). If no elements in the current document match the specified selector, returns the empty selection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;selector에 매치되는 요소가 없다면 빈 selection을 반환한다고 나와있다.&lt;/p&gt;

&lt;p&gt;그리고 select를 살펴보면,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;d3.select(selector)&lt;/p&gt;

&lt;p&gt;Selects the first element that matches the specified selector string, returning a single-element selection. If no elements in the current document match the specified selector, returns the empty selection. If multiple elements match the selector, only the first matching element (in document traversal order) will be selected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;마찬가지로 매치되지 않으면 빈 selection을 반환한다고 한다. 여기서 하나 중요한 사실을 알 수 있다. 지금 살펴보고 있는 전체 예제를 다시 확인해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                 &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New paragraph!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 (1)~(2)의 과정에서 반드시 &lt;code&gt;selectAll(&amp;quot;p&amp;quot;)&lt;/code&gt;를 사용할 필요는 없다. 여기까지 과정에서 실제로 선택되는 문서 요소는 존재하지 않기 때문에 사실은 빈 d3 selection 을 반환하며 어떤 표현이라도 이를 대체할 수 있다. 따라서, 아래 네 표현은 모두 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞선 예제의 (1)~(2)를 어떤 표현으로 바꾸더라도, 그 결과는 같을 것이다(좀 더 엄밀히 말하면 그 결과만 같은 것이다. 이들인 빈 selection이라는 것은 동일하지만 다른 부모 요소를 가진다). 중요한 것은 여기서 무엇을 선택했느냐가 아니라 빈 d3 selection 객체를 시작으로 다음 작업들이 이루어진다는 점이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='(3)~(4)-data()와-enter()-:-화면에-없는-데이터를-보여줄-준비하기'&gt;(3)~(4) data()와 enter() : 화면에 없는 데이터를 보여줄 준비하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(3)~(4)는 D3 고유의 과정이자 핵심적인 부분이라고 할 수 있다. (3)에서 d3 selection에 대해서 &lt;code&gt;data()&lt;/code&gt; 메서드를 통해 데이터를 빈 선택물에 연결지을 수 있다. 여기까지는 (화면 상에) 아무런 변화도 일어나지 않는다. &lt;code&gt;data()&lt;/code&gt;의 반환 결과에는 &lt;code&gt;enter()&lt;/code&gt;, &lt;code&gt;exit()&lt;/code&gt;라는 D3에서 사용하는 고유한 개념이자 메서드가 더해진다. &lt;code&gt;enter()&lt;/code&gt; 메서드는 d3 selection에 바인드된 데이터들 중에 아직 실제 문서 요소를 가지지 못 하는 것들을 찾아내서 가상의 객체로 만들어 반환해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/3nOL6Lv.png" alt="enter() 반환결과"&gt;&lt;/p&gt;

&lt;p&gt;여기서 알 수 있다시피, 이 객체들에는 각각의 데이터 요소들이 연결되어있다. (5)에서는 &lt;code&gt;append()&lt;/code&gt;를 통해서 &lt;code&gt;enter()&lt;/code&gt;로 생성된 가상 요소들을 빈 d3 selection 요소의 부모 요소를 기준으로 해서(여기서는 (1)에서 선택한 &lt;code&gt;body&lt;/code&gt;가 되거나 지정하지 않았다면 html이 될 것이다) 실제 문서 요소로 생성한다. 여기서는 &amp;quot;p&amp;quot; 문서 요소로 생성이 되지만, p 요소는 기본적으로 보이는 내용이 없으므로 (6)에서 &lt;code&gt;text()&lt;/code&gt; 메서드를 통해서 각 요소마다 &amp;quot;New paragraph!&amp;quot;를 보여주도록 한다.&lt;/p&gt;

&lt;p&gt;여기까지가 D3 : 장대한 시각화의 서막이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='보충---select와-enter의-차이'&gt;보충 - select와 enter의 차이&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;한 가지 재미있는 사실을 짚고 넘어가자. 이번에는 HTML에 이러한 위 예제의 자바스크립트 코드를 실행하기 전에 세 개의 &amp;quot;p&amp;quot; 요소가 있다고 가정하자. body 아래의 HTML 코드는 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 상태에서 원래의 예제 코드를 실행시키면,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                 &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New paragraph!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 결과는 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;분명히 데이터의 요소는 5개인데, 문단은 2개밖에 출력되지 않았다. 이 결과가 의아하다면 &lt;code&gt;enter()&lt;/code&gt;를 이해하지 못 했기 때문이다. 먼저 &amp;quot;p&amp;quot; 요소가 하나도 없을 때 &lt;code&gt;enter()&lt;/code&gt;의 결과를 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/4zVidIA.png" alt="p 요소가 없을 때 enter() 반환결과"&gt;&lt;/p&gt;

&lt;p&gt;그리고 &amp;quot;p&amp;quot; 요소가 3개가 있을 때 &lt;code&gt;enter()&lt;/code&gt; 메서드의 결과를 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/vXWaKzy.png" alt="p 요소가 이미 있을 때 enter() 반환결과"&gt;&lt;/p&gt;

&lt;p&gt;앞서 이야기했다시피 &lt;code&gt;enter()&lt;/code&gt;는 &lt;strong&gt;바인드된 데이터들 중에 아직 실제 문서 요소를 가지지 못 하는 것들을 찾아내서 가상의 객체로 만들어 반환해준다.&lt;/strong&gt; 따라서, 이미 &amp;quot;p&amp;quot; 요소가 있을 경우 &lt;code&gt;selectAll()&lt;/code&gt;의 결과는 더 이상 빈 d3 selection 객체가 아니라 이미 존재하는 p 요소 3개가 선택된 상태가 된다. 따라서 d3는 우선적으로 이 요소들에 데이터가 연결되어있다고 생각하고, 나머지 아직 연결된 문서 요소가 없는 데이터에 대해서만 가상의 객체를 생성한다. 결과적으로, 미리 존재하는 요소들은 무시된다.&lt;/p&gt;

&lt;p&gt;그렇다면 이미 존재하는 요소에 대해서 &lt;code&gt;enter()&lt;/code&gt; 메서드를 사용하면 이를 조작할 수 없다는 의미가 된다. 이 때는 &lt;code&gt;selectAll()&lt;/code&gt; 이후, 혹은 &lt;code&gt;data()&lt;/code&gt; 메서드로 데이터 바인드 이후 반환되는 결과를 바로 조작하면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, 이 상태에서 데이터를 통해 문서 요소를 조작하기 위해서는 다음과 같이 할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 아래와 같은 결과를 얻을 수 있을 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;여러 d3 예제들을 살펴보게 되면 존재하지 않는 요소를 선택하고 데이터를 바인드하는 경우가 많다. 이런 예제를 보면 selectAll과 append에서 왜 굳이 같은 요소를 사용하는 지 의문이 들것이다. 이 글에서는 여기서 무슨 일이 벌어지고 있는 건지, 무엇을 선택해야하는 하는 건지에 대해서 다뤘다. 실제로 여기서하는 작업은 빈 d3 selection 객체를 선택하는 일이고, 여기에 데이터를 바인드하고 바인드된 데이터에 대한 시각적 요소를 생성한다. 이것이 빈 HTML에서 javascript만으로 시각화를 시작하는 기본적인 방법이다. 이를 이해하고 나면 좀 더 수월하게 시각화를 &lt;strong&gt;시작&lt;/strong&gt;할 수 있을 것이다.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>루비와 파이썬에서 함수 호출과 함수 참조에 대한 차이</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-12-17-diffrence-of-ruby-and-python/"/>
    <id>http://blog.nacyot.com/articles/2014-12-17-diffrence-of-ruby-and-python/</id>
    <published>2014-12-16T16:35:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/byNJqrU.jpg' /&gt;&lt;p&gt;루비에서는 메서드를 괄호 없이 호출할 수 있습니다. 반면에 파이썬에서는 함수를 괄호 없이 사용하면, 함수 호출이 아니라 해당하는 이름을 가진 함수를 참조하게 됩니다. 이는 루비와 파이썬에서 변수와 함수가 존재하는 공간의 차이에서 비롯되는 차이로, 이 글에서는 루비와 파이썬의 함수(메서드) 호출과 함수 참조에 대한 문법 차이를 다룹니다. &lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='발단'&gt;발단&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none" lang="ko"&gt;&lt;p&gt;파이썬 프로그래머는 이 코드를 보면 a가 출력될 거라고 예상하는 것 같다. 루비 프로그래머라면 당연히 ab고...&lt;/p&gt;&amp;mdash; nacyot (@nacyo_t) &lt;a href="https://twitter.com/nacyo_t/status/544497910436466689"&gt;2014년 12월 15일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;반응이 있어서(?) 조금 정리해봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 저 코드를 보시면 무엇이 출력될 것이라고 예상되시나요? 재미있게도 이 코드는 자신이 주로 사용하는 언어에 따라서 그 결과가 다르게 보일 수 있습니다.&lt;/p&gt;

&lt;p&gt;저는 루비를 주로 사용해왔고, 이 코드를 보면 그냥 당연히 ab가 출력될 것이라고 생각합니다. 더욱이 이 코드는 Ruby 코드이기 때문에 실제로 실행해봐도 ab가 출력됩니다. 이 코드를 이해하기 위한 핵심은 아래 코드에서&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a와 b가 실제로는 메서드 호출이라는 점입니다. 루비에서는 a, b와 같은 이름이 주어지면 먼저 현재 맥락에서 이러한 이름을 가진 변수를 찾고, 변수를 찾지 못 하면 이러한 이름을 가진 메서드를 찾아서 호출합니다. 즉, f가 호출되는 시점에, &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;b&lt;/code&gt;는 각각 메서드 호출로 평가되어 그 반환값으로 치환됩니다. 따라서 이 시점에 &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;b&lt;/code&gt;가 실행되고, ab가 출력됩니다. 그리고 루비에서는 &lt;code&gt;return&lt;/code&gt; 메서드를 명시적으로 사용하지 않을 경우 메서드 본문의 마지막 문장의 평가 결과가 반환된다는 규칙에 따라 &lt;code&gt;print &amp;#39;a&amp;#39;&lt;/code&gt;의 평가 결과인 &lt;code&gt;nil&lt;/code&gt;이 반환됩니다. 따라서 &lt;code&gt;a&lt;/code&gt; 메서드는 a를 출력하고, nil을 반환하고, b 역시 같은 원리로 동작합니다. 이에 따라 실제로 &lt;code&gt;f(a, b)&lt;/code&gt;는 &lt;code&gt;f(nil, nil)&lt;/code&gt;을 호출한 것과 같습니다. 그리고 f함수 안에서 &lt;code&gt;arg1&lt;/code&gt;은 nil이기 때문에 &lt;code&gt;f(a, b)&lt;/code&gt;는 결과적으로 nil을 반환합니다.&lt;/p&gt;

&lt;p&gt;Python 프로그래머에게 ab라는 출력 결과는 의아할 것입니다. 이 코드를 파이썬으로 치환해해보면 아래와 같습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 이 코드를 파이썬에서 실행하면 a가 출력됩니다. 이렇게 보면 앞선 루비 코드가 ab를 출력하는 일이 왜 의아한 일인지 알 수 있습니다. 이제 반대 입장에서 이는 루비 프로그래머 입장에서 보면 의아한 일입니다.&lt;/p&gt;

&lt;p&gt;어째서 이런 일이 일어난 걸까요. 파이썬에서는 &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;b&lt;/code&gt;가 함수 호출이 아닙니다. a라는 이름으로 함수를 정의하고 나면 &lt;code&gt;a&lt;/code&gt;를 통해서 함수 자체에 접근할 수 있습니다. 즉 &lt;code&gt;f(a, b)&lt;/code&gt;에서 &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;b&lt;/code&gt;는 루비와 달리 함수 호출이 아니라, 함수 참조 자체를 f 함수에 넘기는 일이 됩니다. 따라서 f함수 내에서 &lt;code&gt;arg1()&lt;/code&gt;은 실제로는 &lt;code&gt;a()&lt;/code&gt;과 같은 표현이고, 따라서 a만 출력됩니다.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none" lang="ko"&gt;&lt;p&gt;&lt;a href="https://twitter.com/nacyo_t"&gt;@nacyo_t&lt;/a&gt; 아무 일도 일어나지 않을 것 같은데요..?&lt;/p&gt;&amp;mdash; xymz (@extinctspecies_) &lt;a href="https://twitter.com/extinctspecies_/status/544805229816860672"&gt;2014년 12월 16일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;이런 의견도 있었는데, 루비 코드를 파이썬 코드로 (뇌 내에서) 포팅할 때 f 함수의 본문을 &lt;code&gt;arg1&lt;/code&gt;로 보느냐 &lt;code&gt;arg()&lt;/code&gt;로 보느냐의 차이에서 오는 것으로 보입니다. &lt;code&gt;arg1()&lt;/code&gt;로 해석하면 &lt;code&gt;a()&lt;/code&gt;와 같이 함수 호출이 되어 a를 출력하지만, &lt;code&gt;arg1&lt;/code&gt;로 보면 단순히 함수 자체를 평가하는 일이 되서 아무일도 일어나지 않습니다(파이썬에는 루비와 같은 마지막 식을 반환한다는 규칙도 없으므로 아무것도 반환되지도 않습니다).&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;루비와 파이썬은 생각보다 다르다, 는 걸로.&lt;/p&gt;

&lt;p&gt;이런 시각 차이는 두 가지 점에서 기인하는 듯 합니다. 하나는 단순한 문법 차이고, 하나는 언어 디자인 자체에 있습니다. 파이썬에서는 함수 정의와 다른 객체들에 대해 실질적인 차이 없이 접근할 수 있습니다만, 그런데 루비에서는 그렇지 않습니다. 루비에서 &lt;code&gt;self.method(:a)&lt;/code&gt;와 같이 메서드 객체를 참조하는 방법이 있긴합니다만, 다른 객체처럼 동등한 방법으로 접근할 방법은 없습니다. 오히려 그렇게 하면 메서드가 호출되어 버립니다. 심지어 &lt;code&gt;self.method(:a)&lt;/code&gt;와 같이 참조한 메서드를 호출하는 방법도 그냥 호출하면 안되고 &lt;code&gt;.call&lt;/code&gt; 메서드를 통해서 호출해야합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/ahastudio/posts/10152981560200929"&gt;아샬 님의 글&lt;/a&gt;도 참조해주세요.&lt;/p&gt;

&lt;h2&gt;&lt;a name='이-코드에-대해-나눈-대화-전문'&gt;이 코드에 대해 나눈 대화 전문&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 와 루비 이상해요&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 네???&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 이거 결과가&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : ㅋ&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아니&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 이렇게 되면 당연히&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 상식적으로(?)&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : a만 출력되야 하는거 아닌가요?&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 왜 그렇게 생각하시는 거죠?&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 궁금하네요. 왜 그렇게 생각하신 건지&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : ㅋㅋ&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬을 써서&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬에서는 a, b 가 그냥 함수인 변수인데 루비는 아닌가보죠?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 왠지 도발한 느낌인데 ㅋㅋ&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 함수인 변수라는 게 무슨 말인지 모르겠네요;;;&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 도발이라는 건 아니고...&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬은 저렇게 하면&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : a가 결과잖아요&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 루비 &lt;strike&gt;게이&lt;/strike&gt;로서 이해가 안 되요.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 근데 루비는 ab가 나와서&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그런가요?&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 파이썬에선 왜 a가 나오죠?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 왜냐하면&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 안에서&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : arg1만 호출하니까&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : f라는 함수 안에서는&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : args1로 a가 넘어가는 거예요?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 네&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : &amp;quot;a&amp;quot;&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 음. 파이썬도&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : a라는 함수인 변수가&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 넘어가니&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 아하.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : arg1가&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : a라는 함수가 넘어가니.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : a가 되는거죠&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 네&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : a는&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : a()&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : a = a()&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 파이썬 얘기 듣게요.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 근데&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그렇게 되면 arg1은 뭐죠? 함수 안에서.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 이건 그냥 함수잖아요.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 그냥 함수죠&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 네&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 함수 호출도 아니고.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬은 그냥 함수&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬은 물론&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그럼 왜 a가 찍히죠?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : ()가 있어야 ..&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 아.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : ㅇㅋ 이해했습니다.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 루비는 ()가 없어도 호출 되길래&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : 음&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 원래 루비는 그렇게 호출하나보다 라고 생각을 ..&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 루비 해설해 드릴게요.&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : 루비는 함수를 넘기려면 어떻게 하지&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 루비는 함수를 못 넘깁니다.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 리터럴로는&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아 ..&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 파이썬은 자바스크립트랑 비슷해요.&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : 아 뭔가 꼼수같은 방법 없나요?&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 저 소스 다시 써주세요.ㅜ&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : 애초에 그렇게 안해서 그런가 ㅋ&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 를 이해할 필요가 있는데.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : a를 호출하면 a가 찍히겠죠?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 넵&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그러니까 f(a, b)에서&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 실제는 f(a(), b())이 되서,&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : a,b는 미리 출력됩니다.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 헐&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 그런거구나&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그럼 어떻게 f()가 호출되는 거냐면.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : a -&amp;gt; a() 요것만 생각하면 이해가 쉬우실듯 ㅋㅋ&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 이 메서드의&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 반환값이&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : nil이에요.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그러니까  실제로는 f(a,b)라고 생각하셨지만, 이 시점에서 함수 호출과 반환값으로 치환이 이루어지는 거죠.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 따라서 ab가 출력되고&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 헐 ..&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 실제 인자는 반환값이군요&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : f(nil, nil)을 호출하는 겁니다.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아 ..&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 이해가 한 방에 됐네요 감사합니다. ㅜ&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : f 내부에서 args1이 nil이 되니까.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 저 함수는 ab를 출력하고 반환값이 nil이 되는 거죠&lt;br/&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>도커(Docker)로 루비 온 레일스 어플리케이션 배포하기 (1) 어플리케이션 이미지 만들기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-08-08-rails-on-docker/"/>
    <id>http://blog.nacyot.com/articles/2014-08-08-rails-on-docker/</id>
    <published>2014-08-07T20:10:00+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/8GK2rbA.jpg' /&gt;&lt;p&gt;이 글은 지난 6월 10일 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/rorlab' rel='nofollow'&gt;RORLab&lt;/a&gt;&lt;/span&gt;에서 발표한 &amp;#39;도커(Docker)로 루비 온 레일스 어플리케이션 배포하기&amp;#39;를 정리한 문서입니다. 발표 자료는 &lt;a href="https://www.facebook.com/naverd2/posts/505653179563380"&gt;페이스북 페이지&lt;/a&gt;를 참조해주세요. 먼저 이미지와 컨테이너 소개 및 이미지 생성에 대해서 다룬 앞 부분은 이전에 작성했던 문서 &amp;#39;&lt;a href="http://blog.nacyot.com/articles/2014-01-27-easy-deploy-with-docker/"&gt;도커(Docker) 튜토리얼 : 깐 김에 배포까지&lt;/a&gt;&amp;#39;로 대체합니다.&lt;/p&gt;

&lt;p&gt;이 글은 두 편으로 나눠서 공개할 예정입니다. 먼저 이 글에서는 Docker를 사용해 Ruby on Rails 어플리케이션을 도커 이미지화하는 법에 대해서 다룹니다. 그리고 다음 글에서는 이미지화한 어플리케이션을 실제로 어떻게 배포하는 지와 간단한 스케일 아웃 예제를 소개합니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='도커로-어플리케이션-배포하기'&gt;도커로 어플리케이션 배포하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker'&gt;도커&lt;/a&gt;&lt;/span&gt;는 다양한 용도로 사용 가능하지만, 가장 원초적인 목적은 어플리케이션 배포에 있다. 또한 이미지를 기반으로 한 도커의 방식에 따라 도커를 통해 어플리케이션을 배포한다는 의미는 개발한 어플리케이션과 어플리케이션을 둘러싼 어플리케이션이 실행가능한 환경 전체를 이미지화한다는 의미를 가지고 있다.&lt;/p&gt;

&lt;p&gt;이 과정에서 기존의 서버를 운영하는 것과 마찬가지로 기본적으로는 일련의 명령어를 실행시키거나 쉘스크립트를 실행시킨다. 이러한 일련의 과정을 도커에서는 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/dockerfile'&gt;Dockerfile&lt;/a&gt;&lt;/span&gt; 이라는 독자적인 포맷(DSL)을 통해서 기술하고, 이 Dockerfile을 빌드해서 이미지를 생성한다.&lt;/p&gt;

&lt;p&gt;아쉽지만 같은 Dockerfile 이라도 빌드가 항상 성공한다는 보장은 물론 없다. 즉, Dockefile을 통해 이미지 생성 과정을 재현할 수 있지만, 이 과정이 완벽하다고는 할 수 없다. 예를 들어 네트워크가 불안정해서 관련된 빌드 과정에 문제가 생길 수도 있고, 시스템 라이브러리에 중요한 보안 패치가 있어서 어플리케이션 실행에 영향을 줄 수도 있다. 재현은 불완전하다. 하지만 일반적으로 빌드에 성공한 이미지는 그 시점이 언제인지가 큰 상관만 없다면 완결된 이미지로서 정상적으로 완결되어있다고 봐도 무방하다.&lt;/p&gt;

&lt;p&gt;이렇게 빌드된 이미지는 어플리케이션 + 실행환경은 하나의 세트로 포함하고 있으며, 따라서 도커 서버가 설치된 곳이라면 어디에서든지 &amp;#39;당장&amp;#39;에 &amp;#39;정상적으로&amp;#39; 실행가능하다. 다시 한 번 이야기하지만, 도커를 통해서 어플리케이션을 배포한다는 의미는 어플리케이션을 포함하는 이미지를 생성하고 관리한다는 의미이다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='레일스-어플리케이션'&gt;레일스 어플리케이션&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서 배포하는 어플리케이션은 &lt;code&gt;rails new&lt;/code&gt;로 생성되는 사실은 속에 아무것도 없는 어플리케이션이다. 물론 훨씬 더 개발이 진행된 어플리케이션에서는 고려해야할 사항이 훨씬 더 많이 있겠지만, 그런 문제들은 도커를 통한 배포의 문제라기보다는 서버 구성이나 레일스 내부적으로 결정해야할 문제라고 할 수 있다. 도커를 통해서 이미지를 만드는 과정 자체는 근본적으로 다르지 않을 것이다. 단지 좀 더 많은 설정이 필요하고, 좀 더 많고, 정교한 의존성 관리가 필요한 것 뿐이다.&lt;/p&gt;

&lt;p&gt;어쨌거나 한 번 더 강조하지만, 어떤 어플리케이션을 배포하건 도커를 통한 배포의 목표는 이 어플리케이션이 실행 가능한 이미지를 만드는 일이다. 이 글에서 사용한 레일스 샘플 어플리케이션의 저장소는 아래에서 찾을 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/docker-sample-project"&gt;nacyot/docker-sample-project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 글에서 사용하는 dockerfile들은 아래 저장소에서 찾을 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/rails-new-dockerfile"&gt;nacyot/rails-new-dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='이미지-생성-준비-작업'&gt;이미지 생성 준비 작업&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 작업을 진행하기 위해 위에서 언급한 저장소를 작업 디렉토리에 clone한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 샘플 레일스 프로젝트 클론&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# 도커파일 클론&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 클론되었는지 확인한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ll
&lt;/span&gt;&lt;span id="line-2"&gt;drwxrwxr-x 13 nacyot nacyot 4096 Jun 10 20:50 docker-sample-project
&lt;/span&gt;&lt;span id="line-3"&gt;drwxrwxr-x 10 nacyot nacyot 4096 Jun 11 21:08 rails-new-dockerfile
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='v0.0'&gt;v0.0&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker-sample-project&lt;/code&gt;는 &lt;code&gt;rails new&lt;/code&gt; 명령어로 생성되었다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/ruby_on_rails'&gt;레일스&lt;/a&gt;&lt;/span&gt;를 사용해본 사람이라면 바로 이해하겠지만 &lt;code&gt;rails new&lt;/code&gt; 명령어는 레일스 프로젝트의 뼈대를 만들어준다. 프로그래머는 이 뼈대에 자신이 필요한 것들을 붙여나가면서 어플리케이션을 만들어나간다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v0.0&lt;/code&gt;은 아직 아무것도 수정하지 않은 상태이다. 실제 이미지 생성은 &lt;code&gt;v0.1&lt;/code&gt;부터 진행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;docker-sample-project
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout v0.0
&lt;/span&gt;&lt;span id="line-3"&gt;HEAD is now at c3754e3... Initialize project
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
&lt;/span&gt;&lt;span id="line-5"&gt;app  ca      config.ru  docker   Gemfile.lock  log     Rakefile     &lt;span class="nb"&gt;test  &lt;/span&gt;vendor
&lt;/span&gt;&lt;span id="line-6"&gt;bin  config  db         Gemfile  lib           public  README.rdoc  tmp
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;익숙한 레일스 프로젝트를 볼 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='v0.1-procfile-&amp;amp;-serve-static-assets-옵션'&gt;v0.1 Procfile &amp;amp; serve static assets 옵션&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 처음으로 배포할 태그 &lt;code&gt;v0.1&lt;/code&gt;은 &lt;code&gt;rails new&lt;/code&gt;로 프로젝트를 생성한 이후 약간의 수정을 거쳤다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout v0.1
&lt;/span&gt;&lt;span id="line-2"&gt;HEAD is now at 4b3c006... Set serve_static_assets &lt;span class="nb"&gt;true &lt;/span&gt;in production
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;v0.0&lt;/code&gt;은 레일스 프로젝트가 초기화된 시점이다. diff 명령어를 통해 &lt;code&gt;v0.1&lt;/code&gt;과 비교해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git diff v0.0
&lt;/span&gt;&lt;span id="line-2"&gt;diff --git a/Procfile b/Procfile
&lt;/span&gt;&lt;span id="line-3"&gt;+web: bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails server -p 60005
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;diff --git a/config/environments/production.rb b/config/environments/production.rb
&lt;/span&gt;&lt;span id="line-6"&gt;-  config.serve_static_assets &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;+  config.serve_static_assets &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;diff를 통해 &lt;code&gt;v0.1&lt;/code&gt;에서는 두 개의 파일이 변경된 것을 확인할 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='procfile'&gt;Procfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat Procfile
&lt;/span&gt;&lt;span id="line-2"&gt;web: bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails server -p 60005
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/procfile' rel='nofollow'&gt;Procfile&lt;/a&gt;&lt;/span&gt;은 어플리케이션의 실행단위를 정의한다. 예를 들어 하나의 어플리케이션은 여러개의 프로세스로 구성될 수 있다. 가장 기본적인 프로세스는 단연 웹 서버일 것이다. 부가적으로 백그라운드 작업을 하는 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/sidekiq'&gt;sidekiq&lt;/a&gt;&lt;/span&gt;이 있을 수도 있고, 중간 cache_db가 있을 수도 있다. 일반적인 서버 운영시에는 필요한 프로세스를 각각 실행시킨다. 하지만 이러한 프로세스들은 하나로 모아야만 하나의 어플리케이션이 정상적으로 실행될 수 있다면, 그것들을 한꺼번에 실행시키는 것이 더 합리적일 것이다. Procfile에는 바로 이러한 어플리케이션 실행 단위를 정의한다. 여기서는 아직 레일스 기본 웹서버밖에 없으므로 특별한 내용은 없다.&lt;/p&gt;

&lt;p&gt;참고로 포트를 60005번으로 지정한 것은 3000번 포트를 자주 사용하므로 편의상 이동시킨 것뿐이고, 특별한 의미는 없다.&lt;/p&gt;

&lt;p&gt;이 Procfile은 루비의 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/foreman' rel='nofollow'&gt;foreman&lt;/a&gt;&lt;/span&gt;이라는 Gem을 사용해서 실행한다. 이는 뒤에서 Dockerfile을 검토할 때 다룬다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='serve-static-assets-옵션'&gt;serve static assets 옵션&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;두번째로 변경한 부분은 &lt;code&gt;produciton.rb&lt;/code&gt;(프로덕션 환경 설정)에서 &lt;code&gt;serve_static_assets&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt;로 지정한 부분이다. 개발(development) 모드에서는 레일스 서버가 &lt;code&gt;./public&lt;/code&gt; 디렉토리 아래의 파일들을 직접 응답해준다. 하지만 프로덕션 환경에서는 그렇지 않다. 이는 실제 프로덕션 환경에서는 이러한 정적 파일들을 레일스 서버가 아니라 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/nginx' rel='nofollow'&gt;nginx&lt;/a&gt;&lt;/span&gt;나 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/apache' rel='nofollow'&gt;apache&lt;/a&gt;&lt;/span&gt;와 같은 이런 역할에 좀 더 충실한 서버들을 활용해서 전달될 것을 기대하기 때문이다. 그리고 실제로 그렇게 사용하는 것이 정상적인 구성이다. 하지만 여기서는 해당하는 구성을 하지 않으므로 에러 페이지를 비롯한 기본적인 정적 파일에 응답하기 위해 이 옵션을 활성화한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='v0.1-이미지-생성하기'&gt;v0.1 이미지 생성하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기까지 간략하게 &lt;code&gt;v0.1&lt;/code&gt;이 어떻게 변경되었는 지를 살펴보았다. 그렇다면 여기서부터는 실제로 &lt;code&gt;v0.1&lt;/code&gt; 프로젝트를 이미지로 만들 것이다. 이를 위해서는 이러한 일련의 과정을 기술한 Dockerfile을 준비해야한다. 이 파일은 앞서서 클론 받은 &lt;code&gt;rails-new-dockerfile&lt;/code&gt; 디렉토리에 포함되어 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../rails-new-dockerfile/v0.1
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
&lt;/span&gt;&lt;span id="line-3"&gt;Dockerfile
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 디렉토리에는 Dockerfile 하나만 덩그러니 들어있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='dockerfile(v0.1)'&gt;Dockerfile(v0.1)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 빌드에 앞서 도커 파일을 살펴보도록하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Run upgrades&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="cp"&gt;# Install basic packages&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt; &lt;span class="n"&gt;libssl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; 
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="cp"&gt;# Install Ruby 2.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;brightbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ng&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bundler&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rdoc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="cp"&gt;# Install packages for app&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;libsqlite3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;nodejs&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;foreman&lt;/span&gt; &lt;span class="n"&gt;compass&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="cp"&gt;# Install docker-sample-project v0.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/nacyot/docker-sample-project.git /app&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="cp"&gt;# Run docker-sample-project&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;SECRET_KEY_BASE&lt;/span&gt; &lt;span class="n"&gt;hellodocker&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-30"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;RAILS_ENV&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-31"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;60005&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-32"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="n"&gt;foreman&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;Procfile&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;계속해서 사용할 Dockerfile이므로 각각의 부분에 대해서 좀 더 자세히 살펴보자.&lt;/p&gt;

&lt;h4&gt;&lt;a name='베이스-이미지-지정'&gt;베이스 이미지 지정&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt;은 이 Dockerfile을 빌드할 때 사용할 베이스 이미지를 지정한다. 지정 방식은 이미지를 나타내는 해시값이나 이름을 지정할 수 있다.&lt;/p&gt;

&lt;p&gt;여기서 사용한 &lt;code&gt;dockerfile/ubuntu&lt;/code&gt;는 공식 &lt;code&gt;ubuntu:14.04&lt;/code&gt;에 약간의 기본적인 설정이 가미된 이미지이다. &lt;a href="http://dockerfile.github.io/#/ubuntu"&gt;Dockerfile Project&lt;/a&gt;는 비슷한 종류의 확장된 기본 이미지를 다수 제공한다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='dockerfile-관리자-지정'&gt;Dockerfile 관리자 지정&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;MAINTAINER&lt;/code&gt;는 이 Dockerfile을 관리하는 사람을 명시적으로 알려준다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='기본-라이브러리-설치'&gt;기본 라이브러리 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Run upgrades&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Install basic packages&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt; &lt;span class="n"&gt;libssl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; 
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt;은 쉘 명령어를 실행시킨다. 먼저 &lt;code&gt;apt-get update&lt;/code&gt;를 통해서 저장소의 정보를 갱신한다. 이 과정을 생략하면 빌드 시점에 따라서 &lt;code&gt;apt-get install&lt;/code&gt;이 정상적으로 작동되지 않을 가능성이 높으므로 특별한 이유가 없는 한 반드시 실행한다.&lt;/p&gt;

&lt;p&gt;다음으로는 &lt;code&gt;apt-get install&lt;/code&gt; 명령어로 기본 패키지들을 설치한다. 이는 필요에 따라서 유동적이다. 여기서는 다른 어플리케이션 빌드 과정에서 필요한 패키지들과 어플리케이션을 저장소에서 가져올 수 있도록 git을 미리 설치한다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='루비-설치하기'&gt;루비 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Install Ruby 2.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;brightbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ng&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;레일스 어플리케이션은 루비 프로그래밍 언어를 기반으로 하고 있다. 따라서 레일스 어플리케이션을 실행하고자 한다며 반드시 루비를 실행할 수 있어야한다. 공식 루비 패키지는 루비 버전이 오래되었을 가능성이 높다. &lt;code&gt;ppa:brightbox/ruby-ng&lt;/code&gt;에서는 최신 루비 패키지를 지원한다. 따라서 이 저장소를 추가하고 &lt;code&gt;apt-get install ruby2.1&lt;/code&gt; 명령어로 루비를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bundler&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rdoc&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;루비에는 현재 기본적으로 패키지 관리를 위한 &lt;code&gt;gem&lt;/code&gt; 명령어를 포함한다. 이는 시스템 단위의 패키지 관리를 해주는 툴이므로 어플리케이션 단위의 의존성 관리를 위한 &lt;code&gt;bundler&lt;/code&gt;를 설치할 필요가 있다. 이를 설치해준다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='레일스-어플리케이션-실행을-위한-시스템-패키지-설치'&gt;레일스 어플리케이션 실행을 위한 시스템 패키지 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;libsqlite3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;nodejs&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기에는 함정에 빠진 초보 레일스 개발자를 구해줄 마법같은 명령어들이 있다. 레일스는 특별히 설정하지 않으면 기본적으로 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/sqlite3' rel='nofollow'&gt;sqlite3&lt;/a&gt;&lt;/span&gt;를 사용한다. 그런데 &lt;code&gt;bundle install&lt;/code&gt;을 실행하면 sqlite3 Gem 부분에서 에러가 나는 경우가 많다. 위의 패키지를 설치하면 해당하는 문제가 마법같이 해결된다.&lt;/p&gt;

&lt;p&gt;아래 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/nodejs'&gt;nodejs&lt;/a&gt;&lt;/span&gt; 패키지도 마찬가지다. nodejs 패키지 설치없이 &lt;code&gt;bundle install&lt;/code&gt;을 설치하면 시스템에 자바스크립트 런타임이 없다는 이유로 bundle이 제대로 이루어지지 못 한다. nodejs를 설치하면 이러한 문제가 해결된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;foreman&lt;/span&gt; &lt;span class="n"&gt;compass&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;추가적으로 루비 패키지들을 설치해준다. foreman은 앞서서 소개한 Procfile을 실행시켜주는 Gem이다. &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/compass' rel='nofollow'&gt;compass&lt;/a&gt;&lt;/span&gt;는 에셋 컴파일에 사용된다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='레일스-어플리케이션-설치하기'&gt;레일스 어플리케이션 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;여기까지가 기본적인 시스템 설정이었다면 여기부터가 직접 만든 어플리케이션을 설치하는 부분이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 지시자는 앞으로 실행되는 모든 &lt;code&gt;RUN&lt;/code&gt; 지시자의 실행 위치를 지정한다. 즉 &lt;code&gt;WORKDIR /app&lt;/code&gt;을 통해서 아래의 모든 명령어는 &lt;code&gt;/app&lt;/code&gt; 디렉토리에서 실행된다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/nacyot/docker-sample-project.git /app&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;어플리케이션을 클론하고, &lt;code&gt;v0.1&lt;/code&gt;로 체크아웃한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로덕션 모드에서 배포를 위한 레일스 의존성을 설치한다. 특별히 어려울 건 전혀없다. 앞서서 &lt;code&gt;bundle&lt;/code&gt; 실행시 발생할 수 있는 문제들을 해결하기 위한 패키지들도 미리 설치해두었기 때문에 별 무리없이 설치가 진행될 것이다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='환경변수-지정하기'&gt;환경변수 지정하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;RAILS_ENV&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;SECRET_KEY_BASE&lt;/span&gt; &lt;span class="n"&gt;hellodocker&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;레일스에서는 일부 환경변수를 우선적으로 자신의 환경설정에 적용한다. &lt;code&gt;ENV&lt;/code&gt; 지시자를 사용하면 이미지에 이러한 환경변수 초기값을 지정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RAILS_ENV&lt;/code&gt;는 어플리케이션이 실행되는 환경을 의미한다. 여기서는 (아직 아무것도 없음에도 불구하고!)배포 과정이므로 &lt;code&gt;production&lt;/code&gt;을 지정한다.&lt;/p&gt;

&lt;p&gt;또한 production 모드에서는 &lt;code&gt;secret_token&lt;/code&gt;이 기본적으로 설정되어있지 않다. 이를 지정하기 위해서는 &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt; 환경변수를 사용해야한다. 적당한 값을 지정해주면 된다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='포트-노출하기'&gt;포트 노출하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;60005&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 지시자는 실행된 도커 컨테이너에서 외부에 노출 가능한 포트를 지정한다. 앞서 언급한 바 있듯이 이 글에서는 편의상 서버를 60005번으로 사용한다. 따라서 컨테이너의 60005번 포트를 노출시킨다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='기본-명령어-지정하기'&gt;기본 명령어 지정하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="n"&gt;foreman&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;Procfile&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;를 사용하면 도커 이미지에 기본 명령어를 지정할 수 있다. 이미지와 컨테이너를 소개할 때 반복적으로 강조하려고 하는 두 가지가 이미지로부터 컨테이너가 실행된다는 거고, 컨테이너는 항상 단 하나의 프로세스라는 점이다. 즉 개념적으로는 가상머신과 비슷하지만, 구현적으로는 가상머신과 너무나도 다르다. 다시 한 번 이야기한다. 컨테이너는 항상 단 하나의 프로세스이다. 이 사실을 놓쳐서는 안 된다.&lt;/p&gt;

&lt;p&gt;이 말을 바꿔말하면 어플리케이션 실행 환경이 통째로 들어있는 이미지에 대해서 &amp;#39;어떠한 명령어&amp;#39;를 사용해서든 컨테이너를 실행할 수 있다는 말이다. 그래서 &lt;code&gt;/bin/bash&lt;/code&gt;를 지정하면 컨테이너에 접속을 할 수 있는 거고, &lt;code&gt;bundle exec rails server&lt;/code&gt;를 지정하면 어플리케이션을 실행할 수 있다. 조건은 컨테이너에 해당하는 실행파일만 있으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;로 기본 명령어를 지정한다는 말은 도커 이미지를 명령어 인자 없이 &lt;code&gt;run&lt;/code&gt;(실행)시켰을 때 실행되는 명령어를 지정한다는 의미이다.&lt;/p&gt;

&lt;p&gt;여기서는 기본 명령어로 위에서 이야기한 대로 foreman을 사용해 Procfile을 실행한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-이미지-빌드'&gt;도커 이미지 빌드&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기까지 따라왔으면 거진 다 온 거나 마찬가지다. 이제 이미지를 빌드해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t nacyot/rails-new:0.1 .
&lt;/span&gt;&lt;span id="line-2"&gt;Sending build context to Docker daemon 3.584 kB
&lt;/span&gt;&lt;span id="line-3"&gt;Sending build context to Docker daemon 
&lt;/span&gt;&lt;span id="line-4"&gt;Step 0 : FROM dockerfile/ubuntu
&lt;/span&gt;&lt;span id="line-5"&gt; ---&amp;gt; 96af2d36fb39
&lt;/span&gt;&lt;span id="line-6"&gt;Step 1 : MAINTAINER nacyot&lt;span class="o"&gt;(&lt;/span&gt;propellerheaven@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-8"&gt; ---&amp;gt; 63b3eaf59343
&lt;/span&gt;&lt;span id="line-9"&gt;Step 2 : RUN apt-get update
&lt;/span&gt;&lt;span id="line-10"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-11"&gt; ---&amp;gt; c20d985f7209
&lt;/span&gt;&lt;span id="line-12"&gt;...
&lt;/span&gt;&lt;span id="line-13"&gt;Step 18 : EXPOSE 60005
&lt;/span&gt;&lt;span id="line-14"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-15"&gt; ---&amp;gt; 1d4c322a6f1a
&lt;/span&gt;&lt;span id="line-16"&gt;Step 19 : CMD foreman start -f Procfile
&lt;/span&gt;&lt;span id="line-17"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-18"&gt; ---&amp;gt; 3c2e6f8643fd
&lt;/span&gt;&lt;span id="line-19"&gt;Successfully built 3c2e6f8643fd
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; 옵션은 이미지 이름을 지정해주는 부분이다. 마지막의 &lt;code&gt;.&lt;/code&gt;이 조금 헷갈릴 수도 있는데, 이는 현재 디렉토리에 있는 Dockerfile을 빌드하라는 의미이다. 한번 빌드했었기 때문에 위의 출력 결과에서는 cache를 사용해 빌드했음을 알 수 있다. 어쨌거나 빌드는 무사히 성공되었다.&lt;/p&gt;

&lt;p&gt;이미지가 정상적으로 등록되었는지 검색해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images &lt;span class="p"&gt;|&lt;/span&gt; grep rails-new
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="o"&gt;(&lt;/span&gt;standard input&lt;span class="o"&gt;)&lt;/span&gt;:8:nacyot/rails-new   0.1   3c2e6f8643fd   32 hours ago   716.8 MB
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dockerfile만 잘 만들면 시간이 걸릴 뿐이지, 빌드는 정말 쉽다. 중간에 빌드가 실패하더라도, 실패한 부분까지는 레이어가 만들어져 cache를 사용할 수 있게된다. 따라서 실패한 부분 이후의 Dockerfile만 수정하고 다시 빌드하더라도 매우 빠르게 진행이 되서 부담이 적다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-이미지-실행'&gt;도커 이미지 실행&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;계속해서 강조하지만 도커에서 어플리케이션을 배포한다는 말은 실행가능한 이미지를 생성하는 일이다. 첫번째 레일스 이미지를 만드는데 무사히 성공했다. 이제 이를 실행해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name v0.1 -d -p 60005:60005 nacyot/rails-new:0.1
&lt;/span&gt;&lt;span id="line-2"&gt;320306d26b2efbd2b3e326890f4c477b5a62fa1ca0e95b21912f8557c9f49df0
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 실행되었는 지 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -l
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                  COMMAND                CREATED             STATUS              PORTS                      NAMES
&lt;/span&gt;&lt;span id="line-3"&gt;320306d26b2e        nacyot/rails-new:0.1   /bin/sh -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;foreman    12 minutes ago      Up 12 minutes       0.0.0.0:60005-&amp;gt;60005/tcp   v0.1
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 실행되고 있음을 알 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;logs&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;WEBrick&lt;/span&gt; &lt;span class="mf"&gt;1.3.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="mf"&gt;2.1.1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;WEBrick&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60005&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 사이트에 접속 가능하다. &lt;code&gt;http://localhost:60005&lt;/code&gt;로 사이트에 접속해보면 아래와 같은 결과를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.1.png" alt="v0.1 사이트 접속"&gt;&lt;/p&gt;

&lt;p&gt;접속은 정상적으로 이루어지지만 에러가 난다. 이 에러는 내부 에러라기보다는 아직 레일스 어플리케이션을 전혀 작성하지 않았기 때문에 발생하는 에러이다. 즉, 메인 라우트가 없기 때문에 발생한다. 이전에 Rails3까지는 Public 폴더에 레일스 기본 페이지가 있었으나, Rails4 부터는 이러한 기본 페이지가 동적으로 생성되며 프로덕션 모두에서는 작동하지 않는다. 따라서 에러가 발생하는 것이다. 일단 어플리케이션 작성이 목적은 아니라 &lt;strong&gt;정상적으로&lt;/strong&gt; 에러가 나는 것을 축하하며 다음으로 넘어가자.&lt;/p&gt;

&lt;p&gt;다시 로그를 출력해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker logs v0.1
&lt;/span&gt;&lt;span id="line-2"&gt;15:54:16 web.1  &lt;span class="p"&gt;|&lt;/span&gt; started with pid 10
&lt;/span&gt;&lt;span id="line-3"&gt;15:54:18 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-11 15:54:18&lt;span class="o"&gt;]&lt;/span&gt; INFO  WEBrick 1.3.1
&lt;/span&gt;&lt;span id="line-4"&gt;15:54:18 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-11 15:54:18&lt;span class="o"&gt;]&lt;/span&gt; INFO  ruby 2.1.1 &lt;span class="o"&gt;(&lt;/span&gt;2014-02-24&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x86_64-linux-gnu&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;15:54:18 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-11 15:54:18&lt;span class="o"&gt;]&lt;/span&gt; INFO  WEBrick::HTTPServer#start: &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10 &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60005
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로덕션 모드에서는 기본적으로 로그가 전부 파일에서 출력되기 때문에 아무것도 출력되지 않는다.&lt;/p&gt;

&lt;p&gt;여기까지 해서 훌륭히 첫번째 레일스 어플리케이션을 도커로 빌드하고 실행해봤다. 이제 컨테이너를 종료하고 v0.2로 넘어간다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker stop v0.1
&lt;/span&gt;&lt;span id="line-2"&gt;v0.1
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker rm v0.1
&lt;/span&gt;&lt;span id="line-4"&gt;v0.1
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='v0.2-rails_12factor'&gt;v0.2 rails_12factor&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;[[히로쿠(heroku)|heroku]]를 사용해본 적이 있다면 히로쿠의 배포 방식이 기존의 배포 방식과는 상당히 다르다는 것을 알 수 있다. 클라우드로 따지자면 Infrastructure as a Service와 Platform as a Service의 차이라고 단순히 말할 수도 있겠지만, 그러한 환경을 구현하기 위해서 많은 것이 달라진다. 그리고 그러한 변화에 대응하기 위해 적용되는 라이브러리가 &lt;code&gt;rails_12factor&lt;/code&gt;라는 gem이다.&lt;/p&gt;

&lt;p&gt;분명 잘은 모르겠지만,&lt;/p&gt;

&lt;p&gt;Heroku에서는 이 gem을 설치하라고 하고, 이 gem을 설치하면 뭔가 문제가 생기던 게 해결된다. 하지만 마법과 같은 이 Gem이 무엇을 하는 지까지 관심을 가지는 경우는 드물다. 이번에는 이 gem 을 설치하고 그 궁금증을 해소해본다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='프로젝트-변경사항'&gt;프로젝트 변경사항&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../docker-sample-project
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout v0.2
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat Gemfile &lt;span class="p"&gt;|&lt;/span&gt; grep 12
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;(&lt;/span&gt;standard input&lt;span class="o"&gt;)&lt;/span&gt;:13:gem &lt;span class="s1"&gt;&amp;#39;rails_12factor&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로젝트에 변경되는 부분은 거의 없다. 단지 gem에 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/rails_12factor' rel='nofollow'&gt;rails_12factor&lt;/a&gt;&lt;/span&gt;를 추가했을 뿐이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='dockerfile'&gt;Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dockerfile에 대해서도 위에서 자세히 설명했다. 여기서 달라지는 부분은 실질적으로 &lt;code&gt;v0.2&lt;/code&gt;로 체크아웃하는 거 이외에는 없다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="n"&gt;Dockerfile&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="n"&gt;c22&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="n"&gt;c25&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='이미지-빌드하기'&gt;이미지 빌드하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;빌드도 똑같다. 단지 이번에는 태그에 &lt;code&gt;0.2&lt;/code&gt;를 주고 빌드한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t nacyot/rails-new:0.2 .
&lt;/span&gt;&lt;span id="line-2"&gt;Sending build context to Docker daemon 3.072 kB
&lt;/span&gt;&lt;span id="line-3"&gt;Sending build context to Docker daemon 
&lt;/span&gt;&lt;span id="line-4"&gt;Step 0 : FROM dockerfile/ubuntu
&lt;/span&gt;&lt;span id="line-5"&gt; ---&amp;gt; 96af2d36fb39
&lt;/span&gt;&lt;span id="line-6"&gt;Step 1 : MAINTAINER nacyot&lt;span class="o"&gt;(&lt;/span&gt;propellerheaven@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-8"&gt; ---&amp;gt; 63b3eaf59343
&lt;/span&gt;&lt;span id="line-9"&gt;Step 2 : RUN apt-get update
&lt;/span&gt;&lt;span id="line-10"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-11"&gt; ---&amp;gt; c20d985f7209
&lt;/span&gt;&lt;span id="line-12"&gt;...
&lt;/span&gt;&lt;span id="line-13"&gt;Step 18 : EXPOSE 60005
&lt;/span&gt;&lt;span id="line-14"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-15"&gt; ---&amp;gt; 2804c093d552
&lt;/span&gt;&lt;span id="line-16"&gt;Step 19 : CMD foreman start -f Procfile
&lt;/span&gt;&lt;span id="line-17"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-18"&gt; ---&amp;gt; a8263aeb3676
&lt;/span&gt;&lt;span id="line-19"&gt;Successfully built a8263aeb3676
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='이미지-실행하기'&gt;이미지 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;실행하고 정상적으로 실행되었는 지 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name v0.2 -d -p 60005:60005 nacyot/rails-new:0.2
&lt;/span&gt;&lt;span id="line-2"&gt;019e38fb70382fd1e49c3be7b011b7ea715644e6bb6b99f199506d8e8708fadb
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -l
&lt;/span&gt;&lt;span id="line-4"&gt;CONTAINER ID        IMAGE                  COMMAND                CREATED             STATUS              PORTS               NAMES
&lt;/span&gt;&lt;span id="line-5"&gt;019e38fb7038        nacyot/rails-new:0.2   /bin/sh -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;foreman    16 minutes ago                                              v0.2
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;http://localhost:6005&lt;/code&gt;로 접속해본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.2.png" alt="v0.2 사이트 접속"&gt;&lt;/p&gt;

&lt;p&gt;v0.1 때와 같은 에러가 출력된다. 다시 로그를 출력해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker logs v0.2
&lt;/span&gt;&lt;span id="line-2"&gt;16:00:27 web.1  &lt;span class="p"&gt;|&lt;/span&gt; started with pid 10
&lt;/span&gt;&lt;span id="line-3"&gt;16:00:29 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-14 16:00:29&lt;span class="o"&gt;]&lt;/span&gt; INFO  WEBrick 1.3.1
&lt;/span&gt;&lt;span id="line-4"&gt;16:00:29 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-14 16:00:29&lt;span class="o"&gt;]&lt;/span&gt; INFO  ruby 2.1.1 &lt;span class="o"&gt;(&lt;/span&gt;2014-02-24&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x86_64-linux-gnu&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;16:00:29 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-14 16:00:29&lt;span class="o"&gt;]&lt;/span&gt; INFO  WEBrick::HTTPServer#start: &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10 &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60005
&lt;/span&gt;&lt;span id="line-6"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Booting WEBrick
&lt;/span&gt;&lt;span id="line-7"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Rails 4.1.1 application starting in production on http://0.0.0.0:60005
&lt;/span&gt;&lt;span id="line-8"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Run &lt;span class="sb"&gt;`&lt;/span&gt;rails server -h&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;more startup options
&lt;/span&gt;&lt;span id="line-9"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Notice: server is listening on all interfaces &lt;span class="o"&gt;(&lt;/span&gt;0.0.0.0&lt;span class="o"&gt;)&lt;/span&gt;. Consider using 127.0.0.1 &lt;span class="o"&gt;(&lt;/span&gt;--binding option&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Ctrl-C to shutdown server
&lt;/span&gt;&lt;span id="line-11"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; Started GET &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;172.17.42.1 at 2014-06-14 16:00:33 +0000
&lt;/span&gt;&lt;span id="line-12"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; 
&lt;/span&gt;&lt;span id="line-13"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; ActionController::RoutingError &lt;span class="o"&gt;(&lt;/span&gt;No route matches &lt;span class="o"&gt;[&lt;/span&gt;GET&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;span id="line-14"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt;   actionpack &lt;span class="o"&gt;(&lt;/span&gt;4.1.1&lt;span class="o"&gt;)&lt;/span&gt; lib/action_dispatch/middleware/debug_exceptions.rb:21:in &lt;span class="sb"&gt;`&lt;/span&gt;call&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="s1"&gt;16:00:33 web.1  |   actionpack (4.1.1) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;...
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;뭔가 달라졌다. 분명 &lt;code&gt;v0.1&lt;/code&gt; 때는 로그에 아무것도 출력되지 않았으나, &lt;code&gt;v0.2&lt;/code&gt;에서는 에러에 대한 로그가 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v0.2&lt;/code&gt;에서 코드가 달라진 부분은 &lt;code&gt;rails_12factor&lt;/code&gt;를 추가한 부분뿐이다. 그렇다면 자연스럽게 결론을 내릴 수 있다. &lt;code&gt;rails_12factor&lt;/code&gt;는 로그를 Process의 stdout으로 출력해준다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='the-twelve-factor-app'&gt;The Twelve-Factor App&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서 두 가지 정도 의문이 들 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails_12factor&lt;/code&gt;는 왜 로그를 굳이 파일이 아니라 stdout로 출력해주는 걸까?&lt;/p&gt;

&lt;p&gt;그리고 이 gem을 여기서 왜 설치했을까?&lt;/p&gt;

&lt;p&gt;이는 도커의 컨테이너 환경을 이해하는데 핵심적인 역할을 하는 문제이다. 잠깐 히로쿠 이야기로 돌아가보자. 일반적으로 운영체제에서 할 수 있는 모든 것을 할 수 있는 가상머신인 IaaS와 어플리케이션 코드만으로 실행 가능한 PaaS는 근본적으로 많은 부분에서 다르다. 예를 들어 히로쿠에는 서버 관리라는 개념이 없다. 히로쿠를 써봤다면 알겠지만, 히로쿠에 git 저장소를 만들어놓고 이 저장소에 어플리케이션을 push하면 어플리케이션이 빌드되고 자동으로 실행된다. 여기서 중요한 점은 heroku에서 실행되고 있는 서버에 접근해서 어떠한 명령어를 실행시키는 게 거의 불가능하다는 점이다(혹은 매우 제한적이다). 사용자는 히로쿠의 서버를 운영하지 않는다. 그런 면에서 볼 때 PaaS란 단순히 IaaS의 일부 역할을 대체한다고 말할 수가 없어진다. 어플리케이션을 운영해본 사람이라면 알겠지만 어플리케이션과 직접 관련이 없더라도 어플리케이션 운영중에 서버 상에서 여러가지 작업을 필요로 하는 경우는 흔한 일이다. 히로쿠에서는 그런 종류의 작업이 거의 불가능하다.&lt;/p&gt;

&lt;p&gt;단지 어플리케이션이 실행되고 있을 뿐이고, 히로쿠가 하는 일은 어플리케이션이 실행되어있다는 것을 보장해주는 것 뿐이다.&lt;/p&gt;

&lt;p&gt;따라서 PaaS에서 어플리케이션을 운영하는 모델은 IaaS에서 해오던 것과는 전혀 다르다. 바로 이 지점에서 단순한 범위 차이 이상의 차이가 발생한다. 이러한 차이는 최적화의 문제이기도 하고, 패러다임의 문제이기도 하다. 예를 들어 TDD를 적용해 프로그래밍을 하면 단순히 테스트를 습관화들이는 것뿐만 아니라, 어플리케이션을 설계하는 데 있어서도 테스트가 더 편하게 가능한 설계를 고민하게 된다는 이야기와 비슷하다. PaaS는 기존의 어플리케이션을 그대로 옮겨둘 수도 있겠지만, PaaS 방식에 맞는 어플리케이션을 요구한다. 여기서 어플리케이션이란 단순히 실제 어플리케이션 코드만을 이야기하는 것은 아니다. 어플리케이션과 그것을 운영하고 관리하는 방식 전체를 통틀어서의 이야기이다.&lt;/p&gt;

&lt;p&gt;추상적인 얘기는 집어치우고, 그래서 왜 히로쿠에서는 &lt;code&gt;rails_12factor&lt;/code&gt;가 필요할까? 정답은 간단하다. 사용자는 히로쿠 서버의 파일 시스템에 직접적으로 접근할 수 없고, 따라서 log파일을 직접 가져오는 게 불가능하다. 바로 이런 지점이 IaaS와 PaaS가 극적으로 달라지는 부분이자, 패러다임 시프트를 요구하는 부분이다. 어쨌거나 로그는 필요하다. 그래서 히로쿠는 CLI 클라이언트를 통해서 마지막 (최대) &lt;a href="https://devcenter.heroku.com/articles/limits#logs"&gt;1500줄 분량의 로그를 제공해준다&lt;/a&gt;. 이를 위해서 rails_12factor를 통해 파일로 보내질 로그를 stdout으로 출력할 필요가 있었던 것이다. 즉 히로쿠에서는 전체 어플리케이션 로그를 가져올 방법이 없고, 히로쿠에서는 이러한 문제를 해결할 수 있는 방안으로 다른 로깅 서비스를 연동해서 사용할 것을 이야기하고 있다.&lt;/p&gt;

&lt;p&gt;이 정도면 조금 감이 올 지 모르겠다. 도커, 좀 더 정확히는 컨테이너는 기본적으로 PaaS에 가깝다. 도커에서도 히로쿠와 마찬가지로 실행중인 어플리케이션의 서버를 운용하는 방식으로 관리하는 것은 매우 번거롭고 제한적이다. 더욱이 Adam Wiggins은 The Twelve-Factor App에서 히로쿠의 로그 방식이 단순히 파일을 다룰 수 없는 제약 때문은 아니었다는 것을 분명히 이야기하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;로그는 모든 실행중인 프로세스와 백엔드 서비스의 누적되며 시간순으로 수집되고 정렬되는 이벤트 스트림이다. 일반적으로 어플리케이션이 직접 생성하는 로그는 한 줄에 하나의 이벤트를 텍스트 포맷으로 기록한다(예외를 추적하는 로그는 여러줄로 쓰여지기도 한다). 로그는 고정된 시작과 끝이 없으면 어플리케이션이 실행되는 한 계속된다.&lt;/p&gt;

&lt;p&gt;Twelve Factor App은 어플리케이션의 출력 스트림의 목적지나 어디에 저장되는 지 일체 간섭하지 않는다. 어플리케이션은 로그를 작성하거나 로그 파일을 관리하려고 해서는 안된다. 로그 파일을 관리하는 대신 각각의 실행중인 프로세스는 자신의 이벤트 스트림을 버퍼없이 stdout에 출력한다. 로컬에서 개발중인 프로그래머는 이러한 스트림을 터미널의 포그라운드에서 확인할 수 있으며, 이를 통해 어플리케이션이 어떻게 동작하는 지 확인할 수 있다. (&lt;a href="http://the-twelve-factor-app.herokuapp.com/logs"&gt;The Twelve-Factor App 11장 로그&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아, 여기서 &lt;code&gt;rails_12factor&lt;/code&gt;의 정체가 명확해진다. &lt;code&gt;rails_12factor&lt;/code&gt;은 다름 아닌 The Twelve-Factor App의 실천사항의 일부를 실제로 구현해주는 gem이다. 소개가 늦었다. The Twelve-Factor App은 위에서 이야기한 PaaS의 패러다임에 해당하는 이야기를 히로쿠의 프로그래머가 정리한 문서이다.&lt;/p&gt;

&lt;p&gt;도커는 어렵다. 도커를 가상화 기술이라고 소개할 때 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/vmware' rel='nofollow'&gt;VMWare&lt;/a&gt;&lt;/span&gt;나 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/virtualbox' rel='nofollow'&gt;VirtualBox&lt;/a&gt;&lt;/span&gt;와 같은 툴들과 상당한 차이를 지니고 있다. 이는 단순히 하드웨어 에뮬레이션 정도의 차이가 아니라, 어플리케이션을 다루는 방식 전반에 걸친 차이가 존재하기 때문이다. 그리고 컨테이너라는 개념과 이러한 차이를 이해하는 게 도커를 활용하는 지름길이라고 할 수 있다. 컨테이너는 단지 하나의 프로세스이고, 이 하나의 프로세스로 어플리케이션을 운영해야한다는 점에서는 VMWare의 가상머신보다는 히로쿠의 어플리케이션에 한없이 가깝다. 따라서 The twelve-Factor App의 원칙들은 컨테이너를 유연하게 사용하는데 좋은 지침이 된다. 이는 2가지 면에서 좋은 지침이 되어주는데, 도커에서 어플리케이션을 어떻게 실행 관리되는 지를 알려주고, 두번째로 &lt;code&gt;Build once, Run anywhere&lt;/code&gt;를 실현할 수 있는 전략들을 알려준다.&lt;/p&gt;

&lt;p&gt;물론 도커의 컨테이너를 가상머신처럼 다루는 게 불가능하지는 않다. 컨테이너를 실행할 때 sshd 데몬을 같이 띄운다거나 log가 저장되는 디렉토리 자체를 어플리케이션에 이미지와 별개로 마운트시키는 방식으로 log 파일을 관리하는 게 가능하기는 하다. 하지만 그런 방식이 도커에서 딱히 권장되지는 않는다.&lt;/p&gt;

&lt;p&gt;이 정도면 처음에 품었던 두 가지 질문에 대한 설명은 충분히되었다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='rails_12factor'&gt;rails_12factor&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;그렇다면 실제로 &lt;code&gt;rails_12factor&lt;/code&gt;가 해주는 일은 어떤 것들이 있을까?&lt;/p&gt;

&lt;p&gt;먼저 로그를 stdout으로 출력해주는 것은 이미 살펴보았다. 또 하나는 앞서 다룬 &lt;code&gt;serve_static_assets&lt;/code&gt;를 활성화시켜는 일이다. rails_12factor가 하는 일은 정말 딱 이렇게 두가지다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='v0.2-정리'&gt;v0.2 정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이걸로 v0.2에 대한 설명도 마무리 되었다. 이제 컨테이너를 멈추고 삭제한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='v0.3-데이터베이스-연동하기'&gt;v0.3 데이터베이스 연동하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;웹 어플리케이션의 꽃은 이러쿵저러쿵 해도 데이터베이스다. &lt;code&gt;v0.3&lt;/code&gt;에서는 데이터베이스를 연동하고 간단한 scaffolding을 통해 에러없이 어플리케이션이 작동하도록 만든다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='프로젝트-변경사항'&gt;프로젝트 변경사항&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 v0.3에서는 scaffold 명령어로 Post 모델을 생성했다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails g scaffold post title body:text published:boolean
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;config/routes.rb&lt;/code&gt; 파일을 아래와 같이 변경한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;posts#index&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 외에 변경한 사항은 mysql2 gem을 추가한 정도이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout v0.3
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat Gemfile &lt;span class="p"&gt;|&lt;/span&gt; grep mysql2
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;(&lt;/span&gt;standard input&lt;span class="o"&gt;)&lt;/span&gt;:14:gem &lt;span class="s1"&gt;&amp;#39;mysql2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='dockerfile'&gt;Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;rails-new-docker/v0.3의 Dockerfile에서 달라진 부분은 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;diff Dockerfile ../v0.2/Dockerfile
&lt;/span&gt;&lt;span id="line-2"&gt;19d18
&lt;/span&gt;&lt;span id="line-3"&gt;&amp;lt; RUN apt-get install -qq -y mysql-server mysql-client libmysqlclient-dev
&lt;/span&gt;&lt;span id="line-4"&gt;23c22
&lt;/span&gt;&lt;span id="line-5"&gt;&amp;lt; &lt;span class="c"&gt;# Install docker-sample-project v0.3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;---
&lt;/span&gt;&lt;span id="line-7"&gt;&amp;gt; &lt;span class="c"&gt;# Install docker-sample-project v0.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;26c25
&lt;/span&gt;&lt;span id="line-9"&gt;&amp;lt; RUN git checkout v0.3
&lt;/span&gt;&lt;span id="line-10"&gt;---
&lt;/span&gt;&lt;span id="line-11"&gt;&amp;gt; RUN git checkout v0.2
&lt;/span&gt;&lt;span id="line-12"&gt;34d32
&lt;/span&gt;&lt;span id="line-13"&gt;&amp;lt; 
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/mysql'&gt;mysql&lt;/a&gt;&lt;/span&gt;에 필요한 시스템 패키지를 설치하고 v0.3으로 체크아웃 하는 정도이다.. 시스템 라이브러리를 설치하는 부분은 레일스를 처음 사용할 때 겪는 함정으로 해당하는 패키지가 없으면 &lt;code&gt;bundle install&lt;/code&gt;에 실패한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='이미지-빌드하기'&gt;이미지 빌드하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이미지를 빌드한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='이미지-실행하기'&gt;이미지 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이미지를 실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;60005&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60005&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;http://localhost:60005&lt;/code&gt; 페이지에 접속해본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.3.png" alt="v0.3 사이트 접속 - We`re sorry, but something went wrong"&gt;&lt;/p&gt;

&lt;p&gt;이번에는 에러메시지가 달라졌다. 이전 에러메시지는 페이지가 없다는 내용(즉 라우트가 없음)이었는데 이번에는 &amp;#39;We&amp;#39;re sorry, but something went wrong.&amp;#39;라고 내부적으로 문제가 있다는 걸 볼 수 있다. &lt;/p&gt;

&lt;p&gt;구체적인 내요은 로그를 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="x"&gt;$ docker logs v0.3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="x"&gt;02:50:21 web.1  | started with pid 9&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="x"&gt;02:50:23 web.1  | [2014-06-15 02:50:23] INFO  WEBrick 1.3.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="x"&gt;02:50:23 web.1  | [2014-06-15 02:50:23] INFO  ruby 2.1.1 (2014-02-24) [x86_64-linux-gnu]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="x"&gt;02:50:23 web.1  | [2014-06-15 02:50:23] INFO  WEBrick::HTTPServer#start: pid=9 port=60005&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Booting WEBrick&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Rails 4.1.1 application starting in production on http://0.0.0.0:60005&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Run `rails server -h` for more startup options&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Notice: server is listening on all interfaces (0.0.0.0). Consider using 127.0.0.1 (--binding option)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Ctrl-C to shutdown server&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="x"&gt;02:50:34 web.1  | Started GET &amp;quot;/&amp;quot; for 172.17.42.1 at 2014-06-15 02:50:34 +0000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="x"&gt;02:50:34 web.1  | Processing by PostsController#index as HTML&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="x"&gt;02:50:34 web.1  | SQLite3::SQLException: no such table: posts: SELECT &amp;quot;posts&amp;quot;.* FROM &amp;quot;posts&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="x"&gt;02:50:34 web.1  |   Rendered posts/index.html.erb within layouts/application (6.3ms)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="x"&gt;02:50:34 web.1  | Completed 500 Internal Server Error in 16ms&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="x"&gt;02:50:34 web.1  | &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="x"&gt;02:50:34 web.1  | ActionView::Template::Error (SQLite3::SQLException: no such table: posts: SELECT &amp;quot;posts&amp;quot;.* FROM &amp;quot;posts&amp;quot;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     11:   &amp;lt;/thead&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     12: &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     13:   &amp;lt;tbody&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     14:     &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     15:       &amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     16:         &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     17:         &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="x"&gt;02:50:34 web.1  |   app/views/posts/index.html.erb:14:in `_app_views_posts_index_html_erb___1118890408216197302_48728380&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="x"&gt;02:50:34 web.1  | &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="x"&gt;02:50:34 web.1  | &lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;에러 메시지를 자세히 살펴보면, 중간에 &lt;code&gt;SQLite3::SQLException&lt;/code&gt; 에러가 발생한 것을 알 수 있다. 이 이유가 발생한 이유는 간단하다. &lt;code&gt;db:migrate&lt;/code&gt;(혹은 &lt;code&gt;db:create&lt;/code&gt;)를 하지 않았기 때문이다. 앞서 scaffold로 만든 post 모델은 데이터베이스를 필요로 한다. 레일스에서는 데이터베이스 접속을 &lt;code&gt;config/database.yml&lt;/code&gt;에서 관리하는데 아무것도 설정하지 않으면 sqlite를 로컬에서 사용한다. 하지만 지금은 데이터베이스가 제대로 초기화되어있지 않기 때문에 문제가 발생하는 것이다.&lt;/p&gt;

&lt;p&gt;이번에는 실제 데이터베이스에 연결하고 초기화하는 방법을 알아보자. 먼저 지금 실행중인 컨테이너를 삭제한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker stop v0.3
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker rm v0.3
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='데이터베이스-준비'&gt;데이터베이스 준비&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서는 데이터베이스로 mysql을 사용한다. 이를 통해서 도커에서 웹어플리케이션을 실행시킬 때 어떻게 외부 서비스를 연결하는지 알 수 있다. 먼저 mysql을 준비한다. 여기서는 편의상 호스트에 mysql을 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install mysql-server
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;데이터베이스에 접속해서 데이터베이스 및 계정을 추가하고 권한을 부여해준다. 데이터베이스 접속시 사용하는 root 계정의 암호는 위에서 mysql 설치 과정에서 입력하는 암호이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mysql -h localhost -u root -p
&lt;/span&gt;&lt;span id="line-2"&gt;Enter password:
&lt;/span&gt;&lt;span id="line-3"&gt;mysql&amp;gt; CREATE DATABASE rails_new
&lt;/span&gt;&lt;span id="line-4"&gt;mysql&amp;gt; GRANT ALL PRIVILEGES ON rails_new.* TO &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; IDENTIFIED BY &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;mysql&amp;gt; GRANT ALL PRIVILEGES ON rails_new.* TO &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt; IDENTIFIED BY &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;권한 설정이 끝났으면 데이터베이스 접속을 종료하고 docker 계정으로 다시 접속한다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mysql -h localhost -u docker -p
&lt;/span&gt;&lt;span id="line-2"&gt;Enter password:
&lt;/span&gt;&lt;span id="line-3"&gt;mysql&amp;gt; use rails_new
&lt;/span&gt;&lt;span id="line-4"&gt;Database changed
&lt;/span&gt;&lt;span id="line-5"&gt;mysql &amp;gt; show databases&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;+--------------------+
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="p"&gt;|&lt;/span&gt; Database           &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;+--------------------+
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="p"&gt;|&lt;/span&gt; information_schema &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="p"&gt;|&lt;/span&gt; rails_new          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;+--------------------+
&lt;/span&gt;&lt;span id="line-12"&gt;2 rows in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;mysql&amp;gt; show tables&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;Empty &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 도커 컨테이너의 mysql 서버로 접속이 가능하도록 &lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt; 파일을 편집해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;데이터베이스를 재실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service mysql restart
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것으로 데이터베이스가 준비되었다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='컨테이너로-rake-명령어-사용하기---db:migrate'&gt;컨테이너로 rake 명령어 사용하기 - db:migrate&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이번에는 도커 컨테이너를 통해서 rake를 실행해 데이터베이스 테이블을 초기화한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -i -t -e &lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mysql2://docker:docker@172.17.42.1/rails_new&amp;quot;&lt;/span&gt; nacyot/rails-new:0.3 bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake db:migrate
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;Migrating to CreatePosts &lt;span class="o"&gt;(&lt;/span&gt;20140608141640&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;==&lt;/span&gt; 20140608141640 CreatePosts: &lt;span class="nv"&gt;migrating&lt;/span&gt; &lt;span class="o"&gt;======================================&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;-- create_table&lt;span class="o"&gt;(&lt;/span&gt;:posts&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;   -&amp;gt; 0.0035s
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;==&lt;/span&gt; 20140608141640 CreatePosts: migrated &lt;span class="o"&gt;(&lt;/span&gt;0.0036s&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=============================&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본적으로 루비 온 레일스에서는 데이터베이스 연결을 &lt;code&gt;database.yml&lt;/code&gt; 파일에서 관리한다. 하지만 &lt;code&gt;DATABASE_URL&lt;/code&gt; 환경 변수가 설정되어있다면 이 설정을 우선적으로 사용한다. 여기서는 컨테이너를 실행하는 호스트에 있는 mysql을 사용하니 &lt;code&gt;mysql2://docker:docker@localhost/rails_new&lt;/code&gt;처럼 지정해준다. 여기에는 프로토콜, Id, Password, Host, Database 정보를 담고있다. 이제 레일스 어플리케이션은 이 데이터베이스를 사용한다. 여기서 &lt;code&gt;172.17.42.1&lt;/code&gt;은 도커 내부에서 바라보는 호스트 PC의 IP이다. 컨테이너 안에서 localhost나 127.0.0.1이 도커 컨테이너 자체를 가리킨다고 생각하면 이해하기 쉬울 것이다.&lt;/p&gt;

&lt;p&gt;그 다음에는 실행하고자 하는 이미지를 지정한다.&lt;/p&gt;

&lt;p&gt;마지막 부분이 중요하다. 앞서서도 이야기했지만 컨테이너는 하나의 프로세스이다. 즉 이미지로부터 컨테이너를 실행할 때 실행하고자 하는 명령어를 지정할 수 있다. 일반적으로 이미지를 사용하면 &lt;code&gt;CMD&lt;/code&gt; 지시자를 통해 지정된 기본 명령어를 사용하지만, 직접 명령어를 입력하면 해당하는 명령어가 실행된다.&lt;/p&gt;

&lt;p&gt;따라서 위에서 실행한 &lt;code&gt;docker run&lt;/code&gt; 명령어는 &amp;#39;nacyot/rails-new:0.3&amp;#39; 이미지를 통해서 &lt;code&gt;bundle exec rake db:migrate&lt;/code&gt;를 실행한다. 이 때 외부 데이터베이스 서비스를 사용하도록 외부 mysql을 지정했으므로 해당하는 데이터베이스에 대해 &lt;code&gt;db:migrate&lt;/code&gt;가 이루어진다. 여기서는 CreatePosts가 생성된다.&lt;/p&gt;

&lt;p&gt;위에서 실행한 컨테이너는 단지 이 역할만 하고 종료된다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='데이터베이스가-연결된-어플리케이션-실행하기'&gt;데이터베이스가 연결된 어플리케이션 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이제 어플리케이션을 실행하고 어플리케이션에 접속한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;60005&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60005&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mysql2://docker:docker@172.17.42.1/rails_new&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.3db.png" alt="v0.3 사이트 접속"&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 실행된다! posts를 하나 만들어본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.3db2.png" alt="v0.3 사이트 접속 - We`re sorry, but something went wrong"&gt;&lt;/p&gt;

&lt;p&gt;포스트도 정상적으로 만들어졌다. 이제 mysql에 접속해 지정한 데이터베이스에 정상적으로 기록이 되고있는지 확인한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mysql -h localhost -u docker -p
&lt;/span&gt;&lt;span id="line-2"&gt;mysql&amp;gt; USE rails_new
&lt;/span&gt;&lt;span id="line-3"&gt;mysql&amp;gt; SELECT * FROM posts&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;+----+---------------+--------+-----------+---------------------+---------------------+
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="p"&gt;|&lt;/span&gt; id &lt;span class="p"&gt;|&lt;/span&gt; title         &lt;span class="p"&gt;|&lt;/span&gt; body   &lt;span class="p"&gt;|&lt;/span&gt; published &lt;span class="p"&gt;|&lt;/span&gt; created_at          &lt;span class="p"&gt;|&lt;/span&gt; updated_at          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;+----+---------------+--------+-----------+---------------------+---------------------+
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="p"&gt;|&lt;/span&gt;  1 &lt;span class="p"&gt;|&lt;/span&gt; Hello, Docker &lt;span class="p"&gt;|&lt;/span&gt; Docker &lt;span class="p"&gt;|&lt;/span&gt;         1 &lt;span class="p"&gt;|&lt;/span&gt; 2014-06-15 04:49:20 &lt;span class="p"&gt;|&lt;/span&gt; 2014-06-15 04:49:20 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;+----+---------------+--------+-----------+---------------------+---------------------+
&lt;/span&gt;&lt;span id="line-9"&gt;1 row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 기록된다. 이제 도커를 통해 레일스 어플리케이션을 배포할 때 데이터베이스를 연결하는 것까지 성공했다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='sqlite3-vs-mysql,-database.yml-vs-환경변수'&gt;sqlite3 vs mysql, database.yml vs 환경변수&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서 잠깐 왜 mysql과 환경변수를 사용했는지 살펴볼 필요가 있다.&lt;/p&gt;

&lt;p&gt;먼저 sqlite3는 파일 하나로 구성되는 데이터베이스이다. 이는 임시로 사용하기에는 편리하지만 실제 어플리케이션에서 사용하기는 여러가지 제약이 따른다. 또한 도커 이미지를 통해서 어플리케이션을 배포할 때 sqlite를 사용하게 되면 어플리케이션과 데이터가 강하게 결합되게 된다. 이는 어플리케이션이 컨테이너의 상태에 강하게 의존되어 실행된다는 의미를 가진다. 이러한 로컬 파일 시스템에 의존해야할 때는 &lt;code&gt;docker run&lt;/code&gt;의 &lt;code&gt;-v&lt;/code&gt;와 같은 옵션을 사용해 이미지에 별개의 볼륨을 마운트 시켜 사용하는 방법이 있기는 하지만, 어플리케이션과 데이터는 가능한한 분리하는 것이 좋다. 이러한 분리가 이루어져야만 관리가 용이할 뿐 아니라 나중에 컨테이너 실행만으로도 스케일 아웃이 가능해진다. (물론 여기에는 좀 더 여러가지 궁리가 필요하지만...)&lt;/p&gt;

&lt;p&gt;레일스에서는 개발용을 sqlite3를 많이 사용하는데, 재미있는 건 Heroku에서는 sqlite3를 아예 지원하지 않는다는 점이다. 이 때문에 개발 과정에서 Heroku를 사용해본 사람들은 시작부터 데이터베이스를 제대로 셋업하고 시작하는 게 번거롭게 느껴졌을 지도 모르지만, 그럼에도 불구하고 왜 히로쿠에서 sqlite3를 지원하지 않는 지를 이해하는 것은 중요하다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;database.yml&lt;/code&gt; 역시 비슷한 이유에서 권장되지 않는다. 데이터베이스 커넥션 정보를 파일 형태로 가지고 있을 시에는 어플리케이션이 이 파일에 의존해서 작동한다. 여기에는 몇 가지 문제가 있는데 어플리케이션 저장소에 이러한 파일을 포함시키는 것은 매우 좋지 않다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;어플리케이션에서 설정이 분리되어있는 지 여부를 확인할 수 있는 간단한 방법은, 어플리케이션 내부에 어떠한 인증 정보도 포함시키지 않고 지금 당장 오픈소스로 공개할 수 있는 지 검토해보는 것이다. &lt;a href="http://the-twelve-factor-app.herokuapp.com/config"&gt;The Twelve-Factor App - 설정&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 저장소에 저장시키지 않고 이미지 빌드 시에 해당하는 파일을 전달해준다고 해도, 데이터베이스 설정이 바뀔 때마다 이미지를 새로 만들어야하는 불편함이 수반된다. 데이터베이스 접속을 &lt;code&gt;database.yml&lt;/code&gt;에 의존하지 않고 데이터베이스 핸들러를 환경변수로 관리하면 이러한 불편함이 해소된다. 즉 외부 서비스가 어디에 있는지와는 상관없이 어플리케이션을 이미지로 보관할 수 있고, 실행시에 동적으로 외부 서비스들을 연결해줄 수 있다는 의미이다. 외부 서비스에 대해서 파일 설정보다 환경변수를 적극 활용하는 것은 &lt;code&gt;Build once, Run anywhere&lt;/code&gt;를 구현하기 위해 The Twelve Factor App에서 제시하는 하나의 전략이라고 할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Twelve-Factor App에서는 설정을 환경 변수(environment variables)에 저장한다. 환경변수를 사용하면 코드 수정 없이 설정을 쉽게 변경할 수 있다. 설정 파일과는 달리 실수로 저장소에 설정을 포함시킬 가능성도 낮다. 나아가 독자적인 형식의 설정 파일이나 자바 시스템 프로퍼티와 같은 설정 형식과 달리 환경변수는 언어나 OS에 의존하지 않는 표준이다. &lt;a href="http://the-twelve-factor-app.herokuapp.com/config"&gt;The Twelve-Factor App - 설정&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;a name='정리'&gt;정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서는 루비 온 레일스 어플리케이션을 도커 이미지로 만드는 과정을 다루었다. 여기서 다룬 어플리케이션은 &lt;code&gt;rails new&lt;/code&gt;로 생성한 아무것도 없는 어플리케이션이긴 하지만 어플리케이션의 복잡도에 따라서 어플리케이션을 배포하는 방식 자체가 달라지지는 않는다. 이 글에서는 도커로 어떻게 하면 어플리케이션을 이미지로 만들어낼 수 있는지, 그리고 도커를 사용함으로써 (좋은 의미에서건 나쁜 의미에서건) 발생하는 새로운 제약에 대해 어떻게 이해하고 대처해야하는 지 The Twelve Factor App의 관점에서 설명했다.&lt;/p&gt;

&lt;p&gt;이를 통해 이미지는 만들었다. 다음 글에서는 이제 이미지가 준비됐으니 이 이미지를 어떻게 실 서버에 배포하고 스케일 아웃이 가능한 지에 대해서 다룬다.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Docker Korea 스터디 그룹 두번째 모임</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-08-04-docker-korea-secord/"/>
    <id>http://blog.nacyot.com/articles/2014-08-04-docker-korea-secord/</id>
    <published>2014-08-04T15:15:03+00:00</published>
    <updated>2015-08-29T10:59:10+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/9A89h4Y.jpg' /&gt;&lt;p&gt;얼마 전 &amp;#39;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker_korea' rel='nofollow'&gt;도커 코리아&lt;/a&gt;&lt;/span&gt;&amp;#39;라는 이름으로 &lt;a href="http://blog.nacyot.com/articles/2014-07-26-docker-korea/"&gt;스터디를 진행한다는 이야기&lt;/a&gt;를 전한 바 있습니다. 그 후로 시간이 흘러 지난 8월 2일에 &lt;a href="http://onoffmix.com/event/31354"&gt;도커 코리아 두번째 모임&lt;/a&gt;을 가졌습니다. 이번 스터디는 시범적인 차원에서 공개적으로 진행되었습니다. 단 아직 정기적인 스터디 지원이 확정되지 않아, 이번 모임은 소정의 참가비와 부족한 부분은 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/remotty'&gt;리모티&lt;/a&gt;&lt;/span&gt; 재정의 지원으로 이루어졌습니다. 리모티 팀원들을 비롯해 총 16분이 참석해 자리를 빛내주셨습니다 :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;이 글에서는 스터디 그룹에서 공유한 내용들을 간략히 정리합니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커를-이용한-파이썬-모듈-배포하기'&gt;도커를 이용한 파이썬 모듈 배포하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37580971" width="600" height="440" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/litiblue/ss-37580971" title="도커를 이용한 파이썬 모듈 배포하기" target="_blank"&gt;도커를 이용한 파이썬 모듈 배포하기&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/litiblue" target="_blank"&gt;JunSeok Seo&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/RRT58hbDXNs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;먼저 Litiblue 님이 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker'&gt;Docker&lt;/a&gt;&lt;/span&gt;를 이용해 파이썬 모듈을 배포한 경험에 대해서 발표해주셨습니다. 이 발표에서는 도커에 대한 전반적인 소개와 일반적인 서버에 직접 어플리케이션을 배포하는 것과 그로 인해 생기는 문제점을 도커를 통해서 어떻게 해결할 수 있는 지에 대해서 이야기해주셨습니다. 예를 들어 Litiblue 님이 배포하고자 했던 파이선 어플리케이션에는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/apscheduler' rel='nofollow'&gt;APScheduler&lt;/a&gt;&lt;/span&gt;와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/rpyc' rel='nofollow'&gt;RPyC&lt;/a&gt;&lt;/span&gt;라는 라이브러리에 의존성이 있는데, 이러한 라이브러리들이 파이썬의 버전에 따라서 사용법이나 실행경로가 바뀌면서 생길 수 있는 있다고 합니다. 이러한 문제들을 도커를 통해서 어떻게 해결할 수 있는지 보여주셨습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커로-고스트-블로그-플랫폼-5분만에-설치하기'&gt;도커로 고스트 블로그 플랫폼 5분만에 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//slides.com/meoooh/setup-ghost-via-docker/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="600" height="445" src="//www.youtube.com/embed/MGXMRJP4LhQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;다음으로 Han 님께서 &amp;#39;도커로 고스트 블로그 플랫폼 5분만에 설치하기&amp;#39;를 발표해주셨습니다. 최근에 유행하는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/ghost' rel='nofollow'&gt;Ghost&lt;/a&gt;&lt;/span&gt;라고 하는 유명한 블로그 플랫폼이 있습니다만, 이 블로그 플랫폼을 도커를 써서 어떻게 배포할 수 있는 지에 대해서 다루고있습니다. 5분만에 배포하기라고 쓰고, 고스프 플랫폼 도커로 배포하면서 겪은 삽질기로 내용이 변모한 감이 없지 않아있었습니다만 :) 도커 파일 최적화, 이미지간 연결, .dokcerignore 파일의 사용법 등 도커를 사용하면서 필연적으로 궁금하게 되고, 활용해야만한 하는 많은 이야기들을 담고 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커(docker)-메트릭스-&amp;amp;-로그-수집'&gt;도커(Docker) 메트릭스 &amp;amp; 로그 수집&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37592250" width="600" height="440" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/ext/docker-37592250" title="도커(Docker) 메트릭스 &amp;amp; 로그 수집" target="_blank"&gt;도커(Docker) 메트릭스 &amp;amp; 로그 수집&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/ext" target="_blank"&gt;Daekwon Kim&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/eFPsz0oCLSs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;마지막 발표는 제가 &amp;#39;Docker와 로그 &amp;amp; 메트릭스 수집&amp;#39;이라는 주제로 발표를 했습니다. 로그 &amp;amp; 메트릭스 수집은 사실 새삼스럽게 나온 문제는 아닙니다만, 이러한 &amp;#39;기존의 문제&amp;#39;가 도커가 나오면서 어떻게 변해야하고, 어떤 방향으로 나아갈 것인지에 대해서 이야기했습니다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/elasticsearch'&gt;ElasticSearch&lt;/a&gt;&lt;/span&gt;와 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/kibana'&gt;Kibana&lt;/a&gt;&lt;/span&gt;, &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/graphite'&gt;Graphite&lt;/a&gt;&lt;/span&gt;와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/grafana' rel='nofollow'&gt;Grafana&lt;/a&gt;&lt;/span&gt;를 설치하고 로그 수집을 시연하는 거창한 데모를 준비했습니다만, 훌륭하게 실패하고 다행히 미리 준비해둔 이미지로 대체했습니다 ㅜ&lt;/p&gt;

&lt;p&gt;로그 수집과 메트릭스에 관한 이야기는 지금 제일 관심있는 주제인 관계로 이 블로그에서도 자주 이야기해나갈 생각입니다. 기회가 되면 더 보충해나가도록 하죠.&lt;/p&gt;

&lt;p&gt;Docker Korea 두번째 모임에서는 이와 같이 3가지 주제에 대해서 공유했습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='service-discovery-행아웃'&gt;Service Discovery 행아웃&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;오프라인 모임과 더불어 7월 30일에는 온라인 행아웃으로 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/service_discovery'&gt;service discovery&lt;/a&gt;&lt;/span&gt; 도구들에 대해서 이야기했습니다. Docker가 어플리케이션 배포의 복잡도를 확 낮춰주는 어플리케이션이라면 이렇게 배포가 되는 수많은 노드와 서비스들을 관리하는 게 그 다음으로 다뤄야할 주제입니다. 그런 이유로 Service Discovery는 현재 Docker와 함께 뜨거운 화두가 되고 있는 주제 중 하나입니다. 다들 아직 이러한 도구들에 대한 이해가 부족하다는 공감이 있어서 각자 한가지 씩 Service Discovery 도구들을 리뷰하는 시간을 가졌습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/nacyot/514b904f7ae569e801e4"&gt;https://gist.github.com/nacyot/514b904f7ae569e801e4&lt;/a&gt;&lt;/p&gt;

&lt;iframe src="//slides.com/subicura/coreos-study/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="//slides.com/changhoonjeong/docker-ambassador/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/jBK3T1-1QdI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;이 행아웃에서는 Seapy 님이 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker_ambassador_pattern' rel='nofollow'&gt;docker ambassador&lt;/a&gt;&lt;/span&gt; 패턴에 대해서 발표해주셨고, 그 다음으로 제가 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/consul'&gt;Consul&lt;/a&gt;&lt;/span&gt;에 대해서 발표했습니다. 마지막으로 Subicura 님이 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/coreos'&gt;CoreOS&lt;/a&gt;&lt;/span&gt;와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/etcd' rel='nofollow'&gt;etcd&lt;/a&gt;&lt;/span&gt;와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/fleet' rel='nofollow'&gt;fleet&lt;/a&gt;&lt;/span&gt;를 활용한 간단한 사용 예제를 보여주셨습니다.&lt;/p&gt;

&lt;p&gt;아직 확정된 바는 없습니다만, 아마 여기서 논의한 이야기를 각자 좀 더 발전 시켜 다음 모임에서 발표를 하게 되지 않을까 생각하고 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='정리'&gt;정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;지난 번 모임이후 진행된 사항을 정리해보았습니다.&lt;/p&gt;

&lt;p&gt;다다음주가 황금연휴(?)고, 격주 진행시 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/pycon' rel='nofollow'&gt;pycon&lt;/a&gt;&lt;/span&gt;과 겹치는 관계로 아마 다음 모임은 23일이 될 것으로 생각하고 있습니다. 아직 스터디 지원 문제나 고정된 장소가 확정되지 않은 상태이긴 한데, 아마 확정되는대로 조만간 세번째 모임도 공지를 할 예정입니다.&lt;/p&gt;

&lt;p&gt;모임에 참여해주신 모든 분들 다시 한 번 감사드립니다. 다들 어디 숨어계셨나 했더니 :) Docker Korea는 도커를 비롯해 클라우드나 서버 운영 전반에 관심있으신 분들 모두에게 열려있습니다. 특히 경험 공유나 주제 발표하시고 싶으신 분은 더더욱 우대합니다! 관심있으신 분들은 &lt;a href="http://forum.docker.co.kr/"&gt;포럼&lt;/a&gt;에 들러주시고 &lt;a href="http://forum.docker.co.kr/t/docker-korea/70"&gt;대화방&lt;/a&gt;에도 참여해주세요.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
