<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nacyot의 프로그래밍 이야기</title>
  <subtitle>Nacyot의 프로그래밍 이야기</subtitle>
  <id>http://blog.nacyot.com/</id>
  <link href="http://blog.nacyot.com/"/>
  <link href="http://blog.nacyot.com/feed.xml" rel="self"/>
  <updated>2015-06-12T21:05:00Z</updated>
  <author>
    <name>nacyot(Daekwon Kim)</name>
  </author>
  <entry>
    <title>엘라스틱서치(elasticsearch)에 한글 형태소 분석기 은전한잎(eunjeon) 적용하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-06-13-eunjeon-with-elasticsearch/"/>
    <id>http://blog.nacyot.com/articles/2015-06-13-eunjeon-with-elasticsearch/</id>
    <published>2015-06-12T21:05:00+00:00</published>
    <updated>2015-06-12T21:08:28+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;엘라스틱(elastic)에서 개발한 엘라스틱서치(elasticsearch)는 루씬 기반의 검색 서버이다. 동적으로 풀텍스트 검색을 하는 대신에 미리 인덱스를 해서 문장을 검색하기 때문에 매우 빠르게 원하는 결과를 찾을 수 있다. 설치도 간편하며 기본 설정으로 사용해도 충분히 강력하지만 기본적으로 한국어 분석을 지원하지 않는다. 예를 들어 전문 검색을 하고자 할 경우 &amp;quot;아버지가 방에 들어간다&amp;quot;라는 문장을 인덱스해도 &amp;quot;아버지&amp;quot;로는 검색이 안 되고 반드시 &amp;quot;아버지가&amp;quot;로 검색해야만 결과에 출력된다. 이는 엘라스틱서치의 기본 토크나이저가 공백이나 특수문자만으로 단어들을 분리하기 때문이다. 이러한 문제를 해결하기 위해서는 n-gram 분석이나, 형태소 분석과 같은 인덱스를 추가로 지원해야한다. 여기서는 일본어 형태소 분석기 mecab를 한국어에 맞춰 수정한 은전한잎(mecab-ko)을 엘라스틱서치에서 사용하는 방법에 대해서 다룬다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='tl;dr'&gt;TL;DR&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Docker를 사용해 한글 형태소 분석기가 적용된 엘라스틱서치를 바로 사용해볼 수 있다. 필요한 경우 (일반적으로 boot2docker 사용할 경우 사용하는 주소인) &lt;code&gt;192.168.59.103&lt;/code&gt; 대신 적절한 주소로 대체한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -p 9200:9200 nacyot/elasticsearch-korean:1.6.0
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XPUT http://192.168.59.103:9200/korean/ -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;settings&amp;quot;: {&amp;quot;index&amp;quot;:{&amp;quot;analysis&amp;quot;:{&amp;quot;analyzer&amp;quot;:{&amp;quot;korean&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;custom&amp;quot;,&amp;quot;tokenizer&amp;quot;:&amp;quot;mecab_ko_standard_tokenizer&amp;quot;}}}}}}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://192.168.59.103:9200/korean/_analyze?analyzer&lt;span class="o"&gt;=&lt;/span&gt;korean&lt;span class="se"&gt;\&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.tokens[] | {token: .token, type: .type}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c"&gt;# 분석 결과&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-13"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-25"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;INFLECT&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='설치하기'&gt;설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;엘라스틱서치에서 한글 형태소 분석기를 사용하려면 은전한잎을 설치할 필요가 있다. 다음 설치 방법은 우분투 14.04 운영체제에 오라클 자바 8 버전과 엘라스틱서치가 설치되었다는 것을 전제로 작성되었다. 은전한잎 플러그인은 엘라스틱서치 1.3 ~ 1.6(2015년 6월 현재 최신버전)에서 사용가능하다. 테스트에 사용한 버전은 1.6이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='은전한잎(mecab-ko)-설치'&gt;은전한잎(mecab-ko) 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 은전한잎을 설치한다. 은전한잎은 일본어 형태소 분석기 mecab를 한국어에 맞게 수정한 프로젝트로 mecab-ko라는 프로젝트 이름을 가지고 있다. 최신버전 및 자세한 내용은 &lt;a href="https://bitbucket.org/eunjeon/mecab-ko"&gt;저장소&lt;/a&gt;를 참고하기 바란다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 의존성 설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;automake&lt;/span&gt; &lt;span class="n"&gt;perl&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# mecab-ko 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvf&lt;/span&gt; &lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.9.2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="cp"&gt;# 빌드 및 설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.9.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ldconfig&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='mecab-ko-dic-설치'&gt;mecab-ko-dic 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음으로 형태소 분석을 위한 사전을 설치한다. 자세한 내용은 &lt;a href="https://bitbucket.org/eunjeon/mecab-ko-dic/"&gt;저장소&lt;/a&gt;를 참조하기 바란다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# mecab-ko-dic 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.0.0-20150517.tar.gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvf&lt;/span&gt; &lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.6.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;20140814.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="cp"&gt;# 빌드 및 설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.6.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20140814&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;autogen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='mecab-java-설치'&gt;mecab-java 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음므로 tagger와 lexicon의 메모리 누수가 해결된 mecab-java 버전을 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 환경 변수 설정&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;JAVA_TOOL_OPTIONS&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# mecab-java 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//mecab.googlecode.com/files/mecab-java-0.996.tar.gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvf&lt;/span&gt; &lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.996&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="cp"&gt;# 빌드 및 설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.996&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;|/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;Makefile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="cp"&gt;# 빌드된 파일 이동(elasticsearch 실행시 참조해주어야 함)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="n"&gt;libMeCab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='엘라스틱서치-mecab-ko-플러그인-설치'&gt;엘라스틱서치 mecab-ko 플러그인 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;마지막으로 엘라스틱서치에서 사용할 수 있도록 mecab-ko를 설치한다. &lt;code&gt;&amp;lt;ELASTICSEARCH_PATH&amp;gt;&lt;/code&gt;에는 엘라스틱서치가 설치된 경로를 넣어준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nt"&gt;&amp;lt;ELASTICSEARCH_PATH&amp;gt;&lt;/span&gt;/bin/plugin --install analysis-mecab-ko-0.17.0 --url https://bitbucket.org/eunjeon/mecab-ko-lucene-analyzer/downloads/elasticsearch-analysis-mecab-ko-0.17.0.zip
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='형태소-분석을-통한-한국어-문장-검색'&gt;형태소 분석을 통한 한국어 문장 검색&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 엘라스틱서치를 앞서 빌드한 &lt;code&gt;mecab-java&lt;/code&gt;를 참조시켜서 실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;elasticsearch -Djava.library.path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/lib
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;한글 분석기가 정상적으로 작동하는 지 확인하기 위해 우선 기본 분석기를 통해서 문장을 분석해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://0.0.0.0:9200/_analyze?pretty&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c"&gt;# 분석 결과&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;tokens&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 0,
&lt;/span&gt;&lt;span id="line-10"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 4,
&lt;/span&gt;&lt;span id="line-11"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-12"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 1
&lt;/span&gt;&lt;span id="line-13"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-14"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-16"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 5,
&lt;/span&gt;&lt;span id="line-17"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 7,
&lt;/span&gt;&lt;span id="line-18"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-19"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 2
&lt;/span&gt;&lt;span id="line-20"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-23"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 8,
&lt;/span&gt;&lt;span id="line-24"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 12,
&lt;/span&gt;&lt;span id="line-25"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-26"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 3
&lt;/span&gt;&lt;span id="line-27"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에 얘기한대로 문장이 &amp;quot;아버지가&amp;quot; 통째로 분석된다. 이렇게 되면 &amp;quot;아버지&amp;quot;로는 이 문장을 검색할 수 없다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 데이터 입력&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XPUT&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/default/text/1&amp;#39; -d &amp;#39;{&amp;quot;text&amp;quot;: &amp;quot;아버지가 방에 들어간다&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# &amp;#39;아버지&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XGET&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/default/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="s"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="cp"&gt;# &amp;#39;아버지가&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XGET&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/default/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지가&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;  &lt;span class="s"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;  &lt;span class="s"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="s"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;      &lt;span class="s"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;      &lt;span class="s"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;      &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;      &lt;span class="s"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;      &lt;span class="s"&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;        &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;아버지가 방에 들어간다&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 &lt;code&gt;korean&lt;/code&gt;이라는 이름으로 &lt;code&gt;mecab_ko_standard_tokenizer&lt;/code&gt;가 적용된 인덱스를 생성한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XPUT http://0.0.0.0:9200/korean/ -d &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s1"&gt;  &amp;quot;settings&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="s1"&gt;    &amp;quot;index&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="s1"&gt;      &amp;quot;analysis&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="s1"&gt;        &amp;quot;analyzer&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="s1"&gt;          &amp;quot;korean&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="s1"&gt;            &amp;quot;type&amp;quot;:&amp;quot;custom&amp;quot;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="s1"&gt;            &amp;quot;tokenizer&amp;quot;:&amp;quot;mecab_ko_standard_tokenizer&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="s1"&gt;          }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="s1"&gt;        }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="s1"&gt;  },&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="s1"&gt;  &amp;quot;mappings&amp;quot;: {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="s1"&gt;    &amp;quot;text&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="s1"&gt;      &amp;quot;properties&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="s1"&gt;        &amp;quot;text&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="s1"&gt;          &amp;quot;type&amp;quot; : &amp;quot;string&amp;quot;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="s1"&gt;          &amp;quot;analyzer&amp;quot;: &amp;quot;korean&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="s1"&gt;        }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="s1"&gt;  }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 인덱스를 통해서 한국어 문장을 분석해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://0.0.0.0:9200/korean/_analyze?analyzer&lt;span class="o"&gt;=&lt;/span&gt;korean&lt;span class="se"&gt;\&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.tokens[] | {token: .token, type: .type}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-13"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;INFLECT&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 &amp;quot;아버지&amp;quot;나 &amp;quot;방&amp;quot;이 명사로 분석된 것을 알 수 있다. 이렇게 인덱스가 되면 정상적으로 검색이 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 데이터 입력&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XPUT&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/korean/text/1&amp;#39; -d &amp;#39;{&amp;quot;text&amp;quot;: &amp;quot;아버지가 방에 들어간다&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# &amp;#39;아버지&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XGET&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:9200/korean/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="s"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;      &lt;span class="s"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;korean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;      &lt;span class="s"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;      &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;      &lt;span class="s"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;      &lt;span class="s"&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;        &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;아버지가 방에 들어간다&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞서 확인한 분석 결과대로 검색이 되는 것을 알 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;일반적으로 동적으로 풀텍스트 서치를 하는 경우 원하는 결과가 검색될 가능성은 높지만, 매우 비효율적이고 검색 대상이 많아질수록 느려진다. 반면에 이른바 검색엔진으로 분류되는 도구들은 미리 텍스트를 분석해 인덱스를 만들기 때문에 매우 효율적으로 검색이 가능하다. 단, 인덱스를 의도한대로 만들어야만 원하는 검색결과를 얻을 수 있다. 앞서 살펴보았듯이 한글 문장을 검색하고자 한다면, 적절히 형태소 분석을 통한 한글 인덱스와 n-gram 인덱스를 만들어줄 필요가 있다. 엘라스틱서치에서는 analyzer와 mapping을 통해서 각 인덱스와 타입들에 대해서 섬세하고 풍부한 인덱스 기능을 지원하고 있다. 이러한 기능들을 잘 활용한다면 의도한 대로 검색 결과를 얻을 수 있을 것이다.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>주피터(Jupyter) 노트북과 자바스크립트 환경 이해하기 - 주피터 위에서 d3.js를 활용한 시각화</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-05-21-d3js-in-jupyter/"/>
    <id>http://blog.nacyot.com/articles/2015-05-21-d3js-in-jupyter/</id>
    <published>2015-05-20T23:45:00+00:00</published>
    <updated>2015-06-12T21:08:28+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;기존의 아이파이썬(IPython)에서 이제 본격적으로 주피터 프로젝트로 옮겨가는 과정이 한창 진행중이다. 주피터의 핵심에 대해서는 &lt;strong&gt;&lt;a href="http://blog.nacyot.com/articles/2015-05-08-jupyter-multiple-pythons/"&gt;주피터 다중 커널 개념 이해하기&lt;/a&gt;&lt;/strong&gt;에서 이미 다루었듯이, 파이썬을 비롯한 다양한 언어의 커널을 지원한다는 데 있다. 맥락은 조금 다르지만, 아이파이썬은 이미 훌륭한 자바스크립트 실행환경에서 작동한다는 점에서 주피터 이전에도 이미 멀티 커널을 기본적으로 지원하고 있었다고 할 수 있다. 이 글에서는 이러한 기능을 활용해 주피터 위에서 자바스크립트 코드를 작성 및 실행하고, d3.js 라이브러리를 통해 시각화를 하는 방법에 대해 간단히 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#45432;&amp;#53944;&amp;#48513;-&amp;#47564;&amp;#46308;&amp;#44592;'&gt;&amp;#45432;&amp;#53944;&amp;#48513; &amp;#47564;&amp;#46308;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#45432;&amp;#53944;&amp;#48513;-&amp;#47564;&amp;#46308;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;먼저 주피터를 실행하고 Python3 커널로 노트북을 만든다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/tJdRdHAm.png" alt="Python3 커널 노트북 만들기"&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a name='&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#47588;&amp;#51649;'&gt;&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944; &amp;#47588;&amp;#51649;&lt;a class="anchor-link" href="#&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#47588;&amp;#51649;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;주피터 노트북에서는 매직 커맨드를 통해 단순히 파이썬 코드를 실행시키는 것 이외에도 다양한 작업을 수행할 수 있도록 도와준다. 이러한 매직 커맨드들은 언어 커널에 정의되어 있으면 파이썬 커널에서는 이를 위해 &lt;code&gt;%%&lt;/code&gt;를 앞에 붙여서 실행한다. 예를 들어 &lt;code&gt;%%html&lt;/code&gt; 매직을 사용하면 html 코드를 직접 결과 블록에 삽입할 수 있다. &lt;code&gt;%%html&lt;/code&gt;을 첫 줄에 작성하고, 아래부터는 html코드를 작성한다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;68번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;html&lt;/span&gt;

&amp;lt;style&amp;gt;
.hello-world{
    border: 1px solid black; 
    width: 300px; 
    height: 50px; 
    font-size: 2em; 
    padding: 0.3em;
}
&amp;lt;/style&amp;gt;

&amp;lt;div class=&amp;#39;hello-world&amp;#39;&amp;gt;
Hello ,html magic!
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_html rendered_html output_subarea "&gt;

&lt;style&gt;
.hello-world{
    border: 1px solid black; 
    width: 300px; 
    height: 50px; 
    font-size: 2em; 
    padding: 0.3em;
}
&lt;/style&gt;

&lt;div class='hello-world'&gt;
Hello ,html magic!
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;위와 같이 html 코드를 바로 사용할 수 있음을 알 수 있다. 더욱 편리한 점은 주피터의 기본 에디터 &lt;a href="http://codemirror.net"&gt;CodeMirror&lt;/a&gt;는 다양한 언어를 지원하기 있어서, 주피터는 이를 통해 자동적으로 HTML 문법을 지원해준다.&lt;/p&gt;
&lt;p&gt;이와 마찬가지로 자바스크립트 코드를 실행할 수 있도록 &lt;code&gt;%%javascript&lt;/code&gt; 매직도 지원하고 있다. 여기서는 먼저 현재 주피터 셀의 결과 요소를 얻어올 수 있도록 헬퍼를 작성해서 사용한다(이 헬퍼가 필요한 이유에 대해서는 뒤에서 자세히 설명한다).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;69번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

window.get_element = function(el){
    if(el){ $(el).html('') }
    return (el !== undefined) ? el[0] : $('script').last().parent()[0];
};

element = undefined;
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;70번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;Hello, js magic!&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

var target = get_element(element)
$(target).append('&lt;div class="hello-world"&gt;Hello, js magic!&lt;/div&gt;')
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;자바스크립트 블록도 정상적으로 출력이 된다. 주피터 노트북은 웹브라우저에서 작동하기 때문에 커널을 통해서 파이썬 코드를 평가하는 것은 물론, 이제 &lt;code&gt;%%html&lt;/code&gt;과 &lt;code&gt;%%javascript&lt;/code&gt; 매직을 통해서 자유롭게 웹 페이지의 요소들을 다룰 수 있다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#54764;&amp;#54140;-&amp;#54632;&amp;#49688;-&amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;'&gt;&amp;#54764;&amp;#54140; &amp;#54632;&amp;#49688; &amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#54764;&amp;#54140;-&amp;#54632;&amp;#49688;-&amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;앞선 예제에서는 &lt;code&gt;get_element&lt;/code&gt;라는 헬퍼 함수를 작성했다. 이 함수를 이해하기에 앞서 한가지 짚고 넘어갈 부분이 있다. 주피터 노트북의 &lt;code&gt;%%javascript&lt;/code&gt; 매직 안에서는 element라는 특별한 요소가 정의되어있다. 이 element에는 현재 주피터 노트북 셀의 결과 요소가 지정되어 있고, 이를 조작해서 현재 셀의 출력 결과에 대한 조작을 할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어서 jupyter notebook 위에서는 헬퍼 함수 없이도 다음과 같이 코드가 정상적으로 작동한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;I don&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/dNogkPrl.png" alt="element를 활용한 자바스크립트 평가"&gt;&lt;/p&gt;
&lt;p&gt;일반적이지 않은 매직 셀을 평범한 셀처럼 사용할 수 있게 해주는 흥미로운 부분이다. 하지만 주피터 노트북의 저장 포맷인 ipynb 파일에는 자바스크립트 매직 셀의 실행 결과가 저장되지는 않는다. 이는 단지 브라우저 위에서 실행될 뿐이다. ipynb에는 실행 결과가 저장되는 대신에 output 속성 아래에 다음과 같이 &lt;code&gt;application/javascript&lt;/code&gt; 형식으로 소스코드 자체가 저장된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "$(element).append('&amp;lt;div class="hello-world"&amp;gt;I don't need helper!&amp;lt;/div&amp;gt;')",

(이하 생략)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 저장된 ipynb 파일은 jupyter notebook이나 nbviewer에서 파일을 읽었을 때 이 스크립트를 그대로 실행하는 방식으로 결과를 복원해준다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;&lt;a name='jupyter-notebook&amp;#44284;-nbviewer-&amp;#47784;&amp;#46160;-&amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;'&gt;jupyter notebook&amp;#44284; nbviewer &amp;#47784;&amp;#46160; &amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#jupyter-notebook&amp;#44284;-nbviewer-&amp;#47784;&amp;#46160;-&amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;그런데 문제는 element에 있다. jupyter notebook에서는 코드를 직접 실행하거나, 저장된 파일을 읽어들여도 element 요소가 적절하게 해석된다. 하지만 nbviewer에서는 element 요소를 적절하게 해석하지 못 한다. 실제로 nbviewer에서 실행되는 코드를 살펴보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output_subarea output_javascript &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;I don&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&amp;#39;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nbviewer에서 ipynb 파일을 로드해서 코드를 열어보면 해당하는 output 위치에 이런 스크립트 태그가 들어가게 된다. 여기서는 element 요소가 없을 뿐더러, 더더욱 심각한 것은 이 스크립트 실행되고 있는 위치를 특정할 수 있는 어떠한 방법도 제공하지 않는다. 당연하지만 웹 브라우저는 &lt;code&gt;element&lt;/code&gt; 요소를 찾을 수 없다는 에러를 내며 아무것도 보여주지 않는다. 주피터 노트북을 직접 사용할 수 있는 환경이라면 무방하지만, 이렇게 되면 nbviewer를 통해서 정적으로 노트북을 공유하는 것이 불가능해진다. 위에서 정의한 헬퍼함수는 바로 이러한 문제를 해결하기 위해서 만든 임시방편이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수는 element가 있는 환경과 없는 환경을 나눠서 출력 결과를 반환한다. element가 있으면 이를 그대로 사용하고, 없으면 현재 실행되고 있는 스크립트 태그를 찾아 그 부모를 반환하다. 이는 이 코드가 실행될 때 정의되어있는 마지막 스크립트 요소가 해당 코드를 포함한 script 요소라는 점을 활용한 약간은 편법적인 방법이다(이 방법 외에 코드가 실행되는 위치를 특정하는 방법을 찾기 쉽지 않았다).&lt;/p&gt;
&lt;p&gt;이 헬퍼는 &lt;code&gt;get_element(element)&lt;/code&gt;와 같이 사용하며, 이를 통해서 노트북과 뷰어 양 쪽 모두를 지원할 수 있다. 마지막 줄에서는 nbviewer에서 element가 정의되어 있지 않다는 에러를 방지하기 위해서 전역 환경 element 변수에 undefined를 대입한다. 이제 nbviewer에서도 정상적으로 작동하는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/0Up02eWl.png" alt="nbviewer에서도 실행 결과가 정상적으로 출력된다!"&gt;&lt;/p&gt;
&lt;p&gt;이제 자바스크립트를 사용해 노트북을 작성할 수 있음은 물론, 이를 정적으로 공유도 할 수 있게 되었다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='require.js-&amp;#49324;&amp;#50857;&amp;#54644;-&amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196;-&amp;#50808;&amp;#48512;-&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;'&gt;require.js &amp;#49324;&amp;#50857;&amp;#54644; &amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196; &amp;#50808;&amp;#48512; &amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944; &amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#require.js-&amp;#49324;&amp;#50857;&amp;#54644;-&amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196;-&amp;#50808;&amp;#48512;-&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;조금 더 나아가보자. 주피터 노트북에는 기본적으로 몇 가지 외부 스크립트들이 포함되어 있다. jquery, moment, require.js가 기본 외부 스크립트이다. 이러한 스크립트는 프로필 설정을 통해서 미리 추가할 수도 있지만, &lt;code&gt;require.js&lt;/code&gt;가 눈에 띈다. 이를 사용하면 AMD 방식으로 동적으로 외부 스크립트를 읽어오는 것이 가능해진다. 이를 통해 미리 외부 스크립트들을 준비해야하는 번잡함과 전역 환경에 스크립트들을 로드해서 생길 수 있는 문제들을 피해갈 수 있다.&lt;/p&gt;
&lt;p&gt;이를 사용하려면 먼저 외부 스크립트 주소를 &lt;code&gt;require.config&lt;/code&gt;에 정의한다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;71번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://d3js.org/d3.v3.min&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

require.config({
    paths: {
        d3: "http://d3js.org/d3.v3.min"
    }
});
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;config에 정의한 d3 스크립트를 사용하려면 다음과 같이 require 함수에 사용하고자 하는 외부스크립트와 실행하려는 함수를 넘겨주면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;// 이제 이 안에서는,&lt;/span&gt;
  &lt;span class="c1"&gt;// d3.js 라이브러리를 사용해 코드를 작성할 수 있다&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;스크립트가 제대로 로드되었는지 확인해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;&lt;a name='&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752;-&amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688;-&amp;#54056;&amp;#53556;&amp;#51012;-&amp;#54876;&amp;#50857;&amp;#54644;-&amp;#52636;&amp;#47141;-&amp;#50948;&amp;#52824;-&amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;'&gt;&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752; &amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688; &amp;#54056;&amp;#53556;&amp;#51012; &amp;#54876;&amp;#50857;&amp;#54644; &amp;#52636;&amp;#47141; &amp;#50948;&amp;#52824; &amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752;-&amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688;-&amp;#54056;&amp;#53556;&amp;#51012;-&amp;#54876;&amp;#50857;&amp;#54644;-&amp;#52636;&amp;#47141;-&amp;#50948;&amp;#52824;-&amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;안타깝게도, 여기서도 위에서 이야기했던 것과 비슷한 문제가 하나 있다. require는 비동기적으로 실행되며 d3가 로드된 다음에서야 넘겨진 함수를 호출하도록 되어있다. 즉, d3가 로드되는 것을 기다리지 않고 다음 스크립트들을 실행해버린다. 주피터 노트북 위에서는 자바스크립트 실행에 대해서 독립된 영역이 사용되기 때문에 무방하지만, nbviewer에서는 위에서 보았듯이 모든 코드가 script 태그로 그냥 삽입된다. 따라서 그냥 실행하면 모든 변수가 전역에 노출되어 버린다. 따라서 target 변수는 실행하자마자 갱신되고, 이미 모든 코드가 실행되어버렸기 때문에 nbviewer에서 마지막에 호출된 &lt;code&gt;get_element(element)&lt;/code&gt;가 모든 셀의 출력 위치가 된다. 아래는 여러 셀에서 출력한 모든 그래프가 마지막 셀에 그려져 버린 경우이다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/5OU34Exl.png" alt="클로저를 사용하지 않은 경우"&gt;&lt;/p&gt;
&lt;p&gt;이 문제를 해결하려면 즉시실행함수 패턴과 클로저를 사용해서 미리 결과를 출력한 대상을 정의해두어야 한다. 즉 위에서 정의했던 코드는 다음과 같이 작성되어야 한다. 이를 통해서 함수로 각 셀의 실행 환경을 분리하고, &lt;code&gt;targetElement&lt;/code&gt;를 정확히 지정할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// 이 안에서 d3.js 라이브러리를 사용하고,&lt;/span&gt;
        &lt;span class="c1"&gt;// targetElement를 통해서 결과를 출력한다&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 모든 결과가 의도한 위치에서 출력될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/DuRRFgXl.png" alt="클로저를 사용한 경우"&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='d3.js&amp;#47484;-&amp;#54876;&amp;#50857;&amp;#54620;-&amp;#49884;&amp;#44033;&amp;#54868;'&gt;d3.js&amp;#47484; &amp;#54876;&amp;#50857;&amp;#54620; &amp;#49884;&amp;#44033;&amp;#54868;&lt;a class="anchor-link" href="#d3.js&amp;#47484;-&amp;#54876;&amp;#50857;&amp;#54620;-&amp;#49884;&amp;#44033;&amp;#54868;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;자잘한 문제들로 인해 조금 돌아서 왔다. 이제 d3.js를 실제로 사용해서 정말 간단하게 동그라미 몇 개를 실제로 그려보자.&lt;/p&gt;
&lt;p&gt;먼저 require를 통해서 정말로 d3 객체를 읽어오는 지 확인해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;72번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        $(targetElement).append($('&lt;p&gt;' + d3 + '&lt;/p&gt;'))
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;code&gt;[object Object]&lt;/code&gt;가 나오는 것을 봐서는 무언가 읽어온 것을 알 수 있다. 이번엔 d3.js의 &lt;code&gt;max&lt;/code&gt; 함수를 사용해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;73번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        $(targetElement).append($('&lt;p&gt;' + d3.max([3,91,82,34,19]) + '&lt;/p&gt;'))
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;결과값이 정상적으로 출력된다. 이를 통해 d3.js가 정상적으로 로드되었다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이제 동그라미를 그려보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;74번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;350px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;100px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;border&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1px solid lightgray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        
        &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;skyblue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;50px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        var data = [1, 2, 3, 4, 5, 6, 10]
        var svg = d3.select(targetElement).append('svg')
            .attr('width', '350px')
            .attr('height', '100px')
            .style('border', '1px solid lightgray');
        
        svg.selectAll('circle')
            .data(data)
            .enter()
            .append('circle')
            .style('fill', 'skyblue')
            .attr('cx', function(d, i){ return i * (350/data.length) + 15})
            .attr('cy', '50px')
            .attr('r', function(d){ return d * 3})
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;정말 그냥 데이터 배열을 통해서 생성한 동그라미다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#44208;&amp;#47200;'&gt;&amp;#44208;&amp;#47200;&lt;a class="anchor-link" href="#&amp;#44208;&amp;#47200;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;이를 통해 자바스크립트와 d3.js를 활용해(다른 라이브러리 어떤 것이라도 가능하다) 노트북을 작성할 수 있다. 아직 nbviewer에서는 이런 부분에 대한 지원이 약한 편인데(앞으로 지원 여부도 명확하지 않다), 약간의 편법을 통해서 피해갈 수 있다. 아래 링크들은 실제로 이러한 방식을 사용해서 만들어본 몇 가지 예제들이다. 모두 nbviewer를 통해서 웹에서 직접 확인해볼 수 있다. 심지어(?) 지금 읽고 있는 글도 nbviewer에서 직접 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/nacyot/blog.nacyot.com-source/blob/master/source/iruby/d3js-in-jupyter.ipynb"&gt;D3.js in Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/2abc5e8c80c3916500ba"&gt;Rounded Donut Chart 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/e868d09bb6434d9c76c4"&gt;Line Graph Iterations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/c0190709f56024eb516e"&gt;D3.js 5장, 6장 예제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>launchctl을 사용한 맥 OSX에서 서비스 등록하기 - 주피터(Jupyter, IPython &gt;= 3) 노트북 서비스 등록 예제</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-05-13-jupyter-as-a-service/"/>
    <id>http://blog.nacyot.com/articles/2015-05-13-jupyter-as-a-service/</id>
    <published>2015-05-13T01:13:00+00:00</published>
    <updated>2015-06-12T21:08:28+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;아주 자주 사용하는 프로그램은 컴퓨터가 켜져있으면 어김없이 실행된다. 그래서 사용자들은 보통 이러한 프로그램을 시작 프로그램에 등록해서 사용하곤 한다. 이러한 프로그램이 백그라운드 작업을 하는 프로그램이거나 서버 프로그램이라면 매번 터미널을 열어서 실행한다는 것이 여간 번거로운 일이 아닐 것이다. 맥 OSX에서도 이와 같은 상황을 겪을 수 있는데, 적절히 커스텀 서비스를 등록해 이러한 번거로움을 피해갈 수 있다. 이 글에서는 &lt;a href="http://www.jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;을 예제로 OSX 서비스 등록과 간단한 조작법에 대해서 살펴본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='jupyter-notebook-서비스-등록-예제'&gt;Jupyter Notebook 서비스 등록 예제&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서는 Jupyter(IPython) Notebook을 예제로 소개한다. IPython은 파이썬 REPL의 확장으로 웹 기반의 노트북을 지원한다. 이는 서버로 작동하는데, 데스크탑에서 사용하는 경우 매번 서버를 실행해줘야하는 번거로움이 있다. 여기서는 로컬 환경에서 실행되는 Jupyter Notebook을 서비스로 만들어서 항상 &lt;code&gt;http://localhost:8888&lt;/code&gt;로 접근 가능하도록 만든다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='jupyter-notebook'&gt;Jupyter Notebook&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 Jupyter Notebook을 사용가능한 환경을 준비한다(기본적으로 설치된 파이썬을 이용하거나 필요하면 &lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt; 등을 이용해 적절한 환경을 구축한다. 파이썬 &amp;gt; 3, 아이파이썬 &amp;gt; 3를 추천한다). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install zeromq
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install ipython&lt;span class="o"&gt;[&lt;/span&gt;notebook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.061 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Using MathJax from CDN: https://cdn.mathjax.org/mathjax/latest/MathJax.js
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.117 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Serving notebooks from &lt;span class="nb"&gt;local &lt;/span&gt;directory: /Users/toto/Library/LaunchAgents
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; 0 active kernels
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; The IPython Notebook is running at: http://localhost:8888/
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Use Control-C to stop this server and shut down all kernels &lt;span class="o"&gt;(&lt;/span&gt;twice to skip confirmation&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code&gt;localhost:8888&lt;/code&gt;로 노트북 서버에 접근가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/rbIGYXi.png" alt="Jupyter(IPython) Notebook"&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name='launchagent-서비스-파일-준비하기'&gt;LaunchAgent 서비스 파일 준비하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 &lt;code&gt;~/Library&lt;/code&gt; 디렉터리 아래에 &lt;code&gt;LaunchAgents&lt;/code&gt; 디렉터리가 있는 지 확인한다. 그리고 &lt;code&gt;com.jupyter.server.plist&lt;/code&gt; 파일을 생성해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p ~/Library/LaunchAgents/
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;touch com.jupyter-python3.server.plist
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;com.jupyter.server.plist&lt;/code&gt; 파일에 다음과 같이 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;    &lt;span class="nt"&gt;&amp;lt;true&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    &lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.jupyter.server&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;    &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/your/ipython/path&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;notebook&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--ip=0.0.0.0&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--port=8888&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--notebook-dir=/your/notebook/path&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;  &lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 설정에서 &lt;code&gt;/your/ipython/path&lt;/code&gt;와 &lt;code&gt;/your/notebook/path&lt;/code&gt;는 직접 자신이 사용하는 디렉터리로 지정해야한다. &lt;code&gt;/your/ipython/path&lt;/code&gt;는 &lt;code&gt;which ipython&lt;/code&gt; 명령어로 위치를 확인할 수 있고, &lt;code&gt;your/notebook/path&lt;/code&gt;는 앞으로 작성하게 될 노트북을 디렉터리를 원하는 곳에 생성하고 그 경로를 지정해준다.&lt;/p&gt;

&lt;p&gt;다음으로 서비스를 등록(load)한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl load ~/Library/LaunchAgents/com.jupyter.server.plist
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;단, launchctl은 tmux와 같은 터미널 멀티플렉서 환경에서는 정상적으로 실행되지 않는 경우가 있으니, 기본 터미널에서 사용하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기까지 정상적으로 설정했다면 이제 시스템이 실행될 때 자동적으로 서비스를 실행할 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='서비스-실행하기'&gt;서비스 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl start com.jupyter.server
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 설정의 경우, &lt;code&gt;RunAtLoad&lt;/code&gt; 키를 통해서 로드 시에 서비스를 자동 실행한다. 필요한 경우 launchctl을 통해서 직접 서비스를 실행할 수도 있다. 서비스를 실행하면 웹페이지가 직접 기본 브라우저로 실행된다. 그렇지 않다면 웹브라우저에서 &lt;code&gt;http://localhost:8888&lt;/code&gt;로 접근할 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='서비스-중지하기'&gt;서비스 중지하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl stop com.jupyter.server
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;launchctl을 통해서 서비스를 중지할 수 있다(자동으로 실행되지 않게하려면 unload 후 파일을 삭제해야한다). 단, 위와 같이 &lt;code&gt;KeepAlive&lt;/code&gt;가 설정되어 있으면 종료되도 다시 실행된다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서는 Jupyter Notebook을 서비스로 등록해서 사용하는 법에 대해서 살펴보았다. 하지만 서비스 파일의 기본적인 구조만 익혀둔다면, 이외에도 다양한 서비스들을 직접 정의해서 편리하게 사용할 수 있을 것이다. 더불어 OSX의 서비스는 실행 상태 유지(&lt;code&gt;&amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;&lt;/code&gt;), 로드 시 실행하기(&lt;code&gt;&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;&lt;/code&gt;), 반복 실행(&lt;code&gt;&amp;lt;key&amp;gt;StartInterval&amp;lt;/key&amp;gt;&lt;/code&gt;), 표준 출력(&lt;code&gt;&amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;&lt;/code&gt;), 표준 에러(&lt;code&gt;&amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;&lt;/code&gt;) 리다이렉트 등 더 다양한 설정들도 지원한다. 자세한 내용은 다음 페이지를 참조하기 바란다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html"&gt;Apple Developer - Daemons and Services Programming Guide&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>주피터(Jupyter, IPython &gt;= 3)의 다중 커널 개념 이해하기 - 파이썬2와 파이썬3 동시에 사용하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-05-08-jupyter-multiple-pythons/"/>
    <id>http://blog.nacyot.com/articles/2015-05-08-jupyter-multiple-pythons/</id>
    <published>2015-05-07T18:00:00+00:00</published>
    <updated>2015-06-12T21:08:28+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;아이파이썬 노트북(IPython Notebook)은 원래 파이썬 REPL의 확장으로 개발되었다. 원래 메시지 처리 부분을 분리한 현재의 아키텍처는 파이썬이라는 언어에 대해서 콘솔과 qt를 통한 GUI, 그리고 웹을 기반으로하는 노트북 등 클라이언트를 분리하기 위해서 도입되었다. 하지만 이는 동시에 언어 실행기의 확장 (즉, 파이썬 이외의 것들을 실행할 수 있는) 가능성도 열어주었다. 원래 IPython에서는 이런 부분에 대한 고려가 없었기 때문에 언어를 해석하는 커널은 기본적으로 한 가지만을 지원한다. 따라서 커널을 바꿀 수는 있지만, 커널을 바꾸려면 IPython Notebook 서버를 새로 실행해야만 했다. 반면에 주피터(IPython &amp;gt;= 3의 다른 이름)에서는 하나의 서버에서 다수의 커널을 바꿔가며 실행할 수 있다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='ipython2의-커널-설정-이해하기'&gt;IPython2의 커널 설정 이해하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 IPython2 버전의 노트북 서버는 다음과 같이 실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 명령어로 파이썬을 실행하면, 현재 버전의 인터프리터 커널로 IPython Notebook 서버가 실행된다. 즉, 파이썬 버전이 2.7.9라면, IPython Kenrel도 2.7.9가 되고, 3.4.2면 3.4.2가 된다. 실행이 가능하다면 다른 인터프리터에 대해서도 마찬가지이다.&lt;/p&gt;

&lt;p&gt;먼저 명령행에서 파이썬 버전을 확인해보고, 파이썬 노트북을 실행해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python --version
&lt;/span&gt;&lt;span id="line-2"&gt;Python 2.7.9
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install &lt;span class="s2"&gt;&amp;quot;ipython[notebook]&amp;lt;3&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;...
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;서버를 실행하면 &lt;code&gt;http://localhost:8888&lt;/code&gt;이나 출력되는 주소로 IPython Notebook에 접근할 수 있다. 새로운 노트북을 만들고, 노트북 위에서 파이썬 버전을 확인해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/vmEJyXA.png" alt="파이썬 버전 확인"&gt;&lt;/p&gt;

&lt;p&gt;명령행에서와 마찬가지로 2.7.9임을 확인할 수 있다. 만일 다른 언어나 다른 버전의 파이썬 커널을 실행하고자 한다면, 별도의 IPython Profile(설정들을 모아놓은 디렉터리)를 만들고 아래의 명령어로 해당하는 프로필을 적용할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook --profile &amp;lt;PROFILE&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아니면 커널 옵션을 직접 지정하는 방법도 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook --KernelManager.kernel_cmd&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;COMMAND&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, 하나의 서버에서는 다수의 커널을 지원하지 않기 때문에 매번 새로 실행하거나 별도의 서버를 실행해야하는 번거로움이 있었다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='왜-주피터(jupyter)가-되었을까?'&gt;왜 주피터(Jupyter)가 되었을까?&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;전술하였듯이, 원래 IPython에서 클라이언트와 파이썬 해석기 사이에 메시지를 중개하기 위한 ZeroMQ가 사용된 것은 사실 다양한 클라이언트를 지원하기 위해서였다. 그런데 이는 동시에 다양한 커널을 도입하게 되는 계기가 되기도 했다(&lt;a href="https://github.com/ipython/ipython/wiki/IPEP-25%3A-Registry-of-installed-kernels"&gt;IPEP 25&lt;/a&gt;). 이러한 요구사항은 IPython이라는 이름 대신 새로운 이름이 필요했던 가장 큰 이유라고 생각된다.&lt;/p&gt;

&lt;p&gt;Jupyter(IPython &amp;gt;= 3)에서는 하나의 노트북 서버에서 다수의 커널을 지원한다. 즉, 하나의 서버를 실행한 상태에서 커널을 선택해서 노트북을 작성할 수 있도록 구조가 변경되었다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='주피터(jupyter)의-기본-커널'&gt;주피터(Jupyter)의 기본 커널&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 여기에서는 OSX나 Linux 계열 운영체제에서 파이썬3를 사용하고 있다고 가정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python --version
&lt;/span&gt;&lt;span id="line-2"&gt;Python 3.4.2
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;최신 버전의 주피터를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install ipython&lt;span class="o"&gt;[&lt;/span&gt;notebook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython --version
&lt;/span&gt;&lt;span id="line-3"&gt;3.1.0
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;주피터에는 현재 사용가능한 kernel들을 확인할 수 있는 명령어가 추가되었다. 먼저 현재 사용할 수 있는 커널을 살펴보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython kernelspec list
&lt;/span&gt;&lt;span id="line-2"&gt;python kernelspec list
&lt;/span&gt;&lt;span id="line-3"&gt;Available kernels:
&lt;/span&gt;&lt;span id="line-4"&gt;  python3
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이를 통해서 현재 파이썬 버전이 사용가능하다는 것을 알 수 있다. 실제로 서버를 실행해서 확인해보면 새로운 노트북을 만들 때 Python 3만을 선택할 수 있을 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='다중-커널-개념-이해하기'&gt;다중 커널 개념 이해하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;앞서 이야기한 것처럼 주피터에서는 다중 커널을 하나의 노트북 서버에서 지원한다. 이러한 기능을 활성화하려면 적절히 커널 설정 파일을 추가해주어야한다. 과거에는 이러한 작업을 위해서 프로필 개념을 주로 사용했으나, 현재는 &lt;code&gt;~/.ipython&lt;/code&gt; 디렉터리 아래에 &lt;code&gt;kernels&lt;/code&gt;라는 디렉터리를 사용하는 것이 더 편리하다.&lt;/p&gt;

&lt;p&gt;여기에 가보면 처음에는 아무런 커널도 없음을 알 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기에 커널 설정이 없더라도, 주피터는 기본 커널(파이썬3)을 적절히 실행해준다. 명시적으로 커널 설정을 확인하고 수정하기 위해서는 다음 명령어를 사용한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython kernelspec install-self
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 명령어를 실행하면, &lt;code&gt;/usr/local/share/jupyter/kernels&lt;/code&gt;에 Python3 커널 설정을 추가할 것이다. 편의상 이를 ipython 설정 디렉터리 아래로 복사한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv /usr/local/share/jupyter/kernels/python3 &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;커널 디렉터리로 이동해보면 다음과 같은 파일들을 볼 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.ipython/kernels/python3
&lt;/span&gt;&lt;span id="line-2"&gt;kernel.json    logo-32x32.png logo-64x64.png
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;logo-*.png&lt;/code&gt; 이미지 파일은 해당하는 커널을 사용할 때 화면에 보여줄 이미지이다. 여기서 주목할 파일은 kernel.json이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat kernel.json
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt; &lt;span class="s2"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-4"&gt; &lt;span class="s2"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Python 3&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-5"&gt; &lt;span class="s2"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;/usr/bin/python3&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;IPython.kernel&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;langugae&lt;/code&gt;는 커널의 언어, &lt;code&gt;display_name&lt;/code&gt;은 화면에 보여줄 이름이라는 것을 쉽게 유추할 수 있다. 그리고 &lt;code&gt;argv&lt;/code&gt; 속성이 바로 파이썬 커널 서버를 실행하기 위한 명령어이다. 이 명령어를 그대로 복사해서 실행해보도록하자. &lt;code&gt;connection_file&lt;/code&gt;은 임의로 &lt;code&gt;python3.ipython&lt;/code&gt;이라고 붙였다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nl"&gt;NOTE:&lt;/span&gt; &lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;quit&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="n"&gt;sending&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="s"&gt;&amp;quot;quit&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;UNIX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;environments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/ipython/ipython/issues/2049&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;existing&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 커널 서버가 실행되고 명령을 기다린다. 맨 아래에서 설명하고 있듯이 &lt;code&gt;--existing python3.ipython&lt;/code&gt; 옵션을 통해서 ipython에서 이 커널 서버를 직접 사용하는 것도 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 다른 셸에서 실행&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;existing&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;IPython&lt;/span&gt; &lt;span class="n"&gt;Console&lt;/span&gt; &lt;span class="mf"&gt;3.1.0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a name='다른-언어-커널-예제(ruby)'&gt;다른 언어 커널 예제(ruby)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;위의 예제는 사용하는 커널이 파이썬3이기 때문에 &lt;code&gt;ipython console&lt;/code&gt;을 그냥 사용하는 것과 어떻게 다른지 알 수 없다. 실제로 커널 서버가 작동하는 것을 보여주기 위해, 다음 예제에서는 IRuby가 설치되어있다고 가정한다.(IRuby에 대해서는 이전 글 &lt;a href="http://blog.nacyot.com/articles/2015-04-15-rorlab-jupyter-iruby-notebook/"&gt;IRuby Notebook&lt;/a&gt; 참조)&lt;/p&gt;

&lt;p&gt;IRuby를 위한 &lt;code&gt;kernel.json&lt;/code&gt;을 살펴본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels/ruby
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat kernel.json
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="s2"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iruby&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;kernel&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="s2"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;:     &lt;span class="s2"&gt;&amp;quot;ruby&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본적인 구조는 파이썬의 &lt;code&gt;kernel.json&lt;/code&gt;과 완전히 같다. 간단히 설명하자면 IRuby는 Jupyter와 소통하기 위한 커널 서버의 Ruby 구현체라고 할 수 있다. 앞서와 마찬가치로 커널 서버를 실행한다. 단, iruby 커널은 자동적으로 connection 파일을 생성하지 않으므로, 임시 파일을 미리 생성해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s1"&gt;  &amp;quot;stdin_port&amp;quot;: 57533, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="s1"&gt;  &amp;quot;ip&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="s1"&gt;  &amp;quot;control_port&amp;quot;: 40023, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="s1"&gt;  &amp;quot;hb_port&amp;quot;: 35724, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="s1"&gt;  &amp;quot;signature_scheme&amp;quot;: &amp;quot;hmac-sha256&amp;quot;, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="s1"&gt;  &amp;quot;key&amp;quot;: &amp;quot;29e39299-76c7-495f-be03-eb1722c25efe&amp;quot;, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="s1"&gt;  &amp;quot;shell_port&amp;quot;: 52952, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="s1"&gt;  &amp;quot;transport&amp;quot;: &amp;quot;tcp&amp;quot;, &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="s1"&gt;  &amp;quot;iopub_port&amp;quot;: 41730&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt; &amp;gt; ruby.ipython
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 IPython을 이 connection 파일로 실행하면, 루비 코드가 실행된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython console --existing ruby.ipython
&lt;/span&gt;&lt;span id="line-2"&gt;IPython Console 3.1.0
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;In &lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;: puts &lt;span class="s2"&gt;&amp;quot;puts is not python method!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;puts is not python method!
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 같이 어떤 원리로 커널(실행기)가 클라이언트가 실행되는 지를 이해하면, 다중 커널이 무엇을 의미하고 어떻게 설정할 수 있는 지도 어렵지 않게 이해할 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='주피터(jupyter)에서-파이썬2와-파이썬3-동시에-사용하기'&gt;주피터(Jupyter)에서 파이썬2와 파이썬3 동시에 사용하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;앞서서 살펴보았듯이 IPython에서는 IPython을 실행한 파이썬 버전을 우선적으로 사용한다. 이는 주피터에서도 마찬가지이다. 파이썬3를 사용하고 있다면 기본 커널은 파이썬3가 된다. 그렇다면 파이썬2를 사용하고자 한다면 어떻게 해야할까? 물론 파이썬2를 설치하고 pip로 ipython을 설치하고 notebook 서버를 실행하는 것도 방법이긴 하다. 하지만 앞서 다중 커널에 대해서 배웠으니, 여기서는 이를 활용해보도록 하자.&lt;/p&gt;

&lt;p&gt;다시 한 번 되새겨보자. 커널은 노트북 서버나 클라이언트와는 분리되어있다. 따라서 커널이 파이썬2건 파이썬3건 노트북 서버나 클라이언트는 전혀 신경쓰지 않는다. 단지 기본적으로 실행되는 파이썬은 IPython이 실행되는 파이썬을 사용하도록 설정되어있을 뿐이다.&lt;/p&gt;

&lt;p&gt;여기서는 pyenv와 파이썬3를 사용한다고 가정하고 앞서 보았던 파이썬3의 &lt;code&gt;kernel.json&lt;/code&gt; 파일을 사용해 파이썬2 커널을 지원하도록 만들 것이다.&lt;/p&gt;

&lt;p&gt;먼저 Notebook Server를 실행해 파이썬 3만이 지원된다는 것을 확인해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv install 3.4.2
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv global 3.4.2
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pythen --version
&lt;/span&gt;&lt;span id="line-4"&gt;Python 3.4.2
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음 이미지와 같이 IPython Notebook 서버에서는 기본적으로 &lt;code&gt;Python 3&lt;/code&gt; 하나의 커널만을 지원하다. 기본 커널을 생성하고 이를 IPython 설정 디렉터리로 이동시킨다. 그리고 디렉터리 이름을 python2로 변경한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython kernelspec install-self
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv /usr/local/share/jupyter/kernels/python3 &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ipython locate&lt;span class="k"&gt;)&lt;/span&gt;/kernels
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv python3 python2
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python2
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 &lt;code&gt;pyenv&lt;/code&gt;를 통해서 파이썬 2를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv install 2.7.8
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;kernel.json&lt;/code&gt;을 다음과 같이 수정한다. &lt;USER&gt;은 적절히 변경한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt; &lt;span class="s2"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt; &lt;span class="s2"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt; &lt;span class="s2"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="s2"&gt;&amp;quot;/Users/&amp;lt;USER&amp;gt;/.pyenv/versions/2.7.8/bin/python2.7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="s2"&gt;&amp;quot;IPython.kernel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt; &lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;}
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이게 전부다. 다시 IPython Notebook을 실행시켜본다(이미 실행이 되어있다면 재실행하지 않아도 바로 적용된다).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 Notebook에 접속해서 새로운 문서를 만들려고 하면 다음과 같이 &amp;quot;Python 2&amp;quot;와 &amp;quot;Python 3&amp;quot; 두 선택지가 있는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/XhKnpqa.png" alt="노트북 생성시 커널 선택 - 파이썬2, 파이썬3"&gt;&lt;/p&gt;

&lt;p&gt;각각의 커널을 선택해서 실제로 작동하는 버전을 확인해보자. 먼저 파이썬2로 노트북을 만들고, 중간에 파이썬3로 커널을 교체한다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/N6Ftpak.png" alt="하나의 서버에서 다른 파이썬 버전 커널 사용하기"&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 파이썬2와 파이썬3 커널을 하나의 노트북 서버에서 사용 가능하다는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;주피터의 다중 커널 개념 지원은 매우 간단하고, 강력하다. IPython이 실행되는 파이썬 실행기에 종속되지 않기 때문에, 다른 언어들의 커널을 지원할 뿐만 아니라, 환경만 갖춰져 있다면 같은 언어의 다양한 버전에 대해서도 별도의 커널을 만들어 사용할 수 있다. 나아가 파이썬의 virtualenv와 결합하면 환경별로도 커널을 분리해 사용할 수 있다. 이와 같이 다중 커널 개념은 Jupyter의 핵심 개념이며, 이를 통해서 좀 더 자유롭게 Notebook 생활이 가능해질 것이다 &amp;gt;_&amp;lt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>[RORLab 발표] 주피터(Jupyter) - IRuby Notebook 보충</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-04-15-rorlab-jupyter-iruby-notebook/"/>
    <id>http://blog.nacyot.com/articles/2015-04-15-rorlab-jupyter-iruby-notebook/</id>
    <published>2015-04-15T01:30:00+00:00</published>
    <updated>2015-06-12T21:08:28+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;IPython은 Python REPL의 확장 구현이다. 0.12 버전부터 Notebook이라는 이름으로 웹 인터페이스를 지원하고 있다. 또한 파이썬 뿐만 아니라 다른 언어를 실행할 수 있는 다양한 커스텀 커널을 지원하고 있다. IRuby는 IPython의 루비(Ruby) 커널 구현체로 이를 사용해 IPython Notebook에서 Ruby 코드를 실행하고 문서를 작성하는 게 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/x794HK9.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;이 글은 2015년 4월 14일 RORLab에서 발표한 내용을 보충하기 위한 글로 IRuby 설치, 실행 및 발표 레퍼런스를 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='발표자료'&gt;발표자료&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://blog.nacyot.com/presentations/rorlab_jupyter"&gt;IRuby Notebook 원본 발표자료(reveal.js)&lt;/a&gt;&lt;/p&gt;

&lt;div style='max-width:550px'&gt;
&lt;script async class="speakerdeck-embed" data-id="ee397ca6231f4a7a9c2c73eda6e81525" data-ratio="1.29456384323641" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://speakerdeck.com/nacyot/jupyter-iruby-notebook"&gt;https://speakerdeck.com/nacyot/jupyter-iruby-notebook&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name='iruby-설치하기'&gt;IRuby 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;(어제 올렸던 처음으로 소개했던 설치법에는 몇 가지 문제가 있습니다. 유상민 님 지적으로 jsonschema 설치 및 SciRuby/iruby 설치 부분을 보충합니다. 유상민 님께 감사드립니다)&lt;/p&gt;

&lt;h3&gt;&lt;a name='zeromq-설치하기'&gt;ZeroMQ 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;ZeroMQ를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Mac OSX&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;zeromq&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libzmq3&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='python-환경-구축-및-ipython-설치'&gt;python 환경 구축 및 ipython 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;pyenv를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Mac OSX&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pyenv&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/yyuu/pyenv.git ~/.pyenv&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pyenv를 셸에 설정해준다. zsh을 사용한다면 &lt;code&gt;.bash_profile&lt;/code&gt;을 &lt;code&gt;.zshrc&lt;/code&gt;로 바꿔준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬 3.4.3을 설치하고, 사용하도록 설정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv install 3.4.3
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv global 3.4.3
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;관련 라이브러리와 IPython을 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install jinja2 tornado pyzmq jsonschema
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install ipython
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jupyter(IPython3)부터는 jsonschema 라이브러리도 추가로 필요하다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='iruby-설치'&gt;IRuby 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;IRuby 최신 버전은 gem으로 설치할 수 있다. 여기서는 루비 환경은 구축되어있다고 가정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gem install specific_install
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gem specific_install -l https://github.com/SciRuby/iruby -b master
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c"&gt;# rbenv 사용자만&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rbenv rehash
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code&gt;specific_install&lt;/code&gt;을 사용할 필요가 있는데, 이는 현재 최신 &lt;code&gt;iruby&lt;/code&gt;가 &lt;code&gt;SciRuby&lt;/code&gt; 쪽으로 포크되어서 관리되고 있기 때문이다. 그냥 &lt;code&gt;gem install iruby&lt;/code&gt;하게 되면 minad/iruby가 설치되는데 이는 jupyter와 호환성이 없다. (좀 더 자세한 내용은 &lt;a href="https://www.facebook.com/groups/rubyonrailskorea/permalink/830114680390964/"&gt;RORLab&lt;/a&gt;에서 유상민 님이 좀 더 자세히 이야기해주셨습니다. &lt;code&gt;specific_install&lt;/code&gt;로 설치 시 몇 가지 경고가 출력되는데 설치하는 법도 다룹니다.)&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;code&gt;iruby&lt;/code&gt; 명령어가 설치되었는지 확인해본다. &lt;code&gt;iruby&lt;/code&gt; 명령어는 IPython3 이전에는 루비 커널로 IPython을 실행하는 래퍼였으며, 현재는 고유한 명령어들을 가지고 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;iruby --version
&lt;/span&gt;&lt;span id="line-2"&gt;0.1.13
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IPython3부터는 &lt;code&gt;~/.ipython/kernels&lt;/code&gt;에 등록된 커널 설정들을 사용한다. iruby가 정상적으로 설치되었다면 루비 커널을 등록한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# iruby 커널 등록&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;iruby&lt;/span&gt; &lt;span class="k"&gt;register&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래 명령어로 루비 커널이 추가되었는지 확인할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython kernelspec list
&lt;/span&gt;&lt;span id="line-2"&gt;  python2
&lt;/span&gt;&lt;span id="line-3"&gt;  bash
&lt;/span&gt;&lt;span id="line-4"&gt;  julia 0.3
&lt;/span&gt;&lt;span id="line-5"&gt;  ruby
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ruby가 있다면 정상적으로 커널이 등록된 것이다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='iruby-실행하기'&gt;IRuby 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;최신 버전(&amp;gt;=3)에서는 &lt;code&gt;iruby&lt;/code&gt;를 사용하지 않고 &lt;code&gt;ipython&lt;/code&gt;으로 실행해도 정상적으로 ruby 커널을 사용할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook --ip&lt;span class="o"&gt;=&lt;/span&gt;0.0.0.0 --notebook-dir &amp;lt;NOTEBOOKS_DIR&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 서버가 실행되면 &lt;code&gt;http://0.0.0.0:8888&lt;/code&gt;에 접속해본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/uhedvNL.png" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name='레퍼런스'&gt;레퍼런스&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;a name='iruby'&gt;IRuby&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SciRuby/iruby"&gt;SciRuby/iruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Handybook/irails/"&gt;Handybook/irails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='ipython/jupyter'&gt;IPython/Jupyter&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jupyter.org/"&gt;Project Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/fperez/1579699"&gt;IPython 0.0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.fperez.org/2012/01/ipython-notebook-historical.html"&gt;Fernando Perez - The IPython notebook: a historical retrospective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipython.org/ipython-doc/rel-0.11/whatsnew/version0.11.html"&gt;IPython 0.11 Release Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipython.org/ipython-doc/rel-0.12/whatsnew/version0.12.html"&gt;IPython 0.12 Release Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ipython.org/ipython-doc/dev/development/messaging.html"&gt;Ipython documentation - Messaging in IPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages"&gt;IPython wiki - IPython kernels for other languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www4.ncsu.edu/%7Ekimler/hi322/galmoons.html"&gt;Galileo&amp;#39;s Sidereus nuncius - Starry Messenger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/Python/comments/1q9tq7/what_is_the_big_deal_about_ipython_notebooks/"&gt;Reddit - What is the big deal about IPython Notebooks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/payne92/notebooks/blob/master/00%20Javascript%20In%20Notebooks.ipynb"&gt;Javascript Magic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://andrew.gibiansky.com/blog/ipython/ipython-kernels/"&gt;Andrew Gibiansky - Creating Language Kernels for IPython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='ipython-kernel-for-other-languages'&gt;IPython Kernel for other languages&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gibiansky/IHaskell"&gt;gibiansky/IHaskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/bash_kernel"&gt;takluyver/bash_kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaLang/IJulia.jl"&gt;JuliaLang/IJulia.jl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jeroenjanssens.com/2015/02/19/ibash-notebook.html"&gt;Jeroen Janssens - IBash Notebook‽&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='ipython-client'&gt;IPython Client&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ivanov/bipython"&gt;ivanov/bipython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/millejoh/emacs-ipython-notebook"&gt;millejoh/emacs-ipython-notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ivanov/vim-ipython"&gt;ivanov/vim-ipython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/pycharm/help/ipython-notebook-support.html"&gt;PyCharm - IPython Notebook Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='examples'&gt;Examples&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/c0190709f56024eb516e"&gt;D3 Notebook 예제(시각화 스터디)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/melund/ipython/blob/3.x/examples/Interactive%20Widgets/Index.ipynb"&gt;Interactive Widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/jupyter-inline-attachment-sample"&gt;InlineAttachment 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/euler-project"&gt;naycot/euler_project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nacyot.com/articles/2014-04-07-rspec-matchers/"&gt;루비(Ruby) 테스트 프레임워크 RSpec 2.14 매쳐&lt;/a&gt; &lt;a href="https://github.com/nacyot/blog.nacyot.com-source/blob/master/source/iruby/ruby_enumerable.ipynb"&gt;ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nacyot.com/articles/2014-04-19-ruby-enumerable"&gt;루비의 꽃, 열거자 Enumerable 모듈&lt;/a&gt; &lt;a href="https://github.com/nacyot/blog.nacyot.com-source/blob/master/source/iruby/rspec_matchers.ipynb"&gt;ipynb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style='border:1px solid gray;max-width:500px;padding:1.8em'&gt;
&lt;img src='http://i.imgur.com/ir6nP73.png' /&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;a name='active-essays-/-literate-programming'&gt;Active Essays / Literate Programming&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://web.archive.org/web/20060710213801/http://www.squeakland.org/whatis/a_essays.html"&gt;Active Essays - Alan Kay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vpri.org/pdf/tr2009002_active_essays.pdf"&gt;Active Essays on the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://acko.net/files/fullfrontal/fullfrontal/webglmath/online.html"&gt;Steven Wittens - Making WebGL Dance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://setosa.io/blog/2014/07/26/markov-chains/"&gt;Setosa blog - markov Chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome"&gt;Jiongster - Removing User Interface Complexity, or Why React is Awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://greensock.com/position-parameter"&gt;Greensock - Timeline Tip: Understanding the Position Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.literateprogramming.com/knuthweb.pdf"&gt;Donald E. Knuth - Literate Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www-cs-faculty.stanford.edu/%7Euno/programs.html"&gt;Knuth - Programs to Read&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://faq.ktug.org/faq/CWEB"&gt;구조적 문서화를 위한 CWEB 시스템(한국어 번역)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://faq.ktug.org/faq/LiterateProgramming"&gt;KTUGFaq - Literate Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/CWEB"&gt;Wikipedia - CWEB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Literate_programming"&gt;Wikipedia - Literate Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://freesearch.pe.kr/archives/3265"&gt;from &lt;strong&gt;future&lt;/strong&gt; import dream - knitr를 이용한 워드프래스 포스팅하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CuhsPl7JDvc"&gt;전희원 - R Markdown을 이용한 문학적 프로그래밍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/fperez/blog/blob/master/130418-Data-driven%20journalism.ipynb"&gt;Fernando Perez - &amp;quot;Literate computing&amp;quot; and computational reproducibility: IPython in the age of data-driven journalism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/docker_module.html"&gt;Ansible Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='blogging-by-ipython'&gt;Blogging by Ipython&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.fperez.org/2012/09/blogging-with-ipython-notebook.html"&gt;Fernando Perez - Blogging with the IPython notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/"&gt;Pythonic Perambulations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.boxnwhis.kr/2015/02/10/blogging_with_python.html"&gt;Box and Whisker - IPython Notebook으로 블로깅하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='etc'&gt;ETC&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/69448223"&gt;Eyeo 2013 - For example by Mike Bostock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chimera.labs.oreilly.com/books/1230000000345/"&gt;O&amp;#39;Reilly Atlas + jsbin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codemirror.net/"&gt;Codemirror - a versatile text editor implemented in JavaScript for the browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;Bokeh - Python interactive visualization library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>D3.js 기초 - select API와 enter() 이해하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-02-02-d3-selection/"/>
    <id>http://blog.nacyot.com/articles/2015-02-02-d3-selection/</id>
    <published>2015-02-04T06:02:00+00:00</published>
    <updated>2015-06-12T21:08:28+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://d3js.org/"&gt;D3JS&lt;/a&gt;에서는 조작하고자 하는 요소를 선택할 수 있는 select API를 제공한다. select API는 jquery의 select API와도 비슷하지만, D3에서는 selection 객체에 대해서 &lt;code&gt;data()&lt;/code&gt;를 통해 특정 데이터를 바인드하고, &lt;code&gt;enter()&lt;/code&gt;와 &lt;code&gt;exit()&lt;/code&gt;를 통해 데이터에 대응하는 객체를 다룰 수 있는 기능들을 제공한다. 이 글에서는 D3에서 이 select API를 통해서 어떻게 시각화를 &lt;strong&gt;시작&lt;/strong&gt;하는 지에 대해서 다룬다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='d3-기초-예제-:-데이터-바인드하고-요소-추가하기'&gt;D3 기초 예제 : 데이터 바인드하고 요소 추가하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 간단한 예제를 하나 살펴보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                 &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New paragraph!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 예제는 Interactive Data Visualization for the Web 5장에서 가져온 예제이다. 이 예제를 말로 풀어써보자면 &lt;code&gt;body&lt;/code&gt; 요소를 선택하고(1) 그 아래에서 &lt;code&gt;p&lt;/code&gt;요소를 전부 선택한다(2). 그리고 &lt;code&gt;dataset&lt;/code&gt;을 이 미리 선택한 selection 객체에 바인드한다(3). 그리고 &lt;code&gt;enter()&lt;/code&gt;를 통해서 &lt;code&gt;p&lt;/code&gt; 요소에 바인드가 되지 않는, 즉 대응하는 &lt;code&gt;p&lt;/code&gt; 요소가 없는 데이터에 대해 새로운 selection을 반환받는다(4). 다음으로 이렇게 선택된 요소들에 대해 실제로 &lt;code&gt;p&lt;/code&gt; 태그로 이루어진 문서 요소를 생성한다(5). 마지막이다. 이 새로운 &lt;code&gt;p&lt;/code&gt; 요소에 &amp;quot;New paragraph!&amp;quot;라는 내용을 쓴다(6).&lt;/p&gt;

&lt;p&gt;먼저 HTML 상에 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 요소가 하나도 없는 상태에서 이 코드를 실행했다면, 결과는 다음과 같을 것이다. (편의상 텍스트로 나타낸다.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 html 요소를 선택하는 (1)과, (1)에서 선택된 요소 아래에서 다시 요소를 선택하는 (2)에서 하는 일은 jquery와도 매우 비슷하고, 이해하기도 쉽다. 하지만 그 다음에 일어나는 일들은 D3에서 사용하는 고유의 데이터 처리 과정을 담고 있다. 이후의 과정에 대해서도 해설을 붙여보았지만, 예상컨데 D3를 따로 배워본 적이 없다면 이러한 접근은 다소 생소하게 느껴질 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='(1)~(2)-d3-select-api-:-시각화할-요소-선택하기'&gt;(1)~(2) D3 select API : 시각화할 요소 선택하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다시 하나하나의 과정을 좀 더 자세히 살펴보자.&lt;/p&gt;

&lt;p&gt;유심히 살펴 보면 (1), (2)에서 하는 일이, 사실은 jquery를 통해 하는 작업과 사실은 별로 비슷하지 않다. jquery를 사용할 때는 일반적으로 이미 어떤 요소가 있다는 것을 가정하고, 그 요소를 선택하기 위해서 select API를 사용한다. 그런데 앞서 위의 출력결과를 얻기 위해서는 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; &lt;strong&gt;&lt;em&gt;요소가 하나도 없는 상태에서 이 코드를 실행했다면&lt;/em&gt;&lt;/strong&gt;이라는 전제를 붙였다. 즉, 의도적으로 &lt;strong&gt;아무것도 선택하지 않았다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;D3에서는 일반적으로 메서드 체이닝 기법을 사용하는데, 이를 기반으로 생각해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 위 코드를 실행한 결과는 무엇을 반환할까? 개발자 도구를 통해서 이를 실행해보면 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/qaSyGYM.png" alt="selectAll 반환 결과"&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기서 알 수 있다시피 실제 반환값은 배열 비슷한 무언가가 넘어온다(단, 여기서 배열 안의 선택 결과 배열은 비어있다). 이는 엄밀히 말하면 배열이 아니라, d3에서 확장된 d3 selection 객체이다. 이에 대한 좀 더 자세한 내용은 &lt;a href="https://github.com/mbostock/d3/blob/master/src/selection/selection.js"&gt;d3js 소스코드&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;d3_select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d3_document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3_documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d3_selection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 54-58행에서는 여기서 &lt;code&gt;d3_select()&lt;/code&gt; 함수는 실제로는 sizzle 라이브러리를 통해서 요소를 찾고 이를 &lt;code&gt;d3_selection()&lt;/code&gt;으로 랩핑한 결과를 반환한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;d3_selection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nx"&gt;d3_subclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d3_selectionPrototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;d3_selection&lt;/code&gt;은 &lt;code&gt;d3_subclass&lt;/code&gt; 함수를 통해 객체를 확장한다. 대부분의 기능은 &lt;code&gt;/src/selection&lt;/code&gt; 아래의 코드를 import해서 구현된다.&lt;/p&gt;

&lt;p&gt;이를 통해서 select 혹은 selectAll을 통해서 반환되는 결과가 d3 selection 객체라는 것을 확인할 수 있었다. 단, 앞서 지적했듯이, 이 결과물 배열은 그 내용이 비어있다. (1)~(2)에서 하는 작업을 좀 더 쉽게 설명하자면, d3 라이브러리를 사용하기 위해 빈 d3 selection 객체를 만드는 과정이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;이에 대해서 API 문서를 확인해보자. 먼저, selectAll을 보면,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;d3.selectAll(selector)&lt;/p&gt;

&lt;p&gt;Selects all elements that match the specified selector. The elements will be selected in document traversal order (top-to-bottom). If no elements in the current document match the specified selector, returns the empty selection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;selector에 매치되는 요소가 없다면 빈 selection을 반환한다고 나와있다.&lt;/p&gt;

&lt;p&gt;그리고 select를 살펴보면,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;d3.select(selector)&lt;/p&gt;

&lt;p&gt;Selects the first element that matches the specified selector string, returning a single-element selection. If no elements in the current document match the specified selector, returns the empty selection. If multiple elements match the selector, only the first matching element (in document traversal order) will be selected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;마찬가지로 매치되지 않으면 빈 selection을 반환한다고 한다. 여기서 하나 중요한 사실을 알 수 있다. 지금 살펴보고 있는 전체 예제를 다시 확인해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                 &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New paragraph!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 (1)~(2)의 과정에서 반드시 &lt;code&gt;selectAll(&amp;quot;p&amp;quot;)&lt;/code&gt;를 사용할 필요는 없다. 여기까지 과정에서 실제로 선택되는 문서 요소는 존재하지 않기 때문에 사실은 빈 d3 selection 을 반환하며 어떤 표현이라도 이를 대체할 수 있다. 따라서, 아래 네 표현은 모두 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞선 예제의 (1)~(2)를 어떤 표현으로 바꾸더라도, 그 결과는 같을 것이다(좀 더 엄밀히 말하면 그 결과만 같은 것이다. 이들인 빈 selection이라는 것은 동일하지만 다른 부모 요소를 가진다). 중요한 것은 여기서 무엇을 선택했느냐가 아니라 빈 d3 selection 객체를 시작으로 다음 작업들이 이루어진다는 점이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='(3)~(4)-data()와-enter()-:-화면에-없는-데이터를-보여줄-준비하기'&gt;(3)~(4) data()와 enter() : 화면에 없는 데이터를 보여줄 준비하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(3)~(4)는 D3 고유의 과정이자 핵심적인 부분이라고 할 수 있다. (3)에서 d3 selection에 대해서 &lt;code&gt;data()&lt;/code&gt; 메서드를 통해 데이터를 빈 선택물에 연결지을 수 있다. 여기까지는 (화면 상에) 아무런 변화도 일어나지 않는다. &lt;code&gt;data()&lt;/code&gt;의 반환 결과에는 &lt;code&gt;enter()&lt;/code&gt;, &lt;code&gt;exit()&lt;/code&gt;라는 D3에서 사용하는 고유한 개념이자 메서드가 더해진다. &lt;code&gt;enter()&lt;/code&gt; 메서드는 d3 selection에 바인드된 데이터들 중에 아직 실제 문서 요소를 가지지 못 하는 것들을 찾아내서 가상의 객체로 만들어 반환해준다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/3nOL6Lv.png" alt="enter() 반환결과"&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기서 알 수 있다시피, 이 객체들에는 각각의 데이터 요소들이 연결되어있다. (5)에서는 &lt;code&gt;append()&lt;/code&gt;를 통해서 &lt;code&gt;enter()&lt;/code&gt;로 생성된 가상 요소들을 빈 d3 selection 요소의 부모 요소를 기준으로 해서(여기서는 (1)에서 선택한 &lt;code&gt;body&lt;/code&gt;가 되거나 지정하지 않았다면 html이 될 것이다) 실제 문서 요소로 생성한다. 여기서는 &amp;quot;p&amp;quot; 문서 요소로 생성이 되지만, p 요소는 기본적으로 보이는 내용이 없으므로 (6)에서 &lt;code&gt;text()&lt;/code&gt; 메서드를 통해서 각 요소마다 &amp;quot;New paragraph!&amp;quot;를 보여주도록 한다.&lt;/p&gt;

&lt;p&gt;여기까지가 D3 : 장대한 시각화의 서막이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='보충---select와-enter의-차이'&gt;보충 - select와 enter의 차이&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;한 가지 재미있는 사실을 짚고 넘어가자. 이번에는 HTML에 이러한 위 예제의 자바스크립트 코드를 실행하기 전에 세 개의 &amp;quot;p&amp;quot; 요소가 있다고 가정하자. body 아래의 HTML 코드는 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 상태에서 원래의 예제 코드를 실행시키면,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                 &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New paragraph!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 결과는 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;분명히 데이터의 요소는 5개인데, 문단은 2개밖에 출력되지 않았다. 이 결과가 의아하다면 &lt;code&gt;enter()&lt;/code&gt;를 이해하지 못 했기 때문이다. 먼저 &amp;quot;p&amp;quot; 요소가 하나도 없을 때 &lt;code&gt;enter()&lt;/code&gt;의 결과를 보자.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/4zVidIA.png" alt="p 요소가 없을 때 enter() 반환결과"&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 &amp;quot;p&amp;quot; 요소가 3개가 있을 때 &lt;code&gt;enter()&lt;/code&gt; 메서드의 결과를 살펴보자.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/vXWaKzy.png" alt="p 요소가 이미 있을 때 enter() 반환결과"&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;앞서 이야기했다시피 &lt;code&gt;enter()&lt;/code&gt;는 &lt;strong&gt;바인드된 데이터들 중에 아직 실제 문서 요소를 가지지 못 하는 것들을 찾아내서 가상의 객체로 만들어 반환해준다.&lt;/strong&gt; 따라서, 이미 &amp;quot;p&amp;quot; 요소가 있을 경우 &lt;code&gt;selectAll()&lt;/code&gt;의 결과는 더 이상 빈 d3 selection 객체가 아니라 이미 존재하는 p 요소 3개가 선택된 상태가 된다. 따라서 d3는 우선적으로 이 요소들에 데이터가 연결되어있다고 생각하고, 나머지 아직 연결된 문서 요소가 없는 데이터에 대해서만 가상의 객체를 생성한다. 결과적으로, 미리 존재하는 요소들은 무시된다.&lt;/p&gt;

&lt;p&gt;그렇다면 이미 존재하는 요소에 대해서 &lt;code&gt;enter()&lt;/code&gt; 메서드를 사용하면 이를 조작할 수 없다는 의미가 된다. 이 때는 &lt;code&gt;selectAll()&lt;/code&gt; 이후, 혹은 &lt;code&gt;data()&lt;/code&gt; 메서드로 데이터 바인드 이후 반환되는 결과를 바로 조작하면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;panagraph&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, 이 상태에서 데이터를 통해 문서 요소를 조작하기 위해서는 다음과 같이 할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 아래와 같은 결과를 얻을 수 있을 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;여러 d3 예제들을 살펴보게 되면 존재하지 않는 요소를 선택하고 데이터를 바인드하는 경우가 많다. 이런 예제를 보면 selectAll과 append에서 왜 굳이 같은 요소를 사용하는 지 의문이 들것이다. 이 글에서는 여기서 무슨 일이 벌어지고 있는 건지, 무엇을 선택해야하는 하는 건지에 대해서 다뤘다. 실제로 여기서하는 작업은 빈 d3 selection 객체를 선택하는 일이고, 여기에 데이터를 바인드하고 바인드된 데이터에 대한 시각적 요소를 생성한다. 이것이 빈 HTML에서 javascript만으로 시각화를 시작하는 기본적인 방법이다. 이를 이해하고 나면 좀 더 수월하게 시각화를 &lt;strong&gt;시작&lt;/strong&gt;할 수 있을 것이다.&lt;/p&gt;
</content>
  </entry>
</feed>
