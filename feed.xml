<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nacyot의 프로그래밍 이야기</title>
  <subtitle>Nacyot의 프로그래밍 이야기</subtitle>
  <id>http://blog.nacyot.com/</id>
  <link href="http://blog.nacyot.com/"/>
  <link href="http://blog.nacyot.com/feed.xml" rel="self"/>
  <updated>2014-04-05T18:20:32Z</updated>
  <author>
    <name>nacyot(Daekwon Kim)</name>
  </author>
  <entry>
    <title>이미지 기반 어플리케이션 배포 패러다임 Immutable Infrastructure</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-04-06-immutable-infrastructure/"/>
    <id>http://blog.nacyot.com/articles/2014-04-06-immutable-infrastructure/</id>
    <published>2014-04-05T18:20:32Z</published>
    <updated>2014-04-05T18:23:48+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;얼마 전 4월 2일에 &lt;a href="https://www.facebook.com/groups/programer.io/"&gt;프로그래머 그룹&lt;/a&gt;에서 Immutable Infrastructure을 주제로 발표했습니다. Immutable Infrastructure란 분명한 실체를 지칭하기보다는 한 번 설정하고 (거의) 변경하지 않는 이미지 기반의 어플리케이션 배포 패러다임을 뜻하는 단어입니다. 다수의 서버를 동적으로 관리하는 클라우드를 기반으로 어떻게 하면 좀 더 효과적이고 유연하게 배포할 수 있을가 하는 고민에서 나온 패러다임이라고 할 수 있습니다. 따라서 기존에 서버를 지속적으로 &amp;#39;관리&amp;#39;한다는 데서 벗어나 어떻게하면 서버를 잘 쓰고 버리는 지를 다룹니다. 지금까지는 AWS AMI를 통한 오토 스케일링에서 보듯이 이러한 패러다임이 현상적으로만 존재했는데, Heroku, Travis 등에서는 이러한 패러다임을 이미 적극 채용하고 있으며, 특히 Chef, Puppet, Docker, Vagrant, Packer, Serf와 같은 도구들은 Immutable Infrastructure라는 패러다임을 실제 어플리케이션 배포에 적용할 수 있도록 도와줍니다. 이 글에서는 발표자료와 관련된 관련된 리소스들을 소개합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/presentations/immutable_infrastructure"&gt;Immutable Infrastructure 발표 자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;Cloud&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://aws.amazon.com/"&gt;Amazon Web Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.clouddesignpattern.org/index.php/Main_Page"&gt;Cloud Design Pattern Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/kentamagawa/aws-cloud-design-pattenr-korean-cdp-seminar-in-korea"&gt;CDP 한국어 발표자료&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="[https://digitalocean.com/]"&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pearkes/tugboat"&gt;Tugboat Gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cookpad/rrrspec"&gt;RRRSpec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cookpad/rrrspec"&gt;Cookpad Blog : RRRSpec 한글 번역&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aws.amazon.com/cli/"&gt;AWS Command Line Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Immutable Infrastructure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://12factor.net/"&gt;The Twelve-Factor App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://travis-ci.org"&gt;Travis CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chadfowler.com/blog/2013/06/23/immutable-deployments/"&gt;Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/profyclub_ru/8-mitchell-hashimoto-hashicorp"&gt;itchell Hashimoto, HashiCorp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920026358.do"&gt;BlueGreeDeployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Configuration Management&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.getchef.com/chef/"&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.daum.net/detail/book.do?bookid=KOR9788994506890&amp;amp;amp;introCpID=YE"&gt;Chef Solo 입문 도서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matschaffer.github.io/knife-solo/"&gt;Knife Solo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://berkshelf.com/"&gt;Berfshelf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://serverspec.org/"&gt;ServerSpec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/naoya/circleci-serverspec/pull/1"&gt;Circleci Serverspec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=ruAdx8-1a5s"&gt;H3 2012 - Just Do IT, Chef 언제까지 손으로 일일이 할텐가?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Docker&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.docker.io/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.centurylinklabs.com/top-10-startups-built-on-docker/"&gt;Top 10 Startups Built on Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drone/drone"&gt;Drone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drone.io"&gt;Drone.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/progrium/dokku"&gt;Dokku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/modestjude/about-docker-in-gdg-seoul"&gt;About docker in GDG Seoul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nacyot.com/articles/2014-01-27-easy-deploy-with-docker/"&gt;도커(Docker) 튜토리얼 : 깐 김에 배포까지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/nacyot/8366310"&gt;Docker 치트 시트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/raccoonyy/docker-28358999"&gt;Docker 간단 가이드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deview.kr/2013/detail.nhn?topicSeq=45"&gt;Deview Lightweight Linux Container Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Vagrant&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mitchellh/vagrant-aws"&gt;Vagrant AWS Provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/smdahlen/vagrant-digitalocean"&gt;Vagrant Digital Ocean Provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fgrehm/docker-provider"&gt;Vagrant Docker Provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/kthcorp/h3-2012-vagrant"&gt;H3 2012 - 내컴에선 잘되던데? - vagrant로 서버와 동일한 개발환경 꾸미기 슬라이드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=BWHX7u5NEtE"&gt;H3 2012 - 내컴에선 잘되던데? - vagrant로 서버와 동일한 개발환경 꾸미기 영상&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920026358.do"&gt;Book Vagrant: Up and Running&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Packer&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.packer.io/"&gt;Packer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Serf&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.serfdom.io/"&gt;Serf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>쿡패드(Cookpad) 루비(ruby) 스타일 가이드</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-03-23-cookpad-ruby-styleguide/"/>
    <id>http://blog.nacyot.com/articles/2014-03-23-cookpad-ruby-styleguide/</id>
    <published>2014-03-23T10:40:00Z</published>
    <updated>2014-04-05T18:23:48+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;이 문서는 Cookpad의 &lt;a href="https://github.com/cookpad/styleguide"&gt;Ruby Style Guide&lt;/a&gt;를 &lt;a href="http://nacyot.com"&gt;nacyot&lt;/a&gt;이 한국어로 번역한 문서입니다. 번역된 문서는 &lt;a href="https://github.com/nacyot/styleguide"&gt;Github 저장소&lt;/a&gt;에서 관리되고 있으며 원본은 &lt;a href="https://github.com/cookpad/styleguide"&gt;여기&lt;/a&gt;에서 찾아볼 수 있습니다. 이 문서는 &lt;a href="http://creativecommons.org/licenses/by/3.0/"&gt;cc-by&lt;/a&gt; 라이센스를 따릅니다.&lt;/p&gt;



&lt;h1&gt;목차&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ruby-version"&gt;루비(Ruby) 버전&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indentation"&gt;들여쓰기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whitespaces"&gt;공백&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#empty-lines"&gt;빈 행&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#character-encoding-and-magic-comments"&gt;문자 인코딩과 매직 코멘트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#line-columns"&gt;한 줄의 글자수 제한&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#numbers"&gt;숫자&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strings"&gt;문자열&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regular-expressions"&gt;정규표현식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arrays"&gt;배열&lt;/a&gt;- &lt;a href="#hashes"&gt;해시&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operations"&gt;계산식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assignments"&gt;대입식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#control-structures"&gt;제어구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#method-calls"&gt;메소드 호출&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#begin-and-end"&gt;BEGIN과 END&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#module-and-class-definitions"&gt;모듈과 클래스 정의&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#method-definitions"&gt;메소드 정의&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variables"&gt;변수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;루비(Ruby) 스타일 가이드&lt;/h1&gt;

&lt;h2&gt;시작하며&lt;/h2&gt;

&lt;p&gt;이 문서는 주식회사 쿡패드(Cookpad)의 루비 코드 표준 스타일을 정의한 문서입니다.
이 문서에서는 최소한 실력을 갖춘 Ruby 프로그래머라면 누구라도 읽기 쉬운 코드가 되도록 가독성과 일관성에 무게를 둔 스타일을 정의하고 있습니다. &amp;#39;bad&amp;#39;가 붙어있는 예제는 사용해서는 안 되는 표현이란 의미보다 일관성을 위해 지양해야할 표현들입니다.&lt;/p&gt;

&lt;p&gt;&lt;a name="ruby-version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;루비(Ruby) 버전&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 루비 2.0 이상의 버전을 사용하는 프로젝트에서는 키워드 인수, 심볼 리터럴(&lt;code&gt;%i&lt;/code&gt;)을 비롯한 루비 2.0에서 추가된 기능을 적극 활용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="indentation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;들여쓰기&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 한 단계 들여쓰기는 스페이스 두 번을 사용한다. 들여쓰기로 탭을 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 메소드 체인이 졌을 때 마지막 메소드에 블록을 넘겨야한다면, 마지막 메소드를 받는 리시버를 별도의 로컬 변수에 대입하고 이 변수에 메소드를 호출하면서 블록을 넘겨준다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;posts = Post.joins(:user)
  .merge(User.paid)
  .where(created&lt;em&gt;at: target&lt;/em&gt;date)
posts.each do |post|
  next if stuff&lt;em&gt;ids.include?(post.user&lt;/em&gt;id)
  comment_count += post.comments.size
end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;posts = Post.joins(:user)
  .merge(User.paid)
  .where(created&lt;em&gt;at: target&lt;/em&gt;date).each do |post|
    next if stuff&lt;em&gt;ids.include?(post.user&lt;/em&gt;id)
    comment_count += post.comments.size
  end
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 식이 완결되지 않고 줄바꿈이 이루어질 때 줄바꿈된 줄부터는 이전의 행보다 한 단계 더 들여쓴다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;User.active.
  some&lt;em&gt;scope(foo).
  other&lt;/em&gt;scope(bar)&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;User.active.
some&lt;em&gt;scope(foo).
other&lt;/em&gt;scope(bar)
```&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="whitespaces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;공백&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 줄 마지막에 공백을 넣지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="empty-lines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;빈 행&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 파일 마지막에 빈 행을 넣지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="character-encoding-and-magic-comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;문자 인코딩과 매직 코멘트&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 특별한 이유가 없다면 인코딩은 UTF-8을 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 루비 2.0 부터 기본 인코딩이 UTF-8이므로 인코딩 지정을 위한 별도의 매직 코멘트는 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 매직 코멘트를 사용해야 할 때는 아래 형식을 사용한다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;coding: utf-8&lt;/h1&gt;

&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="line-columns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;한 줄의 글자수 제한&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 특별한 이유가 없다면 한 줄은 80자 이하로 작성한다. 이 때 전각 문자는 2글자로 취급한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 어떠한 경우에도 한 줄은 128자 이내로 작성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="numbers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;숫자&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 자리수가 큰 10진수 숫자 리터럴을 사용할 때는 읽기 좋게 3자리마다 밑줄을 넣는다.

&lt;ul&gt;
&lt;li&gt;예: &lt;code&gt;1_000_000.001_023&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 자리수가 큰 2진수나 16진수를 사용할 때는 읽기 좋게 4자리마다 밑줄을 넣는다.

&lt;ul&gt;
&lt;li&gt;예: &lt;code&gt;0xABCD_1234&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 16진수를 사용할 때는 알파벳 대소문자 어떤 것을 사용해도 무관하나 하나의 파일에서는 일관성을 지켜서 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 루비 2.1 이후 버전을 사용한다면 분수 표현은 &lt;code&gt;r&lt;/code&gt; 접미사를 사용한다.

&lt;ul&gt;
&lt;li&gt;예: &lt;code&gt;1/2r #=&amp;gt; (1/2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; Ruby 2.0.0 이전 버전을 사용한다면 분수 표현은 &lt;code&gt;Integer#quo&lt;/code&gt; 메소드를 사용한다.

&lt;ul&gt;
&lt;li&gt;예: &lt;code&gt;1.quo(2) #=&amp;gt; (1/2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; Ruby 2.1 이후 버전을 사용한다면 복수소 표현은 &lt;code&gt;i&lt;/code&gt;나 &lt;code&gt;ri&lt;/code&gt; 접미사를 사용한다.

&lt;ul&gt;
&lt;li&gt;예: &lt;code&gt;1 + 2i #=&amp;gt; (1+2i)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="strings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;문자열&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 빈문자열은 &lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;을 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 특별한 이유가 없다면 &lt;code&gt;String.new&lt;/code&gt; 메소드로 문자열을 생성하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 문자열 안에서 이스케이프 시켄스가 최소화될 수 있도록 적절한 구분문자열을 선택한다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; &lt;code&gt;%&lt;/code&gt; 문법으로 문자열 리터럴을 사용할 때는 괄호를 구분 문자열로 사용한다.이 때 괄호의 종류는 어떤 걸 사용해도 무방하며, 아래와 같은 특별한 경우에는 다른 기호를 구분자로 사용해도 무방하다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
OPEN_PARENTHESES = %!({[!    
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;Object#to_s&lt;/code&gt;만 호출하는 용도로 위해 문자열 보간(interpolation)을 사용하지 않는다.예) &lt;code&gt;&amp;quot;#{obj.to_s}&amp;quot;&lt;/code&gt; -&amp;gt; &lt;code&gt;obj.to_s&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 문자열 보간을 사용할 때 중괄호를 생략할 수 있는 경우가 있지만, 생략하지 않고 반드시 중괄호를 사용한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; (Ruby 1.9+) Unicode 문자를 이스케이스 시켄스로 입력할 때는 &lt;code&gt;&amp;quot;\xE3\x8C\xB3&amp;quot;&lt;/code&gt; 방식이 아니라 &lt;code&gt;&amp;quot;\u{3333}&amp;quot;&lt;/code&gt;와 같이 &lt;code&gt;\u&lt;/code&gt;를 사용한다.루비 1.8 버전을 지원해야하는 스크립트라면 적용하지 않는다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 루프에서 문자열 리터럴을 사용하지 말 것.여기서 루프란 &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;을 비롯해 &lt;code&gt;each&lt;/code&gt;와 같은 블록을 사용하는 반복자 표현을 의미한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 문자열 리터럴들을 &lt;code&gt;String#+&lt;/code&gt; 메소드를 사용해서 연결하지 않는다.문자열 보간법을 사용한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 문자열에 파괴적인 연결 연산자인 &lt;code&gt;+=&lt;/code&gt;를 사용하지 않는다.&lt;code&gt;String#&amp;lt;&amp;lt;&lt;/code&gt; 메소드나 &lt;code&gt;String#concat&lt;/code&gt; 메소드를 사용한다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="regular-expressions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;정규표현식&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 역참조하지 않는 그룹은 사용하지 않는다.&lt;code&gt;(?:...)&lt;/code&gt;을 대신 사용.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 복잡한 정규표현식을 사용할 때는 &lt;code&gt;x&lt;/code&gt; 옵션을 사용해 줄바꿈, 공백, 주석 (&lt;code&gt;(?# ...)&lt;/code&gt;)을 사용해 가독성을 높인다.

&lt;ul&gt;
&lt;li&gt;자세한 예는 &lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/uri/common.rb#L457"&gt;uri/common.rb 에 정의된 정규표현식&lt;/a&gt;을 참조.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="arrays"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;배열&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 배열 리터럴을 여러 줄로 작성할 때는 &lt;code&gt;[&lt;/code&gt;와 첫번째 요소 사이에 하나의 공백을 두고 요소들의 들여쓰기를 맞춘다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;[ :foo,
  :bar,
  :baz
]&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;[:foo,
  :bar,
  :baz
]
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 대입식에서 배열 리터럴을 여러 줄에 걸쳐 작성할 때는 &lt;code&gt;[&lt;/code&gt; 뒤에서 줄바꿈하고 요소를 입력하는 줄들은 한단계씩 들여쓰기 하고 배열을 닫는 &lt;code&gt;]&lt;/code&gt;는 별도의 줄에 적는다. 이 때 &lt;code&gt;]&lt;/code&gt;는 &lt;code&gt;[&lt;/code&gt;이 있는 줄의 첫 부분과 들여쓰기를 맞춘다.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;array = [
  :foo,
  :bar,
  :baz,
]&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;array = [ :foo,
          :bar,
          :baz, ]&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;array = [ :foo,
          :bar,
          :baz,
        ]&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;array = [
  :foo,
  :bar,
  :baz, ]
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 여러줄로 된 배열 리터럴을 사용할 때는 마지막 요소 다음에도 &lt;code&gt;,&lt;/code&gt;를 입력한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 문자열로만 구성된 배열을 만들 때는 &lt;code&gt;%w(...)&lt;/code&gt;이나 &lt;code&gt;%W(...)&lt;/code&gt; 문법을 사용한다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;words = %w(foo bar baz)&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;words = [&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;]
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 빈 배열은 &lt;code&gt;[]&lt;/code&gt;을 사용한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 인수 없이 &lt;code&gt;Array.new&lt;/code&gt; 메소드를 사용하지 않는다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 같은 요소를 &lt;code&gt;n&lt;/code&gt; 개 가진 배열을 초기화할 때는 &lt;code&gt;Array.new(n, obj)&lt;/code&gt;을 사용한다.&lt;code&gt;[obj] * n&lt;/code&gt; 을 사용하지 않는다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 범위(Range) 리터럴을 배열로 변환할 때는 &lt;code&gt;Range#to_a&lt;/code&gt; 메소드를 사용하지 않고, &lt;code&gt;[*range]&lt;/code&gt; 표현을 사용한다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;[*1..10]  #=&amp;gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;(1..10).to_a  #=&amp;gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
```&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="hashes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;해시&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 해시 리터럴을 한 줄에 작성할 때는 &lt;code&gt;{&lt;/code&gt; 와 첫번째 요소 사이와 마지막 요소와 &lt;code&gt;}&lt;/code&gt; 사이에 각각 하나의 공백을 넣는다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;{ hoge: 1, fuga: 2 }&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;{hoge: 1, fuga: 2}
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 해시 리터럴에서 Symbol을 key로 사용할 때 HashRocket(Ruby 1.8에서 사용되던 &lt;code&gt;=&amp;gt;&lt;/code&gt;을 사용한 표현. 예: &lt;code&gt;{ :foo =&amp;gt; 42 }&lt;/code&gt;)문법을 사용하지 않는다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;{ first: 42,
  second: &amp;#39;foo&amp;#39;,
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;{ :first =&amp;gt; 42,
  :second =&amp;gt; &amp;#39;foo&amp;#39;,
}
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 해시 리터럴의 key가 symbol이지만 &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;와 같은 기호를 사용할 때는 HashRokcet 문법만 사용한다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;{ :cookpad =&amp;gt; 42,
  :&amp;#39;cookpad.com&amp;#39; =&amp;gt; &amp;#39;foo&amp;#39;,
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;{ cookpad: 42,
  :&amp;#39;cookpad.com&amp;#39; =&amp;gt; &amp;#39;foo&amp;#39;,
}
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 빈 해시는 &lt;code&gt;{}&lt;/code&gt;를 사용한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 해시만 따로 여러줄에 걸쳐서 작성할 때는 &lt;code&gt;{&lt;/code&gt; 다음에 바로 첫번째 요소를 입력하고, 두번째 요소부터는 한 단계 들여쓰기 한다. &lt;code&gt;}&lt;/code&gt;는 별도의 행에 작성하고, &lt;code&gt;{&lt;/code&gt;를 입력한 줄의 앞부분과 들여쓰기를 맞춘다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;{ first: 42,
  second: &amp;#39;foo&amp;#39;,
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;{
  first: 42,
  second: &amp;#39;foo&amp;#39;,
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;{ first: 42,
second: &amp;#39;foo&amp;#39;,
}
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 대입식에서 해시 리터럴을 여러 줄에 걸쳐서 작성할 때는 &lt;code&gt;{&lt;/code&gt; 뒤에서 줄바꿈하고 각 요소들은 한단계 들여쓰기해서 작성한다. &lt;code&gt;}&lt;/code&gt;는 별도의 줄에 입력하고 &lt;code&gt;{&lt;/code&gt;을 입력한 줄의 앞부분과 들여쓰기를 맞춘다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;hash = {
  first: 42,
  second: &amp;#39;foo&amp;#39;,
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;hash = { first: 42,
         second: &amp;#39;foo&amp;#39;,
       }&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;hash = { first: 42,
         second: &amp;#39;foo&amp;#39;,
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;hash = { first: 42,
  second: &amp;#39;foo&amp;#39;,
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;hash = {
first: 42,
second: &amp;#39;foo&amp;#39;,
}
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 여러 줄로 걸쳐 해시 리터럴을 작성할 때는 마지막 요소 다음에도 &lt;code&gt;,&lt;/code&gt;를 넣는다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 심볼이 문자열보다 검색 속도가 더 빠르므로, 해키 키로는 문자열보다 심볼을 사용한다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```ruby
  # good
  { foo: 1, bar: 2 }&lt;/p&gt;

&lt;p&gt;# bad
  { &amp;#39;foo&amp;#39; =&amp;gt; 1, &amp;#39;bar&amp;#39; =&amp;gt; 2 }
  ```&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; (Ruby 1.9+) 해시 리터컬의 키가 전부 Symbol 리터럴이면 &lt;code&gt;{ key: value }&lt;/code&gt; 방식을 사용한다.이 때 &lt;code&gt;:&lt;/code&gt; 뒤에 공백을 넣을 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="operations"&gt;&lt;/a&gt;## 계산식&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 연산자 양쪽에 모두 공백을 사용할 것.단 &lt;code&gt;**&lt;/code&gt; 연산자를 사용할 때는 양쪽 모두 공백을 넣지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;은 사용하지 않는다.

&lt;ul&gt;
&lt;li&gt;단 &lt;code&gt;式 or raise &amp;#39;message&amp;#39;&lt;/code&gt;과 같이 사용할 때 &lt;code&gt;or&lt;/code&gt;은 사용해도 된다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 조건 연산자를 중첩적으로 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 조건 연산자를 여러줄에 작성하지 않는다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;fizzbuzz = if n % 3 == 0
    n % 5 == 0 ?&amp;#39;fizzbuzz&amp;#39; : &amp;#39;fizz&amp;#39;
  else
    n % 5 == 0 ?&amp;#39;buzz&amp;#39; : &amp;quot;#{n}&amp;quot;
  end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;fizzbuzz = n % 3 == 0 ?(n % 5 == 0 ?&amp;#39;fizzbuzz&amp;#39; : &amp;#39;fizz&amp;#39;) : (n % 5 == 0 ?&amp;#39;buzz&amp;#39; : &amp;quot;#{n}&amp;quot;)&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;fizzbuzz = n % 3 == 0 ?      (n % 5 == 0 ?&amp;#39;fizzbuzz&amp;#39; : &amp;#39;fizz&amp;#39;) :
  (n % 5 == 0 ?&amp;#39;buzz&amp;#39; : &amp;quot;#{n}&amp;quot;)
```&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="assignments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;대입식&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 대입 기호(=) 양쪽에는 공백을 넣는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 대입식에 조건식을 사용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="control-structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;제어구조&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; &lt;code&gt;if !condition&lt;/code&gt; 대신 &lt;code&gt;unless condition&lt;/code&gt;을 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; &lt;code&gt;while !condition&lt;/code&gt; 대신 &lt;code&gt;until condition&lt;/code&gt;을 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; &lt;code&gt;unless&lt;/code&gt;를 사용할 때는 &lt;code&gt;else&lt;/code&gt;를 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt; 조건식을 사용할 때는 줄바꿈을 사용한다.조건식 본문은 조건식과 같은 줄에 입력하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;를 사용할 때는 &lt;code&gt;then&lt;/code&gt;과 &lt;code&gt;:&lt;/code&gt;를 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;while&lt;/code&gt;과 &lt;code&gt;until&lt;/code&gt; 조건식을 사용할 때는 줄바꿈을 사용한다.조건식 본문은 조건식과 같은 줄에 입력하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;문을 사용할 때는 &lt;code&gt;do&lt;/code&gt;나 &lt;code&gt;:&lt;/code&gt;를 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; &lt;code&gt;unless&lt;/code&gt;와 &lt;code&gt;until&lt;/code&gt; 조건식에는 &lt;code&gt;||&lt;/code&gt;으로 조건을 연결하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 조건식과 본문 코드가 짧으면 본문 코드 뒤에 조건 변경자를 사용할 것.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 조건식이 여러줄로 길어질 때는 조건을 별도의 메소드로 추출하고 적절한 이름을 붙여 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 대입식에서 제어구조를 사용해야할 때는 본문 코드를 2단계 들여쓰고 마지막 &lt;code&gt;end&lt;/code&gt;는 본문보다 한단계 덜 들여쓴다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;result = if condition
    body_code
  end&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;result =
  if condition
    body_code
  end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;result = if condition
  body_code
end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;result = if condition
           body_code
         end
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; return, next, break가  의미 있는 값을 리턴하지 않을 때는, 각 키워드 뒤에 어떤 식도 작성하지 않는다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;단 컨트롤러의 액션에서 redirect_to나 render와 같은 계속 처리를 선언하는 메소드는 return이나 next 뒤에서 호출해도 무방하다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="method-calls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;메소드 호출&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 메소드 호출 시 괄호는  경우를 제외하고는 생략하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 인수가 없는 메소드를 호출할 때는 괄호를 생략한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; DSL-like 메소드를 호출할 때는 메소드 호출 시 괄호를 생략해도 무방하다.하지만 첫번째 인수 전체가 괄호로 둘러쌓여있다면 경고가 발생하므로 괄호를 생략하지 않는다.DSL-like 메소드란 아래의 메소드를 의미한다.

&lt;ul&gt;
&lt;li&gt;p, print, puts, require 등의 글로벌 함수&lt;/li&gt;
&lt;li&gt;attr_reader이나 private 같은 클래스와 모듈 정의에서 선언적으로 사용되는 메소드(Rails 등의 프레임워크에서 제공하는 것을 포함).&lt;/li&gt;
&lt;li&gt;redirect_to와 render 등 ActionController가 제공하는 액션에 대해 계속 처리를 선언하는 메소드.&lt;/li&gt;
&lt;li&gt;이외에 DSL을 위해 준비된 메소드.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;메소드 호출 안에서 메소드를 호출하는 때는 다른 규칙에 위배되지 않는 한에서 가장 바깥의 메소드 호출에서 괄호를 생략해도 무방하다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 메소드 이름과 메소드 호출을 의미하는 괄호 사이에는 공백을 넣지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 인자 마지막에 해시 리터럴을 사용할 때는 해시 리터럴 괄호를 생략한다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;foo(1, 2, foo: :bar, baz: 42)&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;foo(1, 2, { foo: :bar, baz: 42 })
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 블록의 리턴값이 의미를 가지지 않는 메소드를 호출할 때는 &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; 방식으로 블록을 사용한다.예) 블록에서 부작용을 일으킬 때(변수 변환 등).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 블록의 리턴값이 의미를 가지는 메소드를 호출할 때는 중괄호를 사용해 블록을 사용한다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;puts [1, 2, 3].map {|i|
  i * i
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;puts [1, 2, 3].map do |i|
  i * i
end&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].map {|n|
  n * n
}.each {|n|
  puts Math.sqrt(n)
}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].map do |n|
  n * n
end.each do |n|
  puts Math.sqrt(n)
end
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 블록을 사용하는 메소드 호출을 한 줄로 작성할 때는 중괄호를 사용한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;를 사용할 때는 &lt;code&gt;do 앞뒤로 공백을 넣으며, 블록 인자 뒤에 줄바꿈을 넣고&lt;/code&gt;end&lt;code&gt;는 독립된 행으로 작성한다.블록 본문은 한 단계 들여쓰며&lt;/code&gt;end`의 들여쓰기는 메소드를 호출하는 첫 행에 맞춘다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].each do |num|
  puts num
end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].each do |num|
    puts num
  end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].each do |num|
                 puts num
               end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].each do |num| puts num end
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 중괄호를 사용하는 블록은 &lt;code&gt;{&lt;/code&gt; 앞에 공백을 하나 사용한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 중괄호를 사용하는 블록을 한 줄에 작성하는 경우 &lt;code&gt;{&lt;/code&gt;이나 블록 인자와 본문 코드, 본문 코드와 &lt;code&gt;}&lt;/code&gt; 사이에 공백을 하나씩 넣는다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].each {|num| puts num }
[1, 2, 3].each { |num| puts num }&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].each {|num| puts num}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;[1, 2, 3].each { |num| puts num}&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;10.times { puts &amp;#39;Hello world&amp;#39; }&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;10.times {puts &amp;#39;Hello world&amp;#39; }&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;10.times {puts &amp;#39;Hello world&amp;#39;}&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;10.times { puts &amp;#39;Hello world&amp;#39;}
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 메소드를 호출할 때 인자가 길어지면 아래의 규칙에 따라 여러 줄에 나눠서 작성한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;인자가 길어지면 &lt;code&gt;(&lt;/code&gt; 바로 다음에 줄바꿈을 넣고 다음 행부터 들여쓰기를 한 단계 깊게 한 행에 하나의 인자를 작성한다. 메소드 호출을 닫을 때는 들여쓰기를 첫 줄과 마찬가지로 하고 &lt;code&gt;)&lt;/code&gt;를 별도의 줄에 작성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ruby
  Foo.new(
    arg,
    long_argument,
    key: value,
    long_key: long_value,
    pretty_so_much_very_long_key:
      pretty_so_much_very_tooooooooooooooooooooo_long_value,
  )
&lt;/code&gt;
- 인자가 짧을 때는 &lt;code&gt;(&lt;/code&gt;에 이어서 첫번째 인자를 작성하고, 다음 줄부터는 들여쓰기을 첫번째 인자에 맞추서 인자들을 하나씩 작성한다. 메소드 호출을 마칠 때는 &lt;code&gt;)&lt;/code&gt;을 마지막 인자 바로 다음에 적는다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
  Foo.new(arg,
          long_argument,
          key: value,
          long_key: long_value)
&lt;/code&gt;
- DSL 메소드를 여러 줄에 걸쳐서 작성할 때는 첫번째 인수를 메소드 이름 바로 뒤에 적고, 다음 줄부터 들여쓰기를 한단계 깊게 인수를 한 줄에 하나씩 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
  ActionMailer::Base.delivery_method :smtp,
      host: &amp;#39;localhost&amp;#39;,
      port: 25
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="begin-and-end"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;BEGIN과 END&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;BEGIN&lt;/code&gt; 블록과 &lt;code&gt;END&lt;/code&gt; 블록은 사용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="module-and-class-definitions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;모듈과 클래스 정의&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 메소드에 별칭을 붙일 때는 &lt;code&gt;alias&lt;/code&gt;를 사용하지 말고 &lt;code&gt;alias_method&lt;/code&gt;를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;attr&lt;/code&gt;을 사용하지 말고 &lt;code&gt;attr_accessor&lt;/code&gt;, &lt;code&gt;attr_reader&lt;/code&gt;, &lt;code&gt;attr_writer&lt;/code&gt;을 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 클래스 메소드를 정의할 때는 의미없이 들여쓰기가 깊어지지 않도록 &lt;code&gt;self.&lt;/code&gt; 문법을 사용한다.하지만 private 메소드와 public 메소드를 모두 사용할 때는 &lt;code&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; 를 사용해도 무방하다.&lt;/p&gt;

&lt;p&gt;```ruby
class Foo
  # good
  def self.foo
  end&lt;/p&gt;

&lt;p&gt;# bad
  def Foo.foo
  end
end
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; private와 protected 클래스 메소드를 정의할 때는 &lt;code&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; 안에서 메소드를 정의하고 가시성을 변경한다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```ruby
    class Foo
      # good
      class &amp;lt;&amp;lt; self
        def foo
        end
        private :foo
      end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # bad
  def self.foo
  end
  class &amp;lt;&amp;lt;self
    private :foo
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 메소드가 정의되어있을 때 메소드 이름을 인수로 &lt;code&gt;private&lt;/code&gt;나 &lt;code&gt;protected&lt;/code&gt;나 &lt;code&gt;public&lt;/code&gt; 메소드를 호출해 메소드의 가시성을 변경할 때는 메소드 정의와 가시성 변경 메소드 사이에 빈 줄을 두지 않는다.&lt;/p&gt;

&lt;p&gt;```ruby
class Foo
  # good
  def foo
  end
  private :foo&lt;/p&gt;

&lt;p&gt;# bad
  def foo
  end&lt;/p&gt;

&lt;p&gt;private :foo
end
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; &lt;code&gt;private&lt;/code&gt;나 &lt;code&gt;protected&lt;/code&gt;나 &lt;code&gt;public&lt;/code&gt;을 인수 없이 사용할 때는 들여쓰기를 메소드 정의와 같게 하고 메소드 호출 앞뒤로 한 줄을 띄워준다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;class Foo
  def foo
  end&lt;/p&gt;

&lt;p&gt;private&lt;/p&gt;

&lt;p&gt;def bar
  end
end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;class Foo
  def foo
  end&lt;/p&gt;

&lt;p&gt;private&lt;/p&gt;

&lt;p&gt;def bar
  end
end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;class Foo
  def foo
  end&lt;/p&gt;

&lt;p&gt;private&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def bar
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;class Foo
  def foo
  end&lt;/p&gt;

&lt;p&gt;private
  def bar
  end
end
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 외부에 노출되는 클래스와 모듈의 메소드 및 변수에 대한 문서는 Markdown으로 작성한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 문서화를 위한 주석과 메소드 정의 사이에 빈 줄을 넣지 않는다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 문서화는 &lt;a href="http://tomdoc.org/"&gt;TomDoc&lt;/a&gt; 포맷을 따른다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 하나의 클래스를 여러가지 목적으로 사용하지 않는다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="method-definitions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;메소드 정의&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 메소드를 정의할 때 인수 리스트의 괄호는 생략하지 않는다.인수가 없는 메소드를 정의할 때는 괄호를 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 메소드와 인수 리스트의 괄호 사이에는 공백을 넣지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 메소드 본문에 주석을 필요한 코드를 작성하지 않는다.

&lt;ul&gt;
&lt;li&gt;메소드 본문에 주석을 남기기보단 별도의 메소드로 추출해서 이름을 붙이는 게 가독성을 향상시킨다.&lt;/li&gt;
&lt;li&gt;수식에 대한 보충이나 출처는 본문에 주석을 남겨도 무방하다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 하나의 메소드로 여러가지 일을 하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 인수를 삭제하지 않는다.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;h1&gt;good&lt;/h1&gt;

&lt;p&gt;def your&lt;em&gt;method(str)
  new&lt;/em&gt;str = str.sub(&amp;#39;xxx&amp;#39;, &amp;#39;yyy&amp;#39;)
end&lt;/p&gt;

&lt;h1&gt;bad&lt;/h1&gt;

&lt;p&gt;def your_method(str)
  str.sub!(&amp;#39;xxx&amp;#39;, &amp;#39;yyy&amp;#39;)
end
```&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;변수&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 글로별 변수를 (&lt;code&gt;$foo&lt;/code&gt;) 임의로 정의하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 클래스 변수(&lt;code&gt;@@foo&lt;/code&gt;)를 사용하지 않는다. 클래스 변수 대신 &lt;code&gt;class_attribute&lt;/code&gt;를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 변수 이름에는 영어 단어를 생략해서 사용하지 않는다.단, 변수명이 너무 길어질 때는 단어의 첫문자를 제외한 모음을 생략하거나 일반적인 약어를 사용해도 무방하다.관습적인 변수 이름인 &lt;code&gt;i&lt;/code&gt;나 &lt;code&gt;j&lt;/code&gt;와 같은 변수는 사용해도 좋다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 하나의 변수를 여러 가지 용도로 사용해서는 안 된다.이러한 경우엔 메소드를 분리한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[SHOULD]&lt;/strong&gt; 지역 변수 스코프(유효범위)를 가능하면 작게 만든다.지역 변수가 존재하지 않는 메소드가 좋은 메소드이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;이 외(분류하기 어려운 규칙)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MUST]&lt;/strong&gt; 파괴적인 메소드를 사용할 때는 그 영향 범위를 최소한으로 한정한다.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>emacs.sexy 한국어 번역 및 OmegaT + Travis + Rake + Github Pages를 활용한 번역</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-03-17-sexy-emacs-kr/"/>
    <id>http://blog.nacyot.com/articles/2014-03-17-sexy-emacs-kr/</id>
    <published>2014-03-16T15:20:00Z</published>
    <updated>2014-04-05T18:23:48+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;vim.sexy의 emacs판인 emacs.sexy를 번역했습니다. 저 또한 한 명의 행복한 이맥스 사용자이기에 &amp;gt;_&amp;lt;&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p&gt;&lt;a href="http://t.co/NrSRaEXMWO"&gt;http://t.co/NrSRaEXMWO&lt;/a&gt; &lt;a href="http://t.co/3YY2lCXkLd"&gt;http://t.co/3YY2lCXkLd&lt;/a&gt; 한국어 번역&lt;/p&gt;&amp;mdash; nacyot (@nacyo_t) &lt;a href="https://twitter.com/nacyo_t/statuses/445030787130200064"&gt;2014년 3월 16일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;



&lt;h2&gt;Github&lt;/h2&gt;

&lt;p&gt;특별한 건 없습니다만, 번역과 번역 저장소 관리에 대해서 조금 이야기를 해보자면 현재 sexy.emacs.kr은 두 개의 저장소에서 관리되고 있습니다.&lt;/p&gt;

&lt;p&gt;하나는 번역 메모리 omegat의 프로젝트를 담은 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/nacyot/omegat-emacs.sexy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이고, 또 하나는 omegat-emacs.sexy에서 번역한 결과를 travis로 빌드해서 자동으로 push 되도록 설정해둔 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/nacyot/sexy.emacs.kr&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;입니다.&lt;/p&gt;

&lt;h2&gt;OmegaT&lt;/h2&gt;

&lt;p&gt;개인적으로 번역 프로젝트에는 전부 OmegaT를 사용하고 있습니다.자바로 만들어진 번역 메모리로 기능적으론 굉장히 훌륭합니다. 특히 OmegaT는 문장 단위로 번역을 진행해서, 직접 원본 파일을 번역하는 것과 달리 원문의 업데이트에 비교적 쉽게 대응할 수 있습니다. 약간 번거롭고 저장소와 호환이 안 맞아서 한참 고생을 했는데, 최근에 활용 방향이 정리가 되서 베스트 프렉티스를 정리해보는 중입니다. 이에 대한 내용은 조만간 공유해 볼 예정입니다.&lt;/p&gt;

&lt;h2&gt;Omegat + Travis&lt;/h2&gt;

&lt;p&gt;이번에 한 가지 시도해본 건 Travis를 통해 OmegaT의 프로젝트를 빌드하는 일입니다. OmegaT에서는 원본 문서를 편집하지 않고 Segment 단위로 한 문장(혹은 한 문단) 씩 번역을 진행합니다. 따라서 여기서 빌드란 OmegaT를 통해서 번역한 결과물을 실제 파일로 출력하는 과정을 말합니다. 로컬에서 번역을 진행하고 빌드 후 저장소를 올리는 것도 어렵지 않습니다만 신경써야할 부분이 하나 더 느는 문제가 있고, 또 하나는 커밋 단위로 빌드를 하고 싶었기 때문입니다. 이는 이 블로그나 위키에서도 마찬가지로 문서를 작성하면 자동적으로 Travis에서 Middleman 어플리케이션을 빌드하고 깃허브 저장소에 올리는 것과 마찬가지입니다. 즉, 이를 통해 OmegaT를 통한 번역작업과 Github 페이지를 통한 배포 작업을 하나의 트랜젝션으로 묶을 수 있습니다.&lt;/p&gt;

&lt;p&gt;전체 스크립트는 &lt;a href="https://github.com/nacyot/omegat-emacs.sexy/blob/master/.travis.yml"&gt;여기&lt;/a&gt;에 있습니다. 여기서 가장 중요한 두 명령어는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yaml
before_install:
  - sudo apt-get install -qq openjdk-6-jdk omegat
script:
  - /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java -jar /usr/share/omegat/OmegaT.jar . --mode=console-translate
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;첫번째 명령어는 &lt;code&gt;apt-get&lt;/code&gt;으로 openjdk-6-jdk와 omegat를 설치합니다. 아래 명령어는 실제로 프로젝트를 빌드하는 명령어입니다. OmegaT를 설치하면 &lt;code&gt;omegat&lt;/code&gt; 명령어를 사용할 수 있기는 합니다만, 이 명령어는 자바 버전에 의존적이라 &lt;code&gt;java&lt;/code&gt;와 &lt;code&gt;omegat&lt;/code&gt; 모두 강제로 경로를 지정해서 실행하고 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 작업을 할 때 OmegaT의 프로젝트 구조를 로컬에서와 같도록 최대한 보장해줄 필요가 있습니다. 예를 들어 과거 프로젝트에서 생성한 번역 메모리를 재활용할 수 있게 도와주는 &lt;code&gt;/tm/auto&lt;/code&gt; 디렉토리는 실제론 필요가 없지만, 빌드 시에 없으면 프로젝트를 인식하지 못 합니다. &lt;code&gt;target&lt;/code&gt; 디렉토리는 빌드 결과가 출력되는 디렉토리인데 자동으로 생성해주지 않기 때문에, 빈 디렉토리라도 생성해두지 않으면 빌드에 실패합니다. 이 외에 &lt;code&gt;glossary&lt;/code&gt;, &lt;code&gt;dictionary&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;도 정상적으로 프로젝트 디렉토리 안에 생성되어 있어야합니다.&lt;/p&gt;

&lt;p&gt;OmegaT의 경우 &lt;code&gt;apt-get&lt;/code&gt;으로 설치하면 상당히 구버전이 설치됩니다. 저 같은 경우는 번역에 3버전을 사용하고 있는데, 빌드 과정에서 특별한 문제점은 없었습니다. 만약 &lt;code&gt;apt-get&lt;/code&gt;으로 설치하는 버전을 사용하기가 어렵다면 별도로 프로젝트에 OmegaT를 집어넣거나, wget으로 소스포지에서 다운로드해야합니다.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p&gt;&lt;a href="https://twitter.com/marocchino"&gt;@marocchino&lt;/a&gt; 아... 빌드에서 사용할 파일 따로 가져올 방법이 없어서 압축해서 포함시키려고 했는데 100mb 넘는다고 안 들어가더군요 ㅎㅎ. 좋은 접근은 아니었죠 ㅜ&lt;/p&gt;&amp;mdash; nacyot (@nacyo_t) &lt;a href="https://twitter.com/nacyo_t/statuses/444838462277967873"&gt;2014년 3월 15일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;이건 비밀입니다만(...) 처음에는 직접 OmegaT의 최신 버전을 프로젝트에 집어넣고 빌드 과정에서 압축을 풀어 사용하려고 했습니다. 하지만 Github 저장소에는 100mb 이상의 파일을 넣을 수 없다는 사실을 처음 알았습니다.&lt;/p&gt;

&lt;p&gt;이렇게 100mb 넘는 파일을 추가하고 Github에 올리기 위해선 커밋 히스토리 자체를 삭제할 필요가 생기는데 아래 명령어를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git filter-branch --tree-filter &amp;#39;rm -rf path/to/your/file&amp;#39; HEAD
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Rake&lt;/h2&gt;

&lt;p&gt;빌드 과정에서 몇 가지 rake 작업이 이루어집니다. OmegaT를 사용한 번역에서는 원본 파일을 직접 수정하지 않고, 문장들만을 번역합니다. 따라서 원칙적으로 원본 파일은 건드리지 않고 작업을 하기 위해서 빌드된 결과물을 rake  스크립트를 통해서 편집해줍니다. &lt;code&gt;rewrite_cname&lt;/code&gt;은 CNAME 파일이 &lt;code&gt;sexy.emacs.kr&lt;/code&gt;(실제 배포될 URL)을 가리키도록 합니다.  &lt;code&gt;add_link&lt;/code&gt;는 별도로 관리중인 &lt;a href="https://github.com/nacyot/omegat-emacs.sexy/blob/master/data/sites.json"&gt;한국어 링크를 정리한 json 파일&lt;/a&gt;에서 링크를 가져와 문서의 아래 쪽에 추가해줍니다. 마지막으로 &lt;code&gt;add_link_to_translator&lt;/code&gt;는 번역자 정보를 문서에 추가해줍니다.&lt;/p&gt;

&lt;h2&gt;Github Pages&lt;/h2&gt;

&lt;p&gt;빌드 과정의 마지막에는 이렇게 생성된 번역 결과를 sexy.emacs.kr 깃허브 저장소에 push하도록 되어있습니다. 깃허브에서는 gh-pages 브랜치를 이용해 저장소의 내용을 배포할 수 있습니다. 특별한 건 없습니다만, Github Pages에서 커스텀 도메인으로 배포 가능하도록 DNS A record를 지정해야하는 ip 주소가 최근에 바뀐 듯 합니다. &lt;a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages"&gt;깃허브 Help 사이트&lt;/a&gt;에서는 &lt;code&gt;192.30.252.153&lt;/code&gt;과 &lt;code&gt;192.30.252.154&lt;/code&gt;를 지정해야한다고 이야기하고 있으며, 예전 ip도 업데이트를 권장하고 있었습니다.&lt;/p&gt;

&lt;h2&gt;Travis&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/nacyot/omegat-emacs.sexy"&gt;Travis의 빌드 결과&lt;/a&gt;는 여기서 확인할 수 있습니다. 이를 통해서 빌드가 어떤 식으로 이루어지는지 감이 오실 거라고 생각합니다.&lt;/p&gt;

&lt;p&gt;아시는 분은 이미 아시리라고 생가합니다만, 공개 프로젝트를 운영하신다면 tarvis는 둘도 없는 강력한 빌드 서비스입니다. 어떤 자원을 사용하건 자원에 대한 대가를 치루는 거는 꽤나 번거롭고 관리가 드는 일입니다만, 공개 프로젝트에 한해서 Travis는 이러한 부담이 전혀 없이 무료로 사용할 수 있습니다. 위에서 보셨다시피 커밋에 대응한 자동 빌드 및 심지어 빌드 성공시 깃헙 페이지에 자동 배포하는 역할까지 수행하고 있습니다.&lt;/p&gt;

&lt;h2&gt;결론&lt;/h2&gt;

&lt;p&gt;이 프로젝트의 경우는 번역할 절대 양이 많지도 않고 업데이트가 크게 많다고 생각되지 않기 때문에 조금 오버를 했다는 느낌도 없지 않습니다만, 예전부터 생각해오던 것을 직접 적용해서 작은 번역 프로젝트를 하나 진행해 보았습니다. 좀 더 큰 프로젝트에서라면 번역에만 집중할 수 있는 이러한 워크플로우가 꽤나 도움이 될 것이라고 기대하고 있습니다.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>이맥스(emacs)와 자바스크립트 코드 분석 툴 Tern</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-03-12-emacs-with-tern/"/>
    <id>http://blog.nacyot.com/articles/2014-03-12-emacs-with-tern/</id>
    <published>2014-03-11T16:15:32Z</published>
    <updated>2014-04-05T18:23:48+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;텍스트 에디터는 IDE에 비해서 매우 가볍고 편리한 기능들을 가진 도구입니다만 기능적인 면에서의 열세에 대해서 많이 이야기되곤 합니다. 특히 정적 분석을 통한 질 높은 자동 완성이 어렵다거나 하는 부분은 IDE 팬들에게서 오랫동안 질타받아온 부분이고, 사실 텍스트 에디터를 쓰는 사람 입장에서도 아쉬운 부분이기도 합니다. 이런 상황에서 텍스트 에디터를 사용하는 자바스크립트 개발자들에게 단비와 같은 프로그램이 바로 자바스크립트 코드 분석기 &lt;a href="http://ternjs.net/"&gt;Tern&lt;/a&gt;입니다.&lt;/p&gt;



&lt;p&gt;Tern은 &lt;a href="https://github.com/marijnh/CodeMirror"&gt;코드미러&lt;/a&gt;라는 에디터를 만들었던 Marijn Haverbeke의 또다른 오픈소스 어플리케이션으로 기본적으로 자바스크립트 코드 분석기입니다. 지금 바로 &lt;a href="http://ternjs.net/doc/demo.html"&gt;데모 페이지&lt;/a&gt;에서 코드 미러 위에서 동작하는 Tern의 기능들을 확인해보시기 바랍니다. 이러한 정적 코드 분석의 결과는 질높은 문법 체크 및 자동완성을 비롯한 다양한 부가 기능을 제공하는데 이용될 수 있습니다. 특히 Tern은 특정 에디터에 종속되지 않는다는 점에서 봤을 때 마츠야마 토모히로 씨가 Emacs는 죽었다는 글에서 이야기했던 (이맥스 문화권에서 나오진 않았지만) &lt;strong&gt;&lt;em&gt;외부 프로그램에 의한 잠재적인 사회적 가치를 극대화&lt;/em&gt;&lt;/strong&gt;해야한다는 사상에 정말로 잘 들어맞는 프로그램입니다. Tern은 어떤 에디터에 종속적이지 않습니다. Tern은 독자적인 서버로 실행되고, 에디터에서 보내오는 결과에 대한 적절한 분석결과를 되돌려 줄 뿐입니다. 리눅스에서 명령어들의 결과를 파이프라인으로 보내는데 익숙하다면 이러한 개념이 얼마나 합리적이고 적절히 확장 가능한지 이해할 수 있을 것입니다. 분석 결과는 에디터의 플러그인들이 적절히 처리해줍니다. 실제 Tern의 저장소에는 Emacs, Vim, Sublime Text, eclipse를 플러그인으로 지원하고 있으면 Brackets과 Edge Code에서는 빌트인으로 지원하고 있다고 쓰여있습니다.&lt;/p&gt;

&lt;p&gt;이 글에서는 그 중에서도 제가 애용하는 텍스트 에디터인 이맥스(Emacs)에서 Tern을 연동해 사용하는 방법에 대해서 다루도록 하겠습니다.&lt;/p&gt;

&lt;h2&gt;설치&lt;/h2&gt;

&lt;p&gt;우선 Tern을 사용하기 위해서는 Tern을 설치해야할 필요가 있습니다. 먼저 npm을 사용해서 설치해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ npm install -g tern
npm http GET https://registry.npmjs.org/tern
npm http 200 https://registry.npmjs.org/tern
...
tern@0.5.0 /home/myhome/.nvm/v0.10.24/lib/node_modules/tern
├── acorn@0.4.2
├── glob@3.2.9 (inherits@2.0.1)
└── minimatch@0.2.14 (sigmund@1.0.0, lru-cache@2.5.0)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;npm을 사용하는 게 가장 간단합니다만, npm을 사용할 수 없는 경우엔,&lt;/p&gt;

&lt;p&gt;nodejs와 npm을 설치해주세요(...). 그만 nodejs를 받아들이시기 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ tern 
Listening on port 60805
^c(종료)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이제 tern을 실행해보면 랜덤한 포트에서 tern이 실행되는 것을 알 수 있습니다.&lt;/p&gt;

&lt;h2&gt;Tern 이맥스 설정&lt;/h2&gt;

&lt;p&gt;Tern 설치가 되었다면 이제 이맥스와 연동을 해야합니다. Tern은 기본적으로 이맥스 24 이상을 지원하고 있습니다. 먼저 설치된 이맥스 버전을 확인해주시고, 필요한 경우 버전을 올려줍니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ emacs --version
GNU Emacs 24.3.1
Copyright (C) 2013 Free Software Foundation, Inc.
GNU Emacs comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of Emacs
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;또한 이맥스 24에는 강력한 패키지 관리자가 기본으로 포함되어있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
M-x package-install &amp;lt;enter&amp;gt; tern &amp;lt;enter&amp;gt;
M-x package-install &amp;lt;enter&amp;gt; tern-auto-complate &amp;lt;enter&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;만약 패키지를 찾을 수 없다면 &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;이나 이에 해당하는 사용하고 있는 이맥스 설정 파일에 다음 내용을 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lisp
(add-to-list &amp;#39;package-archives
             &amp;#39;(&amp;quot;melpa&amp;quot; . &amp;quot;http://melpa.milkbox.net/packages/&amp;quot;) t)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;다시 위로 돌아가 package-install을 하면 정상적으로 설치가 가능할 것입니다. 만약 이래도 패키지가 뜨지 않는다면 Tern 저장소의 내용을 클론해서 이맥스 디렉토리 아래의 &lt;code&gt;el&lt;/code&gt;들을 &lt;code&gt;.emacs.d&lt;/code&gt; 디렉토리 아래로 복사합니다. 복사한 후 자신의 설정 파일(기본적으로 &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;)에 아래 내용을 적절히 상황에 맞게 수정해서 추가해줍니다. &lt;code&gt;js2-mode-hook&lt;/code&gt;는 자신이 사용하는 Javascript major 모드로 바꿉니다. 그 아래 내용은 자동완성을 적용하는 부분입니다. &lt;code&gt;tern-ac-on-dot&lt;/code&gt; 설정을 통해서 emacs에서는 기본적으로  .을 입력할 때 tern 자동완성을 실행시킬 수 있습니다.&lt;/p&gt;

&lt;p&gt;```lisp
(add-to-list &amp;#39;load-path &amp;quot;~/.emacs.d/tern/&amp;quot;)
(autoload &amp;#39;tern-mode &amp;quot;tern.el&amp;quot; nil t)&lt;/p&gt;

&lt;p&gt;(add-hook &amp;#39;js2-mode-hook (lambda () (tern-mode t)))&lt;/p&gt;

&lt;p&gt;(eval-after-load &amp;#39;tern
  &amp;#39;(progn
     (require &amp;#39;tern-auto-complete)
     (setq tern-ac-on-dot t)
     (tern-ac-setup)))
```&lt;/p&gt;

&lt;p&gt;이걸로 기본적인 설정은 끝났습니다. &lt;code&gt;M-x load-file&lt;/code&gt; 명령어나 emacs를 다시 실행시켜 설정을 적용시켜줍니다. 이제 js 파일을 편집할 때(좀 더 정확히는 javascript 메이져 모드일 때), tern 마이너 모드가 실행됩니다.&lt;/p&gt;

&lt;h2&gt;자바스크립트 프로젝트 설정&lt;/h2&gt;

&lt;p&gt;tern 마이너 모드가 실행되면 자동적으로 tern 서버가 실행되고, 이 서버와 통신하면서 자동 완성을 비롯한 몇 가지 부가 기능들을 사용할 수 있게됩니다. 하지만 이 상태에선 자동완성이 될만한 표현식을 입력해봐도 거의 자동으로 완성되는 게 없습니다. 이는 tern 서버가 현재 javascript가 어떤 맥락에서 평가되는지 판단할 수 없기 때문입니다. 이를 위해서는 자바스크립트 프로젝트 단위로 &lt;code&gt;.tern-project&lt;/code&gt; 파일을 만들어야합니다.&lt;/p&gt;

&lt;p&gt;프로젝트 설정 파일의 대략적인 구조는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
{
  &amp;quot;libs&amp;quot;: [
    &amp;quot;browser&amp;quot;,
    &amp;quot;jquery&amp;quot;
  ],
  &amp;quot;loadEagerly&amp;quot;: [
  ],
  &amp;quot;plugins&amp;quot;: {
  }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;libs&lt;/code&gt;에는 tern에서 미리 정의해놓고 있는 &lt;a href="http://ternjs.net/doc/manual.html#typedef"&gt;JSON type definitions&lt;/a&gt; 형식을 따르는 라이브러리 정의 파일을 지정할 수 있습니다. &lt;a href="https://github.com/marijnh/tern/tree/master/defs"&gt;tern 저장소에서 확인할 수 있는 바&lt;/a&gt;로는 &lt;code&gt;browser&lt;/code&gt;, &lt;code&gt;chai&lt;/code&gt;, &lt;code&gt;ecma5&lt;/code&gt;,  &lt;code&gt;jquery&lt;/code&gt;, &lt;code&gt;underscore&lt;/code&gt; 다섯가지를 기본적으로 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어 &lt;code&gt;underscore&lt;/code&gt;를 사용하면 다음과 같이 자동 완성이 되는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Underscore auto complate" src="images/2014-03-12-emacs-with-tern/underscore.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;loadEagerly&lt;/code&gt; 옵션을 통해 프로젝트 아래에서 미리 읽어둘 파일을 지정할 수 있습니다. 예를 들어 d3js를 bower로 설치하고 다음과 같이 프로젝트를 설정합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
{
  &amp;quot;libs&amp;quot;: [
    &amp;quot;browser&amp;quot;,
    &amp;quot;jquery&amp;quot;
  ],
  &amp;quot;loadEagerly&amp;quot;: [
    &amp;quot;bower_components/d3js/build/d3.v3.js&amp;quot;
  ],
  &amp;quot;plugins&amp;quot;: {
  }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이를 통해서 d3js 라이브러리에 관련된 자동 완성이나 &lt;code&gt;tern-find-definition&lt;/code&gt;과 같은 기능을 사용할 수 있게됩니다. &lt;code&gt;**&lt;/code&gt;와 같은 패턴 매치도 사용가능하니 자바스크립트를 모아놓는 디렉토리를 미리 불러오는 것도 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt="d3js auto complate" src="images/2014-03-12-emacs-with-tern/d3js.png" /&gt;&lt;/p&gt;

&lt;p&gt;이외에도 Node.js 플러그인, RequireJS 플러그인, Angular.js 플러그인 등 추가적인 확장을 사용할 수 있습니다. 이에 대한 자세한 설명은 공식 문서의 &lt;a href="http://ternjs.net/doc/manual.html#plugins"&gt;서버 플러그인 섹션&lt;/a&gt;을 참조하시기 바랍니다.&lt;/p&gt;

&lt;h2&gt;Tern 사용하기 : M-x 명령어 및 단축키&lt;/h2&gt;

&lt;p&gt;tern emacs 확장에는 다음과 같은 명령어들이 정의되어있습니다. 괄호 안에 키는 기본 단축키 입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tern-get-docs(&lt;code&gt;C-c C-d&lt;/code&gt;) : 커서 위치의 문서를 찾습니다.&lt;/li&gt;
&lt;li&gt;tern-find-definition(M-. , 되돌아가기: &lt;code&gt;C-c C-r&lt;/code&gt;) : 커서 위치의 정의를 찾아갑니다.&lt;/li&gt;
&lt;li&gt;tern-rename-variable(&lt;code&gt;C-c C-c&lt;/code&gt;) : 커서 위치의 변수 이름을 변경합니다.&lt;/li&gt;
&lt;li&gt;tern-use-server : 특정 tern 서버를 지정합니다.&lt;/li&gt;
&lt;li&gt;tern-get-type : 커서 위치의 타입을 출력해줍니다.&lt;/li&gt;
&lt;li&gt;tern-highlight-refs : 커서 위치와 같은 것들을 하이라이트해줍니다.&lt;/li&gt;
&lt;li&gt;tern-find-definition-by-name : 지정한 이름의 정의를 찾아갑니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;결론&lt;/h2&gt;

&lt;p&gt;Tern과 함께 Emacs에서도 즐거운 자바스크립트 코딩을 즐기시기바랍니다. 아듀~ :)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>도커(Docker) 튜토리얼 : 0.8 맥에서 설치하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-02-11-dokcer-08-on-macosx/"/>
    <id>http://blog.nacyot.com/articles/2014-02-11-dokcer-08-on-macosx/</id>
    <published>2014-02-10T15:16:00Z</published>
    <updated>2014-04-05T18:23:48+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://docker.io"&gt;도커&lt;/a&gt;는 리눅스 위에서 격리된 또 다른 리눅스 환경을 구축할 수 있도록 해주는 가상화 어플리케이션입니다. 기존의 가상화 어플리케이션에서 하드웨어 전체를 가상화하는 것과 달리 리눅스 컨테이너를 활용하고 있는 도커는 아주 빠르고 쉽게 가상화 환경을 사용할 수 있도록 해줍니다. 이전 &lt;a href="http://blog.nacyot.com/articles/2014-01-27-easy-deploy-with-docker/"&gt;도커(Docker) 소개 글&lt;/a&gt;을 올린 바 있습니다만, 바로 얼마 전 도커가 0.8로 업데이트되었습니다. 0.8에서 가장 큰 변화중 하나는 맥을 지원하는 부분입니다. 여기서는 어떤 방식으로 맥을 지원하는 지 알아보고 실제로 설치하는 법에서 다루도록 하겠습니다.&lt;/p&gt;



&lt;h2&gt;TL;DR, 맥에서 바로 도커 시작하기&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Virtual 박스 설치&lt;/li&gt;
&lt;li&gt;docker, boot2docker 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
$ brew tap homebrew/binary
$ brew install docker boot2docker
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;boot2docker 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
export DOCKER_HOST=tcp://¶
$ ./boot2docker init
$ ./boot2docker up
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;도커 컨테이너 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
$ docker pull ubuntu
$ docker run -rm -i -t ubuntu:latest /bin/bash
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;맥에서 도커를 실행하는 원리&lt;/h2&gt;

&lt;p&gt;도커는 기본적으로 리눅스 컨테이너(이하 lxc)를 지원하는 운영체제만 사용할 수 있습니다. 처음에는 우분투만 지원을 했습니다만 현재는 좀 더 다양한 운영체제를 지원하도록 확장해나가는 과정에 있습니다. 하지만 원론적으로 lxc를 지원하고 있지 않은 윈도우나 맥에서는 도커를 사용할 수 없습니다. &lt;/p&gt;

&lt;p&gt;하지만 엄밀히 말하면 이전에도 맥이나 윈도우에서 도커를 사용하는 것이 불가능한 것은 아니었습니다. 그러면 어떻게 설치를 하는지, 간단히 말해 &lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;나 아예 별개의 가상화 어플리케이션을 통해서 리눅스 운영체제를 실행시키는 방식이었습니다. 이렇나 방식이 당연히 가능한 건, 아예 OS를 lxc를 지원하는 리눅스를 가상 머신으로 올려놓기 때문입니다. 물론 이렇게도 도커를 사용하는 것이 불가능한 것은 아닙니다만, VM의 성능도 성능이고 리눅스 운영체제에 비해서 &amp;#39;한 다리&amp;#39; 건너서 사용한다는 인상을 지우기는 어렵습니다.&lt;/p&gt;

&lt;p&gt;그런데 &lt;a href="http://blog.docker.io/2014/02/docker-0-8-quality-new-builder-features-btrfs-storage-osx-support/"&gt;도커 블로그에선 0.8 발표&lt;/a&gt;와 함께 맥의 공식 지원을 언급하고 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Today we are happy to introduce Docker 0.8, with a focus on Quality and 3 notable features: new builder instructions, a new BTRFS storage driver, and official support for Mac OSX. You can see the full Changelog on the repository, and read below for details on each feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다면 여기서 공식으로 지원한다는 얘기는 무슨 얘기일까요? 맥이 lxc를 지원하지 않는다면 네이티브에서 도커를 실행한다는 건 근본적으로 불가능합니다. 그렇다면 여전히 근본적인 해결책은 아닙니다만, 여기서 공식지원이 의미하는 바는 기존에 VM을 사용하는 부하를 극도로 줄인 환경을 도커가 직접 제공해준다는 걸 의미합니다. 가상 머신은 여전히 올라갑니다. 이 때 사용되는 운영체제가 &lt;a href="https://github.com/steeve/boot2docker"&gt;boot2docker&lt;/a&gt;라는 단지 도커만을 위한 초경량 리눅스 &lt;a href="http://tinycorelinux.net/"&gt;Tiny Core Linux&lt;/a&gt; 배포판 중 하나입니다. 이 운영체제는 RAM에서 작동하며 매우 적은 용량에 단 몇 초만에 부팅이 가능합니다(그렇다고 이야기하고 있습니다). 도커 컨테이너 만큼은 아니겠지만 매우 빠릅니다. 이러한 가상 머신 부분의 경량화와 맥 클라이언트에서 Docker 명령어를 직접 사용할 수 있게 함으로써, 맥에서 네이티브나 다름없는 도커 지원을 실현했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt="docker2boot" src="https://github-camo.global.ssl.fastly.net/fd2fda3c0d55a0a63873f4221ddbe2f1dda145c5/687474703a2f2f692e696d6775722e636f6d2f68497775644b332e676966" /&gt;&lt;/p&gt;

&lt;p&gt;네이티브 환경에 비하면 약간의 불만족은 남아있겠습니다만, 그럼에도 불구하고 개발환경을 구축하는 데는  손색이 없습니다. &lt;/p&gt;

&lt;h2&gt;맥에서 boot2docker를 활용한 도커 설치&lt;/h2&gt;

&lt;p&gt;네, 그렇다면 실제로 설치를 해보도록 하겠습니다. &lt;/p&gt;

&lt;p&gt;먼저 docker2boot를 사용하기 위해서는 &lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt;를 설치해야합니다. 공식 사이트에서 MacOSX용 dmg 파일을 다운로드 받아 설치 과정을 진행해주시기 바랍니다.&lt;/p&gt;

&lt;p&gt;도커 공식 사이트에서는 &lt;a href="http://docs.docker.io/en/latest/installation/mac/"&gt;맥에서 설치를 위한 문서&lt;/a&gt;를 제공하고 있으니 참조하시기 바랍니다. 먼저 boot2docker를 다운로드 받고 실행권한을 추가해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ mkdir ~/bin
$ cd ~/bin
$ curl https://raw.github.com/steeve/boot2docker/master/boot2docker &amp;gt; boot2docker
$ chmod +x boot2docker
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;다음으로 도커를 다운로드 받고 실행권한을 추가해줍니다. 이 때 DOCKER_HOST를 추가하는 가상 머신의 도커에 접속하기 위함입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ curl -o docker http://get.docker.io/builds/Darwin/x86_64/docker-latest
$ chmod +x docker
$ export DOCKER_HOST=tcp://
$ sudo cp docker /usr/local/bin/
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;도커와 boot2docker 설치 과정은 homebrew를 통해서도 진행이 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ brew tap homebrew/binary
$ brew install docker boot2docker
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;다음으로 boot2docker를 실행시킵니다. 이 과정을 거치기 전에 VirtualBox를 설치했는지 꼭 확인하시기 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ ./boot2docker init
$ ./boot2docker up
[2014-02-10 23:40:41] Starting boot2docker-vm...
[2014-02-10 23:41:01] Started.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;맥북 에어에서 실제로 걸린 시간은 이미지 다운로드하는데 30여초, 기동하는데 20여초가 걸렸습니다. 설치는 끝이났습니다. 이제 설치가 잘 되었는지 버전 출력을 해보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ docker version
Client version: 0.8.0
Go version (client): go1.2
Git commit (client): cc3a8c8
Server version: 0.8.0
Git commit (server): cc3a8c8
Go version (server): go1.2
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;도커 실행 테스트&lt;/h2&gt;

&lt;p&gt;그렇다면 정말로 가상머신이 잘 올라간 상태로 도커가 사용 가능한지 테스트해보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ docker pull ubuntu
Pulling repository ubuntu
eb601b8965b8: Download complete
9cc9ea5ea540: Download complete
9f676bd305a4: Download complete
9cd978db300e: Download complete
5ac751e8d623: Download complete
511136ea3c5a: Download complete
f323cf34fd77: Download complete
1c7f181e78b9: Download complete
6170bb7b0ad1: Download complete
321f7f4200f4: Download complete
7a4f87241845: Download complete
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이미지 pull도 한 번 해보고,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              13.10               9f676bd305a4        6 days ago          178 MB
ubuntu              saucy               9f676bd305a4        6 days ago          178 MB
ubuntu              13.04               eb601b8965b8        6 days ago          166.5 MB
ubuntu              raring              eb601b8965b8        6 days ago          166.5 MB
ubuntu              12.10               5ac751e8d623        6 days ago          161 MB
ubuntu              quantal             5ac751e8d623        6 days ago          161 MB
ubuntu              10.04               9cc9ea5ea540        6 days ago          180.8 MB
ubuntu              lucid               9cc9ea5ea540        6 days ago          180.8 MB
ubuntu              12.04               9cd978db300e        6 days ago          204.4 MB
ubuntu              latest              9cd978db300e        6 days ago          204.4 MB
ubuntu              precise             9cd978db300e        6 days ago          204.4 MB
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;pull 해온 이미지 리스트도 한 번 보고, 컨테이너 리스트도 출력해보죠.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS             PORTS               NAMES
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;오오 pull도 되고 images 명령어도 먹는 걸 볼 수 있습니다. 아직 실행한 컨테이너는 없으니 아무것도 뜨지 않습니다. 일단 작동하고 있는 것 같습니다. 마지막으로 컨테이너를 올려보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ docker run -rm -i -t ubuntu:latest /bin/bash
root@e616c4c3fd53:/# 
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;컨테이너 안의 쉘이 실행된 화면을 바로 확인하실 수 있습니다.&lt;/p&gt;

&lt;h2&gt;트러블 슈팅&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;
export DOCKER_HOST=tcp://¶
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;명령어를 통해 DOCKER_HOST를 반드시 설정해줘야합니다. 이 설정을 하지 않으면&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ docker images
2014/02/10 23:48:19 dial unix /var/run/docker.sock: no such file or directory
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;와 같은 에러가 발생합니다. 이는 도커가 기본적으로 로컬 머신 상의 /var/run/docker.sock를 통해서 작동하기 때문입니다. 이를 가상 머신에서 가동중인 docker와 바로 연동할 수 있도록 &lt;code&gt;tcp://&lt;/code&gt;로 연결하도록 설정해주는 것입니다. 같은 의미로 &lt;code&gt;export DOCKER_HOST=localhost&lt;/code&gt;를 실행해도 됩니다.&lt;/p&gt;

&lt;p&gt;또한 &lt;code&gt;./boot2docker&lt;/code&gt; 명령어를 통해서 &lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ ./boot2docker
Usage ./boot2docker {init|start|up|pause|stop|restart|status|info|delete|ssh|download}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;boot2docker를 재실행하거나 멈추는 작업을 수행할 수 있습니다.&lt;/p&gt;

&lt;h2&gt;정리&lt;/h2&gt;

&lt;p&gt;이제 무거운 가상 머신 없이도 맥에서 도커를 부담없이 설치하고 사용해볼 수 있습니다 &amp;gt;_&amp;lt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>깃허브(Github) 후크 API와 Slack에 알림 전달하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-01-30-github-hook-api-slack-sample/"/>
    <id>http://blog.nacyot.com/articles/2014-01-30-github-hook-api-slack-sample/</id>
    <published>2014-01-30T08:30:00Z</published>
    <updated>2014-04-05T18:23:48+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;후크(hook)는 특정 이벤트나 작업이 진행될 때 자동적으로 다른 스크립트를 실행시켜줍니다. 깃(Git)에서는 기본적으로 후크를 지원하고 있습니다. 저장소 폴더의 &lt;code&gt;.git/hooks&lt;/code&gt;에서 샘플 스크립트와 사용할 수 있는 후크 이벤트들을 확인해볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;깃허브(&lt;a href="http://github.com"&gt;Github&lt;/a&gt;)에서도 이러한 후크 기능을 지원하고 있으며 깃허브와 연동된 부분에 대한 이벤트를 추가적으로 지원하고 있습니다. 대부분의 경우 서비스 후크 기능을 통해서 다른 서비스와의 통합을 쉽게 할 수록 지원하고 있으며, 재미있게도 이렇게 다른 서비스와 통합하는 부분도 공개가 되어있어 관심이 있으시면 &lt;a href="https://github.com/github/github-services"&gt;실제 코드&lt;/a&gt;를 확인해볼 수도 있습니다. 특히 현재는 웹후크(Webhook) 기능을 추가되어 깃허브에서 서비스 후크를 지원하지 않는 서비스와도 중간에서 매개할 수 있는 서버나 통합기능이 있다면 얼마든지 활용가능합니다.&lt;/p&gt;



&lt;p&gt;후크란 일반적인 API와는 반대 방향으로 작동합니다. 예를 들어 보통 API를 호출하면 어떤 정보를 되돌려줍니다만, 후크는 등록이 되어있으면 어떤 이벤트가 발생할 때 거꾸로 깃허브에서 내가 등록한 Webhook URL로 정보를 보내줍니다. 여기서는 깃허브 Hook API를 조작하는 방법에 대해서 간략히 살펴보고 하나의 예제로 깃헙에서 보내주는 웹후크 알림을 처리할 수 있는 간단한 &lt;a href="http://www.padrinorb.com/"&gt;Padrino&lt;/a&gt; 서버를 만들어 &lt;a href="https://slack.com/"&gt;슬랙(Slack)&lt;/a&gt;라는 협엄&amp;amp;채팅 서비스로 알림을 보내는 과정을 다뤄보겠습니다.&lt;/p&gt;

&lt;h2&gt;깃허브(Githbu) 후크 API&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://developer.github.com/v3/repos/hooks/"&gt;Hooks | GitHub API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API의 자세한 사항은 깃허브 API 문서에서 확인할 수 있습니다. 여기서는 깃허브에서 지원하는 이벤트 종류와 웹후크를 추가했을 때 어떤 이벤트들이 추가되는지 살펴보겠습니다.&lt;/p&gt;

&lt;h3&gt;지원하는 후크 이벤트 종류&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;push : 저장소에 푸쉬가 들어왔을 때 발생. 기본 이벤트&lt;/li&gt;
&lt;li&gt;issues: 이슈가 열리거나 닫혔을 때 발생.&lt;/li&gt;
&lt;li&gt;issue_comment: 이슈에 코멘트가 달렸을 때 발생.&lt;/li&gt;
&lt;li&gt;commit_comment: 커밋에 코멘트가 달렸을 때 발생.&lt;/li&gt;
&lt;li&gt;create: 저장소나 브랜치, 태그가 추가되었을 때 발생.&lt;/li&gt;
&lt;li&gt;delete: 브랜치나, 태그가 삭제되었을 때 발생.&lt;/li&gt;
&lt;li&gt;pull_request: 풀리퀘스트가 열리거나 닫혔을 때, 동기화 되었을 때 발생.&lt;/li&gt;
&lt;li&gt;pull&lt;em&gt;request&lt;/em&gt;review_comment: 풀리퀘스트 리뷰 안의 커밋에 커멘트가 달렸을 때.&lt;/li&gt;
&lt;li&gt;gollum: 위키가 업데이트되었을 때 발생.&lt;/li&gt;
&lt;li&gt;watch: 사용자가 저장소를 와치했을 때 발생.&lt;/li&gt;
&lt;li&gt;release: 릴리즈가 추가되었을 때 발생.&lt;/li&gt;
&lt;li&gt;fork: 저장소가 포크되었을 때 발생.&lt;/li&gt;
&lt;li&gt;member: Organization의 저장소가 아닐 때 멤버가 추가되면 발생.&lt;/li&gt;
&lt;li&gt;public: 저장소가 비공개에서 공개로 전환되었을 때 발생.&lt;/li&gt;
&lt;li&gt;team_add: 저장소에 팀이 추가되었거나 변경되었을 때 발생.&lt;/li&gt;
&lt;li&gt;status: API를 통해 커밋의 상태가 변경되었을 때 발생.&lt;/li&gt;
&lt;li&gt;deployment: API를 통해 저장소의 새로운 배포가 생성되었을 때 발생.&lt;/li&gt;
&lt;li&gt;deployment_status: API를 통해서 저장소의 특정 배포의 상태가 변경되었을 때 발생.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이벤트가 발생했을 때 깃허브에서 보내주는 내용은 &lt;a href="http://developer.github.com/v3/activity/events/types/#deploymentevent"&gt;Event Types&lt;/a&gt;에서 자세히 확인할 수 있으며 배포에 관한 부분은 &lt;a href="http://developer.github.com/v3/repos/deployments/#list-deployment-statuses"&gt;Deployments API&lt;/a&gt;를 확인하시기 바랍니다.&lt;/p&gt;

&lt;h3&gt;저장소에 웹후크 등록하고 상태 확인하기&lt;/h3&gt;

&lt;p&gt;깃허브에서 저장소에 웹후크나 서비스 후크를 등록하기 위해서는 저장소의 관리 권한이 있어야합니다. 먼저 저장소의 오른쪽에 보이는 Settings 메뉴에 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Github settings" src="images/2014-01-30-github-hook-api-slack-sample/settings.png" /&gt;&lt;/p&gt;

&lt;p&gt;들어와서 왼쪽에 보시면 Service Hooks라는 메뉴를 찾을 수 있습니다. Service Hooks 누르면 Github에서 바로 통합 가능한 서비스 리스트들을 전부 확인할 수 있습니다. 채팅 서비스인 &lt;a href="http://hipchat.com/"&gt;Hipchat&lt;/a&gt;을 비롯해, 빌드 서비스인 &lt;a href="https://circleci.com/"&gt;CircleCI&lt;/a&gt;, &lt;a href="https://travis-ci.org/"&gt;Travis&lt;/a&gt;, 코드 매트릭스 관리 서비스인 &lt;a href="https://codeclimate.com/?v=original"&gt;Code Climate&lt;/a&gt;, 테스트 커버리지 리포트 서비스인 &lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt;등 다양한 서비스를 지원하고 있습니다. 여기서는 맨 위에 있는 Webhook URLs를 사용하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Webhook" src="images/2014-01-30-github-hook-api-slack-sample/webhook.png" /&gt;&lt;/p&gt;

&lt;p&gt;Webhook URLs를 클릭하시면 이벤트가 발생했을 때 정보를 받을 URL을 지정할 수 있습니다. 아직 후크 메시지를 받아 처리할 수 있는 서버가 없으므로 여기서는 서버를 등록하면 어떤 식으로 메시지가 오는 지, 어떤 이벤트들을 등록되어있는지 보여드리도록 하겠습니다. Webhook URLs에 &lt;code&gt;notifier.nacyot.com&lt;/code&gt;라는 Slack에 깃허브 저장소의 변경사항을 전달해주는 어플리케이션을 등록했다고 가정해보죠. &lt;/p&gt;

&lt;p&gt;깃허브에서 저장소에 등록된 후크 정보를 확인하는 API URL은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
https://api.github.com/repos/&amp;lt;계정이름&amp;gt;/&amp;lt;저장소이름&amp;gt;/hooks
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이제 &lt;code&gt;curl&lt;/code&gt;을 통해서 Github에 Hook가 어떻게 등록되어있는지 요청을 보내보도록하겠습니다. &lt;code&gt;-u&lt;/code&gt; 플래그 뒤로는 인증을 할 계정이름을 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Commend &amp;gt; curl -u nacyot https://api.github.com/repos/nacyot/slack_notifier/hooks
Enter host password for user &amp;#39;nacyot&amp;#39;:
[
  {
    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/repos/nacyot/bbapi/hooks/1829382&amp;quot;,
    &amp;quot;test_url&amp;quot;: &amp;quot;https://api.github.com/repos/nacyot/bbapi/hooks/1829382/test&amp;quot;,
    &amp;quot;id&amp;quot;: 1829382,
    &amp;quot;name&amp;quot;: &amp;quot;web&amp;quot;,
    &amp;quot;active&amp;quot;: true,
    &amp;quot;events&amp;quot;: [
      &amp;quot;push&amp;quot;,
    ],
    &amp;quot;config&amp;quot;: {
      &amp;quot;url&amp;quot;: &amp;quot;notifier.nacyot.com&amp;quot;,
      &amp;quot;content_type&amp;quot;: &amp;quot;form&amp;quot;,
      &amp;quot;insecure_ssl&amp;quot;: &amp;quot;1&amp;quot;
    },
    &amp;quot;last_response&amp;quot;: {
      &amp;quot;code&amp;quot;: 504,
      &amp;quot;status&amp;quot;: &amp;quot;timeout&amp;quot;,
      &amp;quot;message&amp;quot;: &amp;quot;Service Timeout&amp;quot;
    },
    &amp;quot;updated_at&amp;quot;: &amp;quot;2014-01-28T01:29:02Z&amp;quot;,
    &amp;quot;created_at&amp;quot;: &amp;quot;2014-01-26T02:27:38Z&amp;quot;
  }
]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 응답이 되돌아 옵니다. 이는 현재 등록된 후크의 URL과 어떤 이벤트가 등록되어있는지를 비롯한 여러가지 정보를 담고 있습니다. 특히 주목할 부분은 &lt;code&gt;id&lt;/code&gt;와 &lt;code&gt;events&lt;/code&gt;그리고 &lt;code&gt;url&lt;/code&gt; 부분입니다. 웹에서 지정한대로 정상적으로 등록이 된 걸 알 수 있습니다. 단, 웹에서 등록을 하면 기본 이벤트인 &lt;code&gt;push&lt;/code&gt; 이벤트밖에 등록이 되지 않습니다. 그렇다면 이슈에 관련된 이벤트나 위키가 수정되었을 때 알림을 받고자 한다면 어떻게 해야할까요?&lt;/p&gt;

&lt;p&gt;여기서는 마찬가지로 &lt;code&gt;curl&lt;/code&gt;을 사용해 새로운 이벤트를 등록해보겠습니다. 여기서 등록할 이벤트는 &lt;code&gt;issue&lt;/code&gt;, &lt;code&gt;issue_comment&lt;/code&gt;, 그리고 위키 업데이트를 알려주는 &lt;code&gt;gollum&lt;/code&gt; 이벤트입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
curl -u nacyot https://api.github.com/repos/nacyot/slack_notifier/hooks/1829382 -X PATCH -d &amp;#39;{&amp;quot;add_events&amp;quot;: [&amp;quot;issue&amp;quot;, &amp;quot;issue_comment&amp;quot;, &amp;quot;gollum&amp;quot;] }&amp;#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위에서 후크 정보를 조회했던 &lt;code&gt;curl&lt;/code&gt; 정보를 참고로 적당한 형태로 바꿔주시기 바랍니다. 특히 여기서는 &lt;code&gt;/hooks/&lt;/code&gt; 뒤에 앞서서 조회했던 후크의 &lt;code&gt;id&lt;/code&gt; 값을 집어넣어줘야합니다. 다시 처음 url로 후크 정보를 조회해보면 정상적으로 이벤트들이 추가된 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
...
    &amp;quot;events&amp;quot;: [
      &amp;quot;push&amp;quot;,
      &amp;quot;issue&amp;quot;,
      &amp;quot;issue_comment&amp;quot;,
      &amp;quot;gollum&amp;quot;
    ],
...
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이제 저장소에서 이슈와 관련 이벤트가 발생하거나 위키에 페이지가 추가되거나 업데이트될 때 알림이 오게 됩니다. 이번엔 실제로 알림이 오는 것을 확인해보겠습니다. 위키 페이지를 하나 생성해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Creating Wiki page" src="images/2014-01-30-github-hook-api-slack-sample/wiki.png" /&gt;&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;notifier.nacyot.com&lt;/code&gt;에 요청이 들어오는지 확인해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
07:15:35 web.1  |   DEBUG -      POST (1.6938s) / - 200 OK
07:15:35 web.1  | 192.30.252.54 - - [30/Jan/2014 07:15:35] &amp;quot;POST / HTTP/1.1&amp;quot; 200 - 1.6956
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 들어오네요. 네, 앞서서 이야기했듯이 이 서버가 해주는 역할은 깃허브로부터 후크를 받고 이를 Slack이라는 채팅 서비스에 연결해주는 역할을 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Slack Room" src="images/2014-01-30-github-hook-api-slack-sample/github_slack.png" /&gt;&lt;/p&gt;

&lt;p&gt;채팅방에도 메시지가 잘 들어오는 것을 알 수 있습니다. (시간 차이는 시간 설정 때문에 9시간 차이가 나서 그렇습니다)&lt;/p&gt;

&lt;h2&gt;Slack과 깃허브 저장소 이벤트 통합&lt;/h2&gt;

&lt;p&gt;약간 순서가 거꾸로된 듯한 느낌이 들기도 합니다만, 여기서부터는 위에서 다룬 Slack에 메시지를 전달하는 서버에 대해서 다루도록 하겠습니다. 위에서 다룬 이벤트의 종류만 봐도 알 수 있습니다만, 의외로 Github에서는 다양한 이벤트들을 지원하고 있다는 것을 알 수 있습니다. 그리고 이러한 이벤트들이 깃허브 생태계를 구성하는 강력한 원동력이 되고 있습니다. 깃허브에서 서비스 후크로 바로 통합할 수 있는 서비스라면 두 서비스 간의 통합 기능을 이용하는 게 가장 편리합니다. 하지만 원하는 기능을 직접 구현하고 싶다거나 아직 서비스 후크가 갖춰지지 않은 서비스와 통합을 하려는 경우엔 직접 깃허브에서 보내는 메시지를 처리해줄 서버를 만들 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어서 제가 속해있는 Remotty 팀에서는 지금까지 힙챗(Hipchat)이라는 협업 채팅 툴을 사용해왔습니다만, 최근에 공개된 Slack이라는 서비스로 갈아탈 준비를 하고 있습니다.[^1] 하지만 깃허브과 통합을 하는데 약간의 애로사항이 있어서 이전을 포기했습니다. 얼마 전까지만 해도 Webhook을 통해서 Slack 서비스를 연동하면 커밋이 푸쉬되는 알림밖에는 전해주질 않았습니다. Hipchat 같은 경우는 깃허브에서 다루는 거의 모든 이벤트를 전달해줍니다. 특히 이슈와 관련된 부분도 필수적이고, 위키를 적극 사용하고 있었기에 이런 알림이 비활성화되는 것은 치명적인 단점으로 부각될 수밖에 없었습니다. 그리고 조금 더 올라가보면 바로 그런 통합이 가능했기 때문에 Hipchat을 사용하기로 했었으니까요.&lt;/p&gt;

&lt;p&gt;이러한 문제에 대해서 슬랙 쪽 통합 방식이 최근에 변경되면서 현재는 이슈와 풀리퀘스트 부분의 알림을 보내주도록 추가가 되었습니다. 원래는 Slack의 hook_url을 직접 추가하는 방식으로 통합을 했습니다만, 최근에는 Github 인증을 하면 Slack에서 hook url을 추가해주고 이슈와 풀리퀘스트 관련 이슈들을 더해줍니다. 이러한 약간의 변화가 다시 슬랙으로 넘어가자는 의견에 힘을 실어주었습니다. 하지만 여전히 위키를 지원해주지 않는 문제가 남아있었습니다.&lt;/p&gt;

&lt;p&gt;[^1]: 현재 완전히 이전한 상태입니다.&lt;/p&gt;

&lt;p&gt;금방 지원해 줄 것 같기는 했습니다만, 당장 필요했던 관계로 직접 알림을 보내주는 서버를 만들기로 했습니다. 현재 루비의 Padrino[^2]로 만든 깃허브에서 위키 변경 사항 알림 &lt;a href="https://github.com/nacyot/slack_notifier"&gt;서버를 slack_notifier&lt;/a&gt;라는 이름으로 올려둔 상태입니다. 이 서버가 하는 일은 정말 딱 위키 알림을 Github에서 받고 Slack으로 전달해주는 일뿐입니다.&lt;/p&gt;

&lt;p&gt;[^2]: Padrino는 Sinatra를 확장한 경량 웹프레임워크입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nacyot/slack_notifier/blob/master/app/controllers/hook.rb"&gt;로직&lt;/a&gt;도 정말 단순합니다. &lt;code&gt;hook_controller&lt;/code&gt;에 다음과 같은 내용이 들어가있을 뿐입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Slack::Post.configure(
                      subdomain: params[:subdomain],
                      token: params[:token],
                      username: &amp;quot;Github&amp;quot;
                      )
Slack::Post.post &amp;quot;#{login}#{action} &amp;lt;#{url}|#{title}&amp;gt;&amp;quot;, &amp;quot;#&amp;quot; + params[:room]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;내부적으로 [slack-post][slack-post]라는 젬을 사용해 깃허브에서 서버의 특정 페이지에 접근하면(이벤트를 알려주면), Slack에 메시지를 보내주는 방식입니다. 현재는 서버에 데이터를 저장하는 기능이 없어서 token과 메시지를 전달할 곳을 전부 Url 인자로 받아서 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;자, 그럼 직접 사용해보도록 하죠.&lt;/p&gt;

&lt;h3&gt;도커(Docker) X slack_notifier&lt;/h3&gt;

&lt;p&gt;루비 서버를 올리는 게 어려운 일은 아닙니다만, 부가적인 처리 과정이나 설명해질 부분이 많아지므로 해당하는 부분에 대해서는 다루지 않도록 하겠습니다. 여기서는 이러한 과정을 생략하기 위해 이전 포스트에서 이야기했던 [도커(Docker)]를 출동시키겠습니다. 빠밤.&lt;/p&gt;

&lt;p&gt;먼저 도커를 설치합니다. (여기서는 우분투를 가정합니다. 필요한 경우 가상머신이나 클라우드 서비스를 사용하시기 바랍니다. Remotty 팀에서도 SKT에서 지원받고 있는 VM을 활용해 개발 지원 서비스들을 운영중에 있습니다)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ curl -s https://get.docker.io/ubuntu/ | sudo sh
...
$ docker --version
Client version: 0.7.6
Go version (client): go1.2
Git commit (client): bc3b2ec
Server version: 0.7.6
Git commit (server): bc3b2ec
Go version (server): go1.2
Last stable version: 0.7.6
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;다음으로 어플리케이션을 클론하고 &lt;code&gt;docker build&lt;/code&gt;를 수행합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ git clone https://github.com/nacyot/slack_notifier
$ docker build -t nacyot/slack_notifier:latest -q=true ./slack_notifier
...
$ docker images
REPOSITORY              TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
nacyot/slack_notifier   latest              d35792687e8c        4 days ago          751.1 MB
ubuntu                  12.04               8dbd9e392a96        9 months ago        128 MB
ubuntu                  12.10               b750fe79269d        10 months ago       175.3 MB
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker imaegs&lt;/code&gt; 명령어로 정상적으로 빌드된 것을 확인할 수 있습니다. 이제 생성한 이미지로부터 실제 어플리케이션 컨테이너를 실행시킵니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ docker run -d -p 4000:4000 nacyot/slack_notifier:latest
7c42ae39691c
$ docker ps
CONTAINER ID        IMAGE                         COMMAND                CREATED             STATUS              PORTS                    NAMES
7c42ae39691c        nacyot/slack_notifier:first   /bin/sh -c bundle ex   4 days ago          Up 2 days           0.0.0.0:4000-&amp;gt;4000/tcp   slack_notifier  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt;를 통해서 컨테이너가 정상적으로 실행되고 있는 것을 확인할 수 있습니다. 이제 깃허브에 WebHook을 등록할 차례입니다. 그 전에 먼저 Slack 쪽에서 서비스 등록을 하고 토큰을 생성할 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
http://&amp;lt;SLACK_SUBDOMAI&amp;gt;.slack.com/services/new/incoming-webhook
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위 주소로 접속하시면 incoming-webhook을 바로 등록할 수 있습니다. &lt;code&gt;Add integration&lt;/code&gt; 버튼을 누르면 오른쪽에 토큰 정보가 출력됩니다. 토큰 정보를 가지고 아래 URL을 완성합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
http://&amp;lt;서버주소&amp;gt;:4000/hook?subdomain=&amp;lt;SLACK_SUBDOMAIN&amp;gt;&amp;amp;token=&amp;lt;SLACK_TOKEN&amp;gt;&amp;amp;room=&amp;lt;SLACK_ROOM&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SLACK_ROOM에는 알림을 전달할 채널 이름을 지정합니다. 이제 이 URL을 원하시는 Github 저장소의 WebHook에 등록만 해주면 모든 준비는 완료됩니다. 하지만 여기까지 설정하고 위키를 수정해도 알림은 가지 않습니다. 앞서서 Github API에 대해서 다룬 바 있습니다만, 기본 Hook로는 &lt;code&gt;push&lt;/code&gt;밖에 등록이 되지 않기 때문입니다. 이 서버에서 인식할 수 있는 이벤트는 위키를 다루는 &lt;code&gt;gollum&lt;/code&gt;밖에 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
curl -u &amp;lt;USER_NAME&amp;gt; https://api.github.com/repos/&amp;lt;USER_NAME&amp;gt;/&amp;lt;REPO_NAME&amp;gt;/hooks/&amp;lt;HOOK_ID&amp;gt; -X PATCH -d &amp;#39;{&amp;quot;add_events&amp;quot;: [&amp;quot;gollum&amp;quot;] }&amp;#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;앞서 다룬 것과 마찬가지 방법으로 &lt;code&gt;gollum&lt;/code&gt; 이벤트를 추가해줍니다. 네 이걸로 모든 설정이 끝났습니다. 이제 해당하는 저장소의 위키를 수정해보면 서버에 알림이 가고 서버가 Slack으로 위키를 수정했다는 알림이 가게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Slack Room" src="images/2014-01-30-github-hook-api-slack-sample/github_slack.png" /&gt;&lt;/p&gt;

&lt;p&gt;만약 정상적으로 메시지가 가지 않을 경우엔 Github Webhook 등록 페이지에서 Test Hook 버튼을 누르고 &lt;code&gt;docker logs &amp;lt;CONTAINER_ID&amp;gt;&lt;/code&gt; 명령어를 통해서 요청이 정상 전달되는지부터 확인할 필요가 있습니다. 일단 이러한 방법을 통해서 무사히 Slack으로 이전을 마쳤습니다.&lt;/p&gt;

&lt;h2&gt;정리&lt;/h2&gt;

&lt;p&gt;네, 정리하겠습니다.&lt;/p&gt;

&lt;p&gt;이 글에서는 Github Hook API 서버를 다루고 중간에서 깃허브이 전달해주는 메시지를 처리하는 서비스를 소개해보았습니다. 여기서 든 예제는 팀의 필요에 기반해서 만들어진 정말 간단한 예제입니다만, 필요하다면 좀 더 복잡하고 고도화된 서버를 개발할 수도 있을 것입니다.&lt;/p&gt;
</content>
  </entry>
</feed>
