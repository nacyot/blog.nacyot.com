<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nacyot의 프로그래밍 이야기</title>
  <subtitle>Nacyot의 프로그래밍 이야기</subtitle>
  <id>http://blog.nacyot.com/</id>
  <link href="http://blog.nacyot.com/"/>
  <link href="http://blog.nacyot.com/feed.xml" rel="self"/>
  <updated>2014-08-04T15:15:03Z</updated>
  <author>
    <name>nacyot(Daekwon Kim)</name>
  </author>
  <entry>
    <title>Docker Korea 스터디 그룹 두번째 모임</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-08-04-docker-korea-secord/"/>
    <id>http://blog.nacyot.com/articles/2014-08-04-docker-korea-secord/</id>
    <published>2014-08-04T15:15:03Z</published>
    <updated>2014-08-04T15:39:15+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;얼마 전 &amp;#39;도커 코리아&amp;#39;라는 이름으로 스터디를 진행한다는 이야기를 전한 바 있습니다. 그 후로 시간이 흘러 지난 8월 2일에 도커 코리아 두번째 모임을 가졌습니다. 이번 스터디는 시범적인 차원에서 공개적으로 진행되었습니다. 단 아직 정기적인 스터디 지원이 확정되지 않아, 이번 모임은 소정의 참가비와 부족한 부분은 리모티 재정의 지원으로 이루어졌습니다. 리모티 팀원들을 비롯해 총 16분이 참석해 자리를 빛내주셨습니다 :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;이 글에서는 스터디 그룹에서 공유한 내용들을 간략히 정리합니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커를-이용한-파이썬-모듈-배포하기'&gt;도커를 이용한 파이썬 모듈 배포하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37580971" width="600" height="440" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/litiblue/ss-37580971" title="도커를 이용한 파이썬 모듈 배포하기" target="_blank"&gt;도커를 이용한 파이썬 모듈 배포하기&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/litiblue" target="_blank"&gt;JunSeok Seo&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/RRT58hbDXNs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;먼저 Litiblue 님이 Docker를 이용해 파이썬 모듈을 배포한 경험에 대해서 발표해주셨습니다. 이 발표에서는 도커에 대한 전반적인 소개와 일반적인 서버에 직접 어플리케이션을 배포하는 것과 그로 인해 생기는 문제점을 도커를 통해서 어떻게 해결할 수 있는 지에 대해서 이야기해주셨습니다. 예를 들어 Litiblue 님이 배포하고자 했던 파이선 어플리케이션에는 APScheduler와 RPyC라는 라이브러리에 의존성이 있는데, 이러한 라이브러리들이 파이썬의 버전에 따라서 사용법이나 실행경로가 바뀌면서 생길 수 있는 있다고 합니다. 이러한 문제들을 도커를 통해서 어떻게 해결할 수 있는지 보여주셨습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커로-고스트-블로그-플랫폼-5분만에-설치하기'&gt;도커로 고스트 블로그 플랫폼 5분만에 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//slides.com/meoooh/setup-ghost-via-docker/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="600" height="445" src="//www.youtube.com/embed/MGXMRJP4LhQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;다음으로 Han 님께서 &amp;#39;도커로 고스트 블로그 플랫폼 5분만에 설치하기&amp;#39;를 발표해주셨습니다. 최근에 유행하는 Ghost라고 하는 유명한 블로그 플랫폼이 있습니다만, 이 블로그 플랫폼을 도커를 써서 어떻게 배포할 수 있는 지에 대해서 다루고있습니다. 5분만에 배포하기라고 쓰고, 고스프 플랫폼 도커로 배포하면서 겪은 삽질기로 내용이 변모한 감이 없지 않아있었습니다만 :) 도커 파일 최적화, 이미지간 연결, .dokcerignore 파일의 사용법 등 도커를 사용하면서 필연적으로 궁금하게 되고, 활용해야만한 하는 많은 이야기들을 담고 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커(docker)-메트릭스-&amp;amp;-로그-수집'&gt;도커(Docker) 메트릭스 &amp;amp; 로그 수집&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37592250" width="600" height="440" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/ext/docker-37592250" title="도커(Docker) 메트릭스 &amp;amp; 로그 수집" target="_blank"&gt;도커(Docker) 메트릭스 &amp;amp; 로그 수집&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/ext" target="_blank"&gt;Daekwon Kim&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/eFPsz0oCLSs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;마지막 발표는 제가 &amp;#39;Docker와 로그 &amp;amp; 메트릭스 수집&amp;#39;이라는 주제로 발표를 했습니다. 로그 &amp;amp; 메트릭스 수집은 사실 새삼스럽게 나온 문제는 아닙니다만, 이러한 &amp;#39;기존의 문제&amp;#39;가 도커가 나오면서 어떻게 변해야하고, 어떤 방향으로 나아갈 것인지에 대해서 이야기했습니다. ElasticSearch와 Kibana, Graphite와 Grafana를 설치하고 로그 수집을 시연하는 거창한 데모를 준비했습니다만, 훌륭하게 실패하고 다행히 미리 준비해둔 이미지로 대체했습니다 ㅜ&lt;/p&gt;

&lt;p&gt;로그 수집과 메트릭스에 관한 이야기는 지금 제일 관심있는 주제인 관계로 이 블로그에서도 자주 이야기해나갈 생각입니다. 기회가 되면 더 보충해나가도록 하죠.&lt;/p&gt;

&lt;p&gt;Docker Korea 두번째 모임에서는 이와 같이 3가지 주제에 대해서 공유했습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='service-discovery-행아웃'&gt;Service Discovery 행아웃&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;오프라인 모임과 더불어 7월 30일에는 온라인 행아웃으로 Service Discovery 도구들에 대해서 이야기했습니다. Docker가 어플리케이션 배포의 복잡도를 확 낮춰주는 어플리케이션이라면 이렇게 배포가 되는 수많은 노드와 서비스들을 관리하는 게 그 다음으로 다뤄야할 주제입니다. 그런 이유로 Service Discovery는 현재 Docker와 함께 뜨거운 화두가 되고 있는 주제 중 하나입니다. 다들 아직 이러한 도구들에 대한 이해가 부족하다는 공감이 있어서 각자 한가지 씩 Service Discovery 도구들을 리뷰하는 시간을 가졌습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/nacyot/514b904f7ae569e801e4"&gt;https://gist.github.com/nacyot/514b904f7ae569e801e4&lt;/a&gt;&lt;/p&gt;

&lt;iframe src="//slides.com/subicura/coreos-study/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="//slides.com/changhoonjeong/docker-ambassador/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/jBK3T1-1QdI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;이 행아웃에서는 Seapy 님이 Docker ambassador 패턴에 대해서 발표해주셨고, 그 다음으로 제가 Consul에 대해서 발표했습니다. 마지막으로 Subicura 님이 CoreOS와 etcd와 fleet를 활용한 간단한 사용 예제를 보여주셨습니다.&lt;/p&gt;

&lt;p&gt;아직 확정된 바는 없습니다만, 아마 여기서 논의한 이야기를 각자 좀 더 발전 시켜 다음 모임에서 발표를 하게 되지 않을까 생각하고 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='정리'&gt;정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;지난 번 모임이후 진행된 사항을 정리해보았습니다.&lt;/p&gt;

&lt;p&gt;다다음주가 황금연휴(?)고, 격주 진행시 pycon과 겹치는 관계로 아마 다음 모임은 23일이 될 것으로 생각하고 있습니다. 아직 스터디 지원 문제나 고정된 장소가 확정되지 않은 상태이긴 한데, 아마 확정되는대로 조만간 세번째 모임도 공지를 할 예정입니다.&lt;/p&gt;

&lt;p&gt;모임에 참여해주신 모든 분들 다시 한 번 감사드립니다. 다들 어디 숨어계셨나 했더니 :) Docker Korea는 도커를 비롯해 클라우드나 서버 운영 전반에 관심있으신 분들 모두에게 열려있습니다. 특히 경험 공유나 주제 발표하시고 싶으신 분은 더더욱 우대합니다! 관심있으신 분들은 포럼에 들러주시고 대화방에도 참여해주세요.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>리눅스에서 터미널과 클립보드 연동하기 - Xclip과 Tmux</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-07-29-linux-terminal-and-copy-integration/"/>
    <id>http://blog.nacyot.com/articles/2014-07-29-linux-terminal-and-copy-integration/</id>
    <published>2014-07-29T15:25:00Z</published>
    <updated>2014-08-04T15:39:15+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/terminal' rel='noindex,nofollow'&gt;터미널&lt;/a&gt;&lt;/span&gt; 환경과 GUI 환경은 대개 상당히 동떨어진 환경으로 이 둘을 스무스하게 연동하는 것은 작업환경을 갖추는 데 있어서 중요한 주제 중에 하나이다. 이 연결고리가 잘 연결되어있어야 작업 효율도 올라간다. 이 글에서는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/xclip' rel='noindex,nofollow'&gt;Xclip&lt;/a&gt;&lt;/span&gt;를 통해서 터미널 환경의 문자열을 리눅스 GUI 환경의 클립보드로 복사하는 법과 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/tmux' rel='noindex,nofollow'&gt;Tmux&lt;/a&gt;&lt;/span&gt;의 복사 모드와 Xclip을 연동하는 법을 알아본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='xclip'&gt;Xclip&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;a name='xclip-설치'&gt;Xclip 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/ubnutu' rel='noindex,nofollow'&gt;Ubnutu&lt;/a&gt;&lt;/span&gt;에서 Xclip는 아래 명령어로 설치할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install -y xclip
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 설치가 되었는지 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;xclip -version
&lt;/span&gt;&lt;span id="line-2"&gt;xclip version 0.12
&lt;/span&gt;&lt;span id="line-3"&gt;Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; 2001-2008 Kim Saunders et al.
&lt;/span&gt;&lt;span id="line-4"&gt;Distributed under the terms of the GNU GPL
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;버전 정보가 정상적으로 출력된다면 정상적으로 설치된 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='xclip으로-복사하기'&gt;Xclip으로 복사하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Xclip의 기본적인 사용법은 간단하다. 리눅스 커맨드의 출력 결과를 파이프라인으로 넘겨주면 Xclip이 그 결과를 GUI 환경의 클립보드에 저장해준다. 예를 들어 &lt;code&gt;date&lt;/code&gt; 명령어를 사용하면 아래와 같이 출력된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;date
&lt;/span&gt;&lt;span id="line-2"&gt;Tue Jul 29 23:35:59 KST 2014
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;터미널 어플리케이션마다 약간의 차이는 있지만 보통 이러한 출력을 복사하기 위해서는 마우스로 문자열을 선택하고 복사를 하거나 그것도 잘 안 되면 마우스 오른쪽 버튼을 눌러서 컨텍스트 메뉴에서 복사하기를 클릭해줘야한다.&lt;/p&gt;

&lt;p&gt;같은 상황에서 &lt;code&gt;date&lt;/code&gt;의 출력을 복사할 때 xclip을 사용하면 아래의 명령어를 실행하면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;date &lt;span class="p"&gt;|&lt;/span&gt; xclip -selection clipboard
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;복사가 잘 되었는지 GUI 에디터에서 Ctrl + v 로 복사해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/FPZg8Fy.png" alt="Copy &amp;amp; Paste"&gt;
&lt;p class="shape-title"&gt;Copy &amp;amp; Paste&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 출력되는 것을 알 수 있다. 표준 출력의 내용을 파이프로 넘겨주기만 하면 복사가 이뤄지므로 훨씬 더 다양한 활용이 가능하다. 예를 들어 시스템 정보를 출력해서 바로 클립보드로 보낼 수도 있고, &lt;code&gt;cat&lt;/code&gt;과 함께 사용하면 아주 킨 파일을 바로 클립보드로 보낼 수도 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /var/log/syslog &lt;span class="p"&gt;|&lt;/span&gt; xclip -selection clipboard
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;클립보드가 훨씬 더 강력해질 것이다.&lt;/p&gt;

&lt;p&gt;계속 긴 옵션을 사용하는 것은 귀찮은 일이므로 alias를 사용하면 더 편리하게 사용할 수 있다. 필요한 경우 alias 셸 설정(~/.zshrc 등)에 포함시킨다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xclip -selection clipboard&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /var/log/syslog &lt;span class="p"&gt;|&lt;/span&gt; copy
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a name='xclip-함정(?)'&gt;Xclip 함정(?)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;몇몇 예제에서는 &lt;code&gt;-selection clipboard&lt;/code&gt; 옵션 없이 xclip을 사용하기도 하는데 이렇게 사용할 때는 조심할 필요가 있다. X11의 클립보드는 하나가 아니다. 분명 위의 옵션을 명시적으로 주지 않아도 복사는 일어난다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;date &lt;span class="p"&gt;|&lt;/span&gt; xclip
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;분명히 정상적으로 복사되었지만 아마 일반적으로 Ctrl + v 키로 복사한 내용을 가져오지 못 할 것이다. 이렇게 복사한 경우 마우스 가운데 버튼을 통해서 복사한 내용을 가져올 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='xclip으로-붙여넣기'&gt;Xclip으로 붙여넣기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;GUI 클립보드의 내용을 표준 출력에 출력하는 것은 아래 명령어로 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;xclip -o
&lt;/span&gt;&lt;span id="line-2"&gt;Tue Jul 29 23:35:59 KST 2014
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='tmux와-연동하기'&gt;Tmux와 연동하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Tmux는 다수의 셸을 동시에 띄워놓고 사용할 수 있는 도구이다. Tmux를 사용하면 세션을 통한 프로젝트 관리 등 더 많은 일을 할 수 있지만, 여기서는 간단히만 이해하고 넘어가자. Tmux에서는 터미널 어플리케이션의 스크롤 기능이 자체적인 출력 관리를 수행하며, Copy Mode를 통해서 이렇나 출력들에 대해서 이동하고 복사까지 할 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 복사 모드를 설명하기에 앞서 Tmux에서는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/vi' rel='noindex,nofollow'&gt;vi&lt;/a&gt;&lt;/span&gt;나 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/emacs'&gt;emacs&lt;/a&gt;&lt;/span&gt; 모드를 통해서 키 설정을 사용할 수 있다. 이 설정은 &lt;code&gt;~/.tmux.conf&lt;/code&gt; 파일에 아래 옵션을 통해서 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;vi 모드를 사용하고자 하면 아래와 같이 설정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="n"&gt;vi&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;emacs 모드를 사용하고자 하면 아래와 같이 설정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="n"&gt;emacs&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 복사모드를 사용해보자. Tmux 내에서 복사 모드는 &lt;code&gt;^b [&lt;/code&gt; 키로 시작하고, &lt;code&gt;^b ]&lt;/code&gt;로 종료한다. 복사 모드 내에서도 vi나 emacs 모드에 따라서 아래의 단축키들을 사용할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;Function&lt;/span&gt;                &lt;span class="n"&gt;vi&lt;/span&gt;             &lt;span class="n"&gt;emacs&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;Back&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;indentation&lt;/span&gt;     &lt;span class="o"&gt;^&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;Clear&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;         &lt;span class="n"&gt;Escape&lt;/span&gt;         &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;Copy&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;          &lt;span class="n"&gt;Enter&lt;/span&gt;          &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;             &lt;span class="n"&gt;j&lt;/span&gt;              &lt;span class="n"&gt;Down&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;             &lt;span class="n"&gt;h&lt;/span&gt;              &lt;span class="n"&gt;Left&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;            &lt;span class="n"&gt;l&lt;/span&gt;              &lt;span class="n"&gt;Right&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;   &lt;span class="n"&gt;L&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;   &lt;span class="n"&gt;M&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;      &lt;span class="n"&gt;H&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;               &lt;span class="n"&gt;k&lt;/span&gt;              &lt;span class="n"&gt;Up&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;Delete&lt;/span&gt; &lt;span class="n"&gt;entire&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;      &lt;span class="n"&gt;d&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;Delete&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;   &lt;span class="n"&gt;D&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="n"&gt;End&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;             &lt;span class="err"&gt;$&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;Goto&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;               &lt;span class="o"&gt;:&lt;/span&gt;              &lt;span class="n"&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="n"&gt;Half&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;          &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;            &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Down&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="n"&gt;Half&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;            &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Up&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;               &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;            &lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;               &lt;span class="n"&gt;w&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;Paste&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;            &lt;span class="n"&gt;p&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="n"&gt;Previous&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;           &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;            &lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="n"&gt;Previous&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;           &lt;span class="n"&gt;b&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="n"&gt;Quit&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;               &lt;span class="n"&gt;q&lt;/span&gt;              &lt;span class="n"&gt;Escape&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="n"&gt;Scroll&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;             &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Down&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;J&lt;/span&gt;    &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Down&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="n"&gt;Scroll&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;               &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Up&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;      &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Up&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;again&lt;/span&gt;            &lt;span class="n"&gt;n&lt;/span&gt;              &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;backward&lt;/span&gt;         &lt;span class="o"&gt;?&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;forward&lt;/span&gt;          &lt;span class="o"&gt;/&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;&lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-30"&gt;&lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;         &lt;span class="n"&gt;Space&lt;/span&gt;          &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Space&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-31"&gt;&lt;span class="n"&gt;Transpose&lt;/span&gt; &lt;span class="n"&gt;chars&lt;/span&gt;                        &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기까지는 좋으나, 여기서의 복사 기능은 GUI 환경의 클립보드를 의미하지 않는다. 이를 다시 옮기는 일은 번거로우므로 간단한 설정을 추가해 tmux의 복사를 자동적으로 클립보드로 옮겨줄 수 있다. 아래의 설정을 &lt;code&gt;~/.tmux.conf&lt;/code&gt;에 추가해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;emacs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xclip -i -selection clipboard&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설정을 추가했으면 설정 파일을 아래와 같이 리로드하거나 tmux 서버를 재실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tmux &lt;span class="nb"&gt;source&lt;/span&gt;-file ~/.tmux.conf
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 (Emacs 모드에서) Ctrl+Space로 필요한 영역을 선택한 후 M-w를 누르면 해당영역이 복사되고, 자동적으로 클립보드에도 복사된다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='정리'&gt;정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;터미널 환경과 GUI 환경의 클립보드를 통합하면 매우 편리하다. 그리고 위에서는 간단히만 이야기했지만, 표준 출력으로 넘길 수 있는 모든 것이 클립보드에 복사될 수 있으므로 단순히 클립보드를 통합한다는 이상의 의미를 지닌다. 이는 셸에서 활용할 수 있는 다양한 스크립트와 출력들을 큰 어려움 없이 GUI 환경에 그대로 복사해 갈 수 있음을 의미한다. 또한 Tmux를 사용해 셸 화면을 직접 선택해 복사하는 방법도 보다 편리하게 사용할 수 있다. &lt;/p&gt;

&lt;p&gt;P.S. xclip과 비슷한 툴로는 xsel이 있으며, OSX에서는 pbcopy, pbpaste라는 명령어를 사용한다.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Docker Korea 스터디 그룹</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-07-26-docker-korea/"/>
    <id>http://blog.nacyot.com/articles/2014-07-26-docker-korea/</id>
    <published>2014-07-26T06:47:03Z</published>
    <updated>2014-08-04T15:39:15+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.shomney.com"&gt;함께 쓰는 가계부 Shomney&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재 저는 &lt;a href="http://blog.remotty.com/about/"&gt;Remotty&lt;/a&gt;라는 프로그래밍 모임에 속해있습니다. Remotty는 작년 다른 스터디 그룹에서 파생된 작은 팀으로 2014년에는 계속 Shomney라는 공동 가계부 웹앱을 만들어왔습니다. 업무로 일을 하는 게 아니다보니, 다들 바쁜 시간을 쪼개고, 다른 일에 치이면서(저는 거의 참여도 하지 못 했고...) 7월에서야 겨우 빚을 보았습니다.&lt;/p&gt;

&lt;p&gt;Shomney는 계속 개발중입니다만, 이 공동가계부를 뒤로 하고 Remotty 팀에서는 2번째 커다란 주제로 도커(Docker)를 스터디하기로 했습니다. 그리고 지난주 토요일(7월 19일) 시청역 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/space_noah' rel='noindex,nofollow'&gt;스페이스 노아&lt;/a&gt;&lt;/span&gt;에서 첫 모임을 가졌습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/kngLZ3Y.png" alt="Docker Korea 1회 모임"&gt;&lt;/p&gt;

&lt;p&gt;첫번째 모임에서는 2가지 주제 발표가 이루어졌습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;a href="https://twitter.com/subicura"&gt;subicura&lt;/a&gt; 님이
&amp;#39;Docker - 배포할때 알면 좋은 tip&amp;#39;에 대해서 발표해주셨습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;iframe src="//slides.com/chungsubkim/docker-tip/embed" width="680" height="480" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=ix1E8YBOTeA"&gt;http://www.youtube.com/watch?v=ix1E8YBOTeA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음으로는 제가 &amp;#39;Immutable Infrastructure&amp;#39;라는 주제로 도커와 맞물린 서버 운영의 패러다임 변화에 대해서 발표했습니다. 이 주제는 이전 Programer 세미나에서 발표했던 주제로, &lt;a href="http://localhost:5004/articles/2014-04-06-immutable-infrastructure/"&gt;이미지 기반 어플리케이션 배포 패러다임 Immutable Infrastructure&lt;/a&gt;도 참조해주세요.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/33063863" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/ext/immutable-infrastructure123123123" title="이미지 기반의 배포 패러다임 Immutable infrastructure" target="_blank"&gt;이미지 기반의 배포 패러다임 Immutable infrastructure&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/ext" target="_blank"&gt;Daekwon Kim&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=PdI88QNF-1w"&gt;http://www.youtube.com/watch?v=PdI88QNF-1w&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 앞으로 스터디 모임을 어떻게 진행할 지에 대해서 논의를 했습니다. 논의 결과, 격주로 돌아가며 주제발표를 진행하고 스터디에서 공유한 자료는 부족하더라도 웹 상에서 공유하기로 결정을 했습니다.&lt;/p&gt;

&lt;p&gt;여기서도 발표 자료를 공개해두었습니다만, 아마 이후 스터디에서 공유되는 자료는 작은 포럼 게시판과 유튜브 채널을 통해서 공개될 것입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://forum.docker.co.kr/"&gt;Docker Korea 포럼 게시판&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/channel/UC-TpdzGorF3igglmjCWQhMA"&gt;유튜브 Docker Korea Study 채널&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아직 확정되진 않았습니다만, 스터디에서 여력이 된다면 공개적으로 운영할 계획도 가지고 있으니 관심이 있으시거나 특히 도커에 관해서 발표나 하고싶은 얘기가 있으시다면 꼭 포럼 게시판을 들러주시기 바랍니다.&lt;/p&gt;

&lt;p&gt;다음 모임의 발표주제는 아직 확정은 아닙니다만, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker로 Ghost 배포하기&lt;/li&gt;
&lt;li&gt;도커를 이용한 파이썬 모듈 배포시 의존성 해결&lt;/li&gt;
&lt;li&gt;도커 모니터링 및 로그 수집 시스템 구축하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 주제에 대해서 공유할 예정입니다. 다음에 또 스터디 그룹에 대한 새로운 소식 전달하겠습니다~&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>그라파이트(Grahpite) + 그라파나(Grafana) 모니터링 시스템 구축 with Docker</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-07-17-graphite-with-dokcer/"/>
    <id>http://blog.nacyot.com/articles/2014-07-17-graphite-with-dokcer/</id>
    <published>2014-07-24T15:55:03Z</published>
    <updated>2014-08-04T15:39:15+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;시스템 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/monitoring' rel='noindex,nofollow'&gt;모니터링&lt;/a&gt;&lt;/span&gt;에 대해서 리뷰하거나, 직접 시스템 모니터링을 해봤다면 아래 그림과 같은 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/rrdtool' rel='noindex,nofollow'&gt;rrdtool&lt;/a&gt;&lt;/span&gt;로 만들어진 그래프를 자주 만나게 될 것입니다. rrdtool은 여전히 시스템 모니터링에 있어서 강자입니다만, 이 세계에 단지 rrdtool만 있는 것은 아닙니다. 특히 시계열 데이터 수집에 최적화된 타임시리즈 데이터베이스의 일종인 Graphite는 시스템 정보(&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/metrics' rel='noindex,nofollow'&gt;metrics&lt;/a&gt;&lt;/span&gt;) 수집에 있어 꽤나 매력적인 도구 중 하나입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/egJIriw.png" alt="rrdtool"&gt;
&lt;p class="shape-title"&gt;rrdtool&lt;/p&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/graphite'&gt;Graphite&lt;/a&gt;&lt;/span&gt;는 기본적으로 특정한 네임스페이스에 시간과 데이터를 계속해서 쌓아가는 특수한 데이터 저장소입니다. 이것만으로는 그래프까지 그려주는 rrdtool에 비해서 그다지 메리트가 없어보입니다만, Graphite는 프로젝트 중에는 Graphite-Web이라는 모듈이 있어 API 형태로 그래프 파일을 제공하거나, 수치 데이터를 제공해줍니다. 기본적인 그래프 생성기가 그렇게 훌륭하진 않습니다만, 수치 데이터를 받을 수 잇는 API를 기반으로 다양한 대시보드 어플리케이션들이 만들어져 있습니다. 물론 오픈소스로. 사용자는 먼저 Grahpite에 데이터를 쌓아놓기만 하면, 자신의 취향에 맞는 대시보드를 골라서 자신만의 대시보드를 만들어나가면 됩니다. 그 중에서도 이 글에서 소개할 대시보드는 Grafana라는 툴입니다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/elasticsearch'&gt;ElasticSearch&lt;/a&gt;&lt;/span&gt;의 대시보드 툴로 유명한 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/kibana'&gt;Kibana&lt;/a&gt;&lt;/span&gt; 라는 프로젝트가 있습니다만, &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/grafana' rel='noindex,nofollow'&gt;Grafana&lt;/a&gt;&lt;/span&gt;는 이 Kibana에서 영감을 받아 만들어진 Graphite판 Kibana라고 이해하시면 좀 더 쉽습니다.&lt;/p&gt;

&lt;p&gt;이 글에서는 Grahphite에 대한 전반적인 소개에 걸쳐 Graphite를 구성하는 하나하나의 요소들을 시작으로 Grafana까지 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker'&gt;Docker&lt;/a&gt;&lt;/span&gt;를 사용해 모니터링 시스템 전체를 구축해보도록하겠습니다.&lt;/p&gt;

&lt;h1&gt;&lt;a name='tl;dr'&gt;Tl;dr&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name whisper nacyot/whisper
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 2003:2003 -p 2004:2004 -p 7002:7002 --volumes-from whisper -e &lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cache nacyot/carbon-cache
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8000:80 -e &lt;span class="nv"&gt;CARBONLINK_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;172.17.42.1:7002&amp;quot;&lt;/span&gt; --volumes-from whisper nacyot/graphite-web
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8001:8000 nacyot/grafana
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="http://imgur.com/UYDytKS.png" alt="Grafana"&gt;
&lt;p class="shape-title"&gt;Grafana&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;예이! 참 쉽죠잉?&lt;/p&gt;

&lt;h1&gt;&lt;a name='graphite'&gt;Graphite&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src="https://googledrive.com/host/0B5YqfYBpS__8b1pIVnNVbFNGc0U/Graphite" alt="Graphite의 모듈 구성"&gt;
&lt;p class="shape-title"&gt;Graphite 구성도&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;앞서 Graphite를 단순히 시계열 데이터 저장소라고 소개했습니다만, 이를 사용하기 위해서는 기본적으로 Garphite의 각 구성 요소가 어떻게 이루어지는 지를 이해할 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;위의 그림을 기준으로 간단히 설명하도록 하겠습니다. 먼저 Collector는 Graphite에 어떠한 데이터를 쌓기 위한 모듈입니다. 여기에 대한 특별한 제한은 없습니다만, 시계열 데이터베이스의 특성상 기본적으로 데이터가 저장될 &lt;strong&gt;네임스페이스와 시간, 데이터&lt;/strong&gt; 이렇게 3가지 데이터가 필요합니다. 이러한 정보를 Graphite의 모듈인 Carbon-Cache에 보냅니다. Carbon-Cache는 Collector가 보낸 데이터를 받아 Whisper에 저장합니다. Carbon-Cache가 데이터 수집기라면 Whisper는 실제로 데이터를 파일시스템에 저장하고 읽어오는 모듈입니다. 자 이제 Whisper를 통해 데이터가 파일 시스템에 저장되었습니다. 그렇다면 이 데이터를 어떻게 가져올 수 있을까요. 이 시점에서 등장하는 게 Graphite-Web입니다. Graphite-Web은 http 프로토콜을 통해서 Whisper에 저장된 데이터를 읽어와 이미지 파일이나, 데이터 형식으로 출력합니다. Graphite-Web은 기본적으로 데이터를 제공하는 API와 대시보드 기능 두 가지를 제공하고 있습니다. 여기서 제공하는 대시보드 기능을 그냥 사용해도 무방합니다만, 기본적으로 그렇게 편리하지는 않습니다. 직접적인 Graphite 프로젝트는 아닙니다만, 이 Graphite-Web에서 대시보드를 제외하고 API 기능만을 따로 구현해둔 Graphite-api라는 모듈도 있습니다. 다른 대시보드를 사용한다면 Grahpite-Web이나 Graphite-api 어느 툴을 사용해도 무방합니다.&lt;/p&gt;

&lt;p&gt;이렇게 보면 정말 간단하죠? 정말 간단합니다만, 이 관계를 모르고 무턱대고 Graphite를 사용해보겠다고 덤비면 Carbon은 모고 Whisper는 모고, Graphite-Web이 있는데 또 Graphite-api는 모고, 가벼운 현기증을 시작으로 멘붕을 겪을 지도 모릅니다. Graphite 하나 설치하면 마법 같이 작동하는 그런 아름다운 세계는 없습니다. 간단히 보이지만 이 기본 구성을 이해해두는 건 많은 도움이 될 것입니다. 특히 Graphite 이야기를 쫓아가다보며 statsd며, carban-relay며, diamond며, 나아가 스케일 아웃 얘기까지 나오면 이것저것 알쏭달쏭한 단어와 개념들이 쏟아져나오기 때문에 여기서 이해의 끈을 놓쳐서는 안 됩니다. &lt;/p&gt;

&lt;h2&gt;&lt;a name='graphite-시작하기'&gt;Graphite 시작하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;기본적을 Graphite 구성에 대해서 살펴보았으니 이제 실제로 설치해보도록 하겠습니다. 제목에서 이야기한 바대로 Docker를 기반으로 진행해나갑니다. 조금 번거로울 수도 있지만 이 글은 기본적으로 Graphite 이야기와 Docker 이야기가 혼재되어있습니다. Docker에 전혀 관심이 없으시다면 &lt;a href="https://graphite.readthedocs.org/en/latest/index.html"&gt;Graphite 문서&lt;/a&gt;를 직접 읽으실 것을 추천해드립니다.&lt;/p&gt;

&lt;p&gt;기본적으로 Ubuntu를 사용한다고 전제하고 이야기를 진행하도록 하겠습니다. (Docker와 연결만 되어있다면 사실 다른 운영체제라도 무방합니다.)&lt;/p&gt;

&lt;h2&gt;&lt;a name='whisper'&gt;Whisper&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;우선은 데이터가 저장될 Whisper 이야기부터 시작하도록 하겠습니다. 아래 명령어를 실행합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull nacyot/whisper
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name whisper nacyot/whisper
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='nacyot/whisper-dockerfile'&gt;nacyot/whisper Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;사실 &lt;code&gt;nacyot/whisper&lt;/code&gt; 이미지에는 아무것도 없습니다. &lt;a href="https://github.com/nacyot/docker-graphite/blob/master/whisper/Dockerfile"&gt;Dockerfile&lt;/a&gt;을 열어보면 아래와 같이 실행되는 명령어는 전혀 없습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;busybox&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;VOLUME&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;whisper&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자세히 보면 &lt;code&gt;busybox&lt;/code&gt;라는 이미지를 기반으로 단지 &lt;code&gt;/opt/graphite/storage/whisper&lt;/code&gt; 디렉토리를 마운트 시키는 역할을 하고 있습니다. 정말 이것뿐입니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='볼륨-컨테이너'&gt;볼륨 컨테이너&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Docker의 볼륨 컨테이너라는 개념을 이해하고 계신다면 바로 이해하실 수 있겠지만, 별안간 등장한 busybox라는 이미지가 낯설어보일지도 모릅니다. 잠깐 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/busybox' rel='noindex,nofollow'&gt;busybox&lt;/a&gt;&lt;/span&gt;의 정체를 짚고 넘어가죠.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images busybox
&lt;/span&gt;&lt;span id="line-2"&gt;REPOSITORY          TAG                   IMAGE ID            CREATED             VIRTUAL SIZE
&lt;/span&gt;&lt;span id="line-3"&gt;busybox             latest                a9eb17255234        6 weeks ago         2.433 MB
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;imagse&lt;/code&gt;를 명령어를 실행해보면 busybox 이미지가 놀라울 정도로 &lt;strong&gt;작은&lt;/strong&gt; 이미지라는 것을 알 수 있습니다. busybox의 정체는 초경량 임베디드 리눅스의 일종입니다. 실제로 &lt;code&gt;naycot/whisper&lt;/code&gt;가 하는 역할은 &lt;code&gt;/opt/graphite/storage/whisper&lt;/code&gt;라는 디렉토리를 마운트해놓고, 관련된 모듈이 여기에 데이터를 저장하거나 읽어들이기 위한 역할만을 하는 정말로 &lt;strong&gt;데이터만을 위한&lt;/strong&gt; 이미지입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name whisper nacyot/whisper
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;눈치가 빠르신 분들은 이미 알아채셨겠지만, 이 &lt;code&gt;docker run&lt;/code&gt; 명령어는 심상치 않습니다. 보통 셸을 사용하는 경우처럼 컨테이너에 직접 접속하고자 할 때는 &lt;code&gt;-it&lt;/code&gt; 옵션을 사용하고, 반대로 백그라운드에서 실행시킬 때는 &lt;code&gt;-d&lt;/code&gt; 옵션을 사용하는데, 여기에는 아무런 옵션이 보이질 않습니다. 실제로 이 명령어를 통해서 컨테이너는 생성되지만 실행되진 않습니다. 이렇게 &lt;strong&gt;데이터만을 위한&lt;/strong&gt; 이미지는, &lt;strong&gt;데이터만을 위한&lt;/strong&gt; 컨테이너로 탈바꿈합니다.&lt;/p&gt;

&lt;p&gt;사실 이러한 볼륨 컨테이너를 사용하지 않아도 어플리케이션을 사용하는 데는 아무런 문제가 없습니다만, 볼륨 컨테이너를 사용하면 좋은 점이 있습니다. 먼저 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/aufs' rel='noindex,nofollow'&gt;AUFS&lt;/a&gt;&lt;/span&gt;와 같은 도커 파일 시스템 자체에 데이터를 기록하는 일은 성능 면에서 손해가 많은 편입니다. 다른 파일 시스템을 사용하는 방법도 있기는 합니다만 Volume 기능을 사용해 특정한 디렉토리를 마운트 시키면 호스트와 같은 파일 시스템으로 데이터가 기록됩니다. 이를 통해 성능 손실을 막을 수 있습니다.&lt;/p&gt;

&lt;p&gt;또한 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/volume_container' rel='noindex,nofollow'&gt;볼륨 컨테이너&lt;/a&gt;&lt;/span&gt;를 통해서 실제로 작동되는 프로세스의 실행 종료와 완전히 무관하게, 볼륨 컨테이너가 삭제되지 않는 한 해당하는 컨테이너에 마운트된 데이터도 사라지지 않도록 영속성을 보장할 수 있게 해줍니다. 이를 통해 부가적으로 프로세스와 데이터의 논리적 분리를 통해서 좀 더 깔끔한 관리가 가능하게 해주며, 특히 다수의 프로세스에서 데이터를 공유할 때 특정 프로세스 컨테이너나 특정 Host의 폴더에 의존하지 않는 구조를 만들 수 있게 해줍니다.&lt;/p&gt;

&lt;p&gt;앞서 실행한 볼륨 컨테이너를 확인해보죠. 컨테이너는 실행중인 상태가 아니므로 &lt;code&gt;-a&lt;/code&gt; 옵션을 통해서 확인합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -al
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                        COMMAND                CREATED             STATUS                           PORTS
&lt;/span&gt;&lt;span id="line-3"&gt;45b4afcb4be2        nacyot/whisper:latest        /bin/sh                About an hour ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; About an hour ago                                                                              whisper
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;뭔가 아무것도 없는데 설명이 길었습니다만, 이걸로 데이터를 저장할 준비가 되었습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='carbon-cache'&gt;carbon-cache&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;다음은 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/carbon' rel='noindex,nofollow'&gt;Carbon&lt;/a&gt;&lt;/span&gt;입니다. 실질적으로 데이터를 수집해서 파일 시스템에 기록하는 모듈이 바로 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/carbon-cache' rel='noindex,nofollow'&gt;Carbon-Cache&lt;/a&gt;&lt;/span&gt;입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull nacyot/carbon-cache
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 2003:2003 -p 2004:2004 -p 7002:7002 --volumes-from whisper -e &lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cache nacyot/carbon-cache
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것도 간단하죠? 이제 바로 데이터 수집이 가능합니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='nacyot/carbon-base-dockerfile'&gt;nacyot/carbon-base Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 carbon-cache 이미지를 살펴보기 전에 carbon-cache 이미지의 베이스가 되는 carbon-base를 살펴보겠습니다. carbon-base 실제 모듈이 아니라 carbon-cache와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/carbon-relay' rel='noindex,nofollow'&gt;carbon-relay&lt;/a&gt;&lt;/span&gt;를 위해 만들어진 중간 이미지입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;twisted&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/graphite-project/carbon.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/graphite-project/whisper.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;whisper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;carbon&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="mf"&gt;0.9.12&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;carbon-base 이미지에도 특별한 건 없습니다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/python'&gt;python&lt;/a&gt;&lt;/span&gt;을 설치하고 carbon과 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/whisper' rel='noindex,nofollow'&gt;whisper&lt;/a&gt;&lt;/span&gt;를 설치해줍니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='nacyot/carbon-cache-dockerfile'&gt;nacyot/carbon-cache Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음으로 carbon-cache의 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/dockerfile'&gt;Dockerfile&lt;/a&gt;&lt;/span&gt;을 살펴보도록 하겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;carbon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;NODE_NAME&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LOCAL_DATA_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;whisper&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;MAX_CACHE_SIZE&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;MAX_UPDATES_PER_SECOND&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;MAX_CREATES_PER_MINUTE&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LOG_UPDATES&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LINE_RECEIVER_INTERFACE&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;PICKLE_RECEIVER_INTERFACE&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;CACHE_QUERY_INTERFACE&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LINE_RECEIVER_PORT&lt;/span&gt; &lt;span class="mi"&gt;2003&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;PICKLE_RECEIVER_PORT&lt;/span&gt; &lt;span class="mi"&gt;2004&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;CACHE_QUERY_PORT&lt;/span&gt; &lt;span class="mi"&gt;7002&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;2003&lt;/span&gt; &lt;span class="mi"&gt;2004&lt;/span&gt; &lt;span class="mi"&gt;7002&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 carbon은 이미 carbon-base에서 설치가 되었기 때문에 여기서 무언가를 설치하거나 실행하는 부분은 없습니다. 여기서는 우선 ENV를 통해서 기본 환경변수값들을 설정합니다. 이 환경변수들은 &lt;code&gt;carbon.conf&lt;/code&gt; 파일에서 사용됩니다.&lt;/p&gt;

&lt;p&gt;다음으로 &lt;code&gt;/config&lt;/code&gt; 디렉토리를 이미지 내의 carbon 설정 디렉토리로 복사합니다. 이 디렉토리에는 &lt;code&gt;carbon.conf&lt;/code&gt;와 &lt;code&gt;storage-aggregation.conf&lt;/code&gt;, &lt;code&gt;storage-schemas.conf&lt;/code&gt; 파일이 포함되어있습니다. 따로 만든 설정 파일을 사용한다면 이미지 실행시 &lt;code&gt;-v&lt;/code&gt; 옵션으로 설정 파일이 포함된 폴더를 컨테이너에 마운트시키면 됩니다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code&gt;setup_configs.sh&lt;/code&gt;와 &lt;code&gt;run.sh&lt;/code&gt;를 이미지 내부로 복사합니다. 2003 2004 7002 포트를 열어주고 WORKDIR을 설정해주고, 초기 명령어(CMD)를 설정합니다. 여기서부터는 설정파일과 복사한 쉘스크립트의 용도에 대해서 간략히 설명합니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='carbon.conf'&gt;carbon.conf&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 &lt;code&gt;carbon.conf&lt;/code&gt;를 살펴보겠습니다. 이 파일은 데이터를 수집하는 carbon 데몬에 관한 설정을 담고 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[cache]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="na"&gt;LOCAL_DATA_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="na"&gt;MAX_CACHE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="na"&gt;MAX_UPDATES_PER_SECOND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="na"&gt;MAX_CREATES_PER_MINUTE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="na"&gt;LOG_UPDATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="na"&gt;LINE_RECEIVER_INTERFACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="na"&gt;PICKLE_RECEIVER_INTERFACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="na"&gt;CACHE_QUERY_INTERFACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="na"&gt;LINE_RECEIVER_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="na"&gt;PICKLE_RECEIVER_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="na"&gt;CACHE_QUERY_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서는 기본적으로 사용하는 설정들을 나열해놓았습니다. 실제로는 아무런 값도 들어가 있지않습니다. 이렇게도 실행이 가능할까요? 불가능하겠죠. 이 설정은 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/shell_script'&gt;셸스크립트&lt;/a&gt;&lt;/span&gt;를 통해서 환경변수로부터 자동적으로 입력됩니다. 이를 수행하는 게 &lt;code&gt;setup_configs.sh&lt;/code&gt; 파일입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\[cache\]/\[${NODE_NAME}\]/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-4"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(LOCAL_DATA_DIR\).*$/\1 = $(printf &amp;quot;&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOCAL_DATA_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | sed -e &amp;#39;s/\//\\\//g&amp;#39;)/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-5"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(MAX_CACHE_SIZE\).*$/\1 = ${MAX_CACHE_SIZE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-6"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(MAX_UPDATES_PER_SECOND\).*$/\1 = ${MAX_UPDATES_PER_SECOND}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-7"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(MAX_CREATES_PER_MINUTE\).*$/\1 = ${MAX_CREATES_PER_MINUTE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-8"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(LOG_UPDATES\).*$/\1 = ${LOG_UPDATES}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-9"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(LINE_RECEIVER_INTERFACE\).*$/\1 = ${LINE_RECEIVER_INTERFACE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-10"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(PICKLE_RECEIVER_INTERFACE\).*$/\1 = ${PICKLE_RECEIVER_INTERFACE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-11"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(CACHE_QUERY_INTERFACE\).*$/\1 = ${CACHE_QUERY_INTERFACE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-12"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(LINE_RECEIVER_PORT\).*$/\1 = ${LINE_RECEIVER_PORT}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-13"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(PICKLE_RECEIVER_PORT\).*$/\1 = ${PICKLE_RECEIVER_PORT}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-14"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(CACHE_QUERY_PORT\).*$/\1 = ${CACHE_QUERY_PORT}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;단순 무식한 스크립트이므로 설명은 생략하겠습니다. 이를 통해서 기본적인 설정들에 대해서는 실행시에 동적으로 환경 변수를 지정해 사용할 수 있습니다. &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/environment_variable' rel='noindex,nofollow'&gt;환경변수&lt;/a&gt;&lt;/span&gt;를 덮어쓰지 않으면 위에서 살펴본 carbon-cache Dockerfile의 ENV 값들이 사용됩니다. 단순히 하나의 노드로 실행시키고자 할 때는 기본 설정을 사용해도 무방할 것입니다. 각 설정에 대한 자세한 사항은 &lt;a href="https://graphite.readthedocs.org/en/latest/index.html"&gt;Graphite 문서&lt;/a&gt;를 참조하시기바랍니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='carbon에서-사용하는-3개의-포트-:-2003,-2004,-7002'&gt;Carbon에서 사용하는 3개의 포트 : 2003, 2004, 7002&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;조금만 더 설명을 보태겠습니다. 위에서 EXPOSE 지시자를 통해서 2003, 2004, 7002, 이렇게 3개의 포트를 열었습니다. 데이터 수집 데몬이라고 했는데, 은근히 포트가 많죠. 각각의 포트가 어떤 용도로 사용되는 지 정도는 알아둘 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;2003과 2004는 데이터를 받아서 저장하는 포트입니다. 먼저 2003은 plaintext protocol을 사용해 데이터를 받아들이며, 설정에서는 &lt;code&gt;LINE_RECEIVER&lt;/code&gt;로 표현합니다. 한 줄 한 줄 아래와 같은 포맷을 사용합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로는 아래와 같습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt; &lt;span class="mi"&gt;1405608517&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음으로 2004는 pickle protocol입니다. 설정에서는 &lt;code&gt;PICKLE_RECEIVER&lt;/code&gt;라고 표현합니다. 아래와 같은 형식을 사용합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[(path, (timestamp, value)), ...]&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하나의 네임스페이스에 대해서 다량의 정보를 수집할 때 유용합니다. 어쨌거나 대개는 라이브러리나 이미 만들어져있는 수집기를 통해서 metric을 수집하기 때문에 프로토콜까지 이해하고 직접 작성할 일은 별로 없습니다. 포트의 용도 정도만 이해하셔도 충분하다고 생각합니다.&lt;/p&gt;

&lt;p&gt;마지막으로 7002는 쿼리 포트입니다. 실제로 이 포트는 graphite-web에서 연결합니다. 그런데 사실 graphite-web은 whisper 데이터베이스(파일)에서 직접 데이터를 읽어옵니다. 그렇다면 조금 의문이 들 지도 모릅니다. 이 carbon daemon에 쿼리를 하는 건 어떤 용도로 쓰일까요? 사실 carbon에서 받은 데이터는 whisper 데이터베이스에 실시간으로 저장되지 않습니다. carbon에서 받은 데이터는 기본적으로 메모리에 저장되고 whisper 라이브러리에 의해서 적절히 flush되어 파일에 저장됩니다. carbon-cache는 최근에 들어온 아직 파일에 쓰여지지 않은 데이터를 쿼리하는데 사용됩니다.&lt;/p&gt;

&lt;p&gt;이것으로 3가지 포트의 수수께끼는 풀렸습니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='storage-aggregation.conf-&amp;amp;-storage-schemas.conf'&gt;storage-aggregation.conf &amp;amp; storage-schemas.conf&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이외에도 carbon에는 데이터를 저장할 whisper 데이터베이스의 저장방식을 지정하기 위한 설정 파일들이 있습니다.&lt;/p&gt;

&lt;p&gt;whisper 라이브러리는 데이터값을 받는 모든 네임스페이스에 대해서 해당하는 네임스페이스의 데이터가 저장되는 &lt;code&gt;.wsp&lt;/code&gt; 파일을 생성합니다. &lt;code&gt;storage-schemas.conf&lt;/code&gt;는 패턴을 통해서 특정한 패턴에 해당하는 네임스페이스의 데이터베이스를 만들 때 그 구조(retention)를 정의합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[carbon]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;^carbon\..*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="na"&gt;retentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1m:31d,10m:1y,1h:5y&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;[highres]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;^highres.*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="na"&gt;retentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1s:1d,1m:7d&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="k"&gt;[statsd]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;^statsd.*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="na"&gt;retentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1m:7d,10m:1y&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="k"&gt;[default]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;.*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="na"&gt;retentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10s:1d,1m:7d,10m:1y&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설정값이 &lt;code&gt;retentions = 15s:7d,1m:21d,15m:5y&lt;/code&gt;이면 해당하는 네임스페이스의 데이터는 15초 간격의 데이터는 7일, 1분 간격의 데이터는 21일, 15분 간격의 데이터는 5년 치를 저장하게 됩니다. 좀 더 구체적으로 설명하면 데이터를 저장하고 8일이 지나면 이 데이터는 1분 간격으로 저장되고, 1분보다 짧은 간격의 데이터들은 소실됩니다.&lt;/p&gt;

&lt;p&gt;그런데 이렇게 더 짧은 간격의 &lt;strong&gt;데이터들&lt;/strong&gt;이 일부가 소실되어 긴 간격의 포인트가 된다고 한다면 여기에는 분명 어떠한 조작이 일어날 것입니다. 이를 정의하는 게 storage-aggregation.conf 파일입니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[min]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;\.min$&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="na"&gt;xFilesFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="na"&gt;aggregationMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;min&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="k"&gt;[max]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;\.max$&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="na"&gt;xFilesFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="na"&gt;aggregationMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;max&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="k"&gt;[sum]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;\.count$&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="na"&gt;xFilesFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="na"&gt;aggregationMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="k"&gt;[default_average]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;.*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="na"&gt;xFilesFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.5&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="na"&gt;aggregationMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;average&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 설정도 마찬가지로 특정한 패턴에 해당하는 네임스페이스에 대해서 적용됩니다. 기본은 &lt;code&gt;average&lt;/code&gt; 통해서 데이터가 집계됩니다. 쉽게 말해 15초 간격의 데이터가 10 20 10 20 이었다면 1분 간격의 데이터는 15가 됩니다. 단 여기서 굉장히 주의해야할 부분이 하나 있습니다. 15초 간격의 데이터인데, 실제로는 데이터가 이 사이에 하나밖에 없다고 해보죠. Whisper에서는 시간과 데이터만 있으면 어떠한 데이터도 저장이 되기 때문이 이런 종류의 제약은 걸려있지 않습니다만, 이 데이터를 average로 집계하면 데이터가 소실되어 버립니다. 이렇게 데이터가 소실되어 버리면 실제로는 데이터가 존재하는 데도 api에서 호출될 때는 사라지는 현상이 발생하게됩니다. 이러한 상황을 방지하기 위해서는 데이터를 간격에 맞춰(혹은 더 자주) 충실히 넣어주거나, average 대신 다른 집계 방법을 사용할 필요가 있습니다. 이는 Graphite를 처음 사용할 때 빠지기 쉬운 함정이므로 알아두면 좋습니다.&lt;/p&gt;

&lt;p&gt;참고로 패턴 적용은 위에서부터 이루어진다는데 유의가 필요합니다. 즉 이 설정 파일들에서는 순서가 중요합니다. 예를 들어 &lt;code&gt;[default]&lt;/code&gt;의 패턴 &lt;code&gt;.*&lt;/code&gt;이 모든 네임스페이스에 들어맞기 때문에 이후에 어떤 설정을 넣어도 적용되지 않을 것입니다.&lt;/p&gt;

&lt;p&gt;더 자세한 내용은 &lt;a href="https://graphite.readthedocs.org/en/latest/index.html"&gt;Graphite 문서&lt;/a&gt;를 참조해주시기바랍니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='graphite-web'&gt;Graphite-Web&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이것으로 무사히 &lt;code&gt;carbon-cache&lt;/code&gt;까지 실행했습니다. 데이터를 받을 준비는 끝났습니다. 다음은 저장된 데이터를 읽어오는 Garphite-Web 모듈의 차례입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull naycot/graphite-web
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8000:8000 -e &lt;span class="nv"&gt;CARBONLINK_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;172.17.42.1:7002&amp;quot;&lt;/span&gt; --volumes-from whisper nacyot/graphite-web
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;역시나 도커를 사용하면 간단합니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='nacyot/graphite-web-dockrefile'&gt;nacyot/graphite-web Dockrefile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서부터는 좀 더 자세히 graphite-web 이미지가 어떻게 만들어졌는지 살펴보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Install Base Packages&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;supervisor&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;simplejson&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;memcache&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cairo&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-8"&gt;                       &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;twisted&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pysqlite2&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-9"&gt;                       &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="cp"&gt;# Install python packages&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt; &lt;span class="n"&gt;pyparsing&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tagging&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.3.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="cp"&gt;# Install whisper and graphite-web&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/graphite-project/whisper.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;whisper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="mf"&gt;0.9.12&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/graphite-project/graphite-web.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-20"&gt;      &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="mf"&gt;0.9.12&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-21"&gt;      &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="cp"&gt;# Setup graphite directories and environment variables&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;GRAPHITE_STORAGE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;GRAPHITE_CONF_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;PYTHONPATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LOG_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_INDEX_TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;graphite&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;
&lt;/span&gt;&lt;span id="line-30"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-31"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-32"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-33"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;whisper&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-34"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-35"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;chown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-36"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mo"&gt;0775&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;whisper&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-37"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mo"&gt;0664&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-38"&gt;
&lt;/span&gt;&lt;span id="line-39"&gt;&lt;span class="cp"&gt;# Copy configuration files&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-40"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local_settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local_settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-41"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initial_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initial_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-42"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-43"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervisord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervisor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervisord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-44"&gt;
&lt;/span&gt;&lt;span id="line-45"&gt;&lt;span class="cp"&gt;# Initialize database(sqlite3)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-46"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;syncdb&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;noinput&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-47"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;loaddata&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;initial_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-48"&gt;
&lt;/span&gt;&lt;span id="line-49"&gt;&lt;span class="cp"&gt;# Set CMD&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-50"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-51"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-52"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/usr/bin/supervisord&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번엔 꽤나 많은 명령어들이 늘어져있습니다만, 사실 자세히 보면 python과 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/django' rel='noindex,nofollow'&gt;django&lt;/a&gt;&lt;/span&gt; 관련 패키지 설치, 관련 폴더/파일 생성, 필요한 ENV 지정, django 앱인 graphite-web을 설치하는 과정에 불과합니다. 내용만 길 뿐이지, 읽어나가는 데 큰 어려움은 없을 것이라 생각합니다.&lt;/p&gt;

&lt;p&gt;마지막 CMD 지시자를 통해서 &lt;code&gt;supervisord&lt;/code&gt;로 &lt;code&gt;gunicorn_django&lt;/code&gt;와 &lt;code&gt;nginx&lt;/code&gt;를 사용해 graphite-web을 실행합니다.&lt;/p&gt;

&lt;p&gt;supervisord.conf는 아래와 같이 구성됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[supervisord]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="na"&gt;nodaemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;[program:nginx]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/usr/sbin/nginx&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="na"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/supervisor/%(program_name)s.log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="na"&gt;stderr_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/supervisor/%(program_name)s.log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="na"&gt;autorestart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="k"&gt;[program:graphite-webapp]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="na"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/opt/graphite/webapp&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/usr/bin/gunicorn_django -b0.0.0.0:8000 -w2 graphite/settings.py&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="na"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/supervisor/%(program_name)s.log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="na"&gt;stderr_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/supervisor/%(program_name)s.log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="na"&gt;autorestart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제 graphite-web 어플리케이션은 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/gunicorn' rel='noindex,nofollow'&gt;gunicorn&lt;/a&gt;&lt;/span&gt;을 통해서 실행시키고, &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/nginx' rel='noindex,nofollow'&gt;nginx&lt;/a&gt;&lt;/span&gt;의 프록시 기능을 통해서 외부에 노출시킵니다. &lt;code&gt;nginx.conf&lt;/code&gt; 일부를 살펴보면 아래와 같이 proxy하고 있는 걸 알 수 있습니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;proxy_pass&lt;/span&gt;                 &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:8000;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;   &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Proto&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;Host&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이외에도 nginx를 사용하는 이유는 한 가지가 더 있습니다. 바로 외부 호스트에서 호출시 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/cors' rel='noindex,nofollow'&gt;cors&lt;/a&gt;&lt;/span&gt;를 사용하기 위함입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Origin&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GET, OPTIONS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin, authorization, accept&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 graphite-web는 단순히 데이터를 전달하는 용도 뿐만 아니라, 웹사이트 기능을 포함하고 있어서 자체 정보를 저장하는 데이터베이스를 사용합니다. 이 데이터베이스에는 사이트 설정 및 관리자 정보 같은 것들이 저장됩니다. 여기서는 편의상 sqlite을 사용해서 컨테이너 내부에서만 사용합니다. 이 예제에서는 graphite-web 대시보드를 사용하지 않습니다. grafana를 사용할 것이므로 별로 중요하지 않습니다. (참고로 기본 관리자 계정은 admin/admin 입니다)&lt;/p&gt;

&lt;p&gt;local&lt;em&gt;settings.py에는 graphite-web 설정이 들어갑니다만, 실제 파이썬 코드를 사용하므로 바로 환경변수를 사용할 수 있습니다. 앞에서 사용한 `setup&lt;/em&gt;configs.sh`처럼 쉘 스크립트를 사용할 필요가 없습니다. 파이썬 코드를 바로 사용해서 환경변수를 통해 설정을 적용할 수 있습니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;LOG_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/var/log/graphite&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CARBONLINK_HOSTS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="n"&gt;CARBONLINK_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CARBONLINK_HOSTS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CLUSTER_SERVERS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    &lt;span class="n"&gt;CLUSTER_SERVERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CLUSTER_SERVERS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MEMCACHE_HOSTS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="n"&gt;CLUSTER_SERVERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MEMCACHE_HOSTS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재 중요한 옵션은 &lt;code&gt;CARBONLINK_HOSTS&lt;/code&gt;입니다. 위에서 설명한 대로 carbon에 직접 연결해서 아직 whisper에 저장되지 않은 데이터를 읽어오기 위한 용도입니다. 다시 앞선 graphite-web 실행 명령어를 살펴봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8000:8000 -e &lt;span class="nv"&gt;CARBONLINK_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;172.17.42.1:7002&amp;quot;&lt;/span&gt; --volumes-from whisper nacyot/graphite-web
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이를 통해 &lt;code&gt;CARBONLINK_HOSTS&lt;/code&gt;를 통해 carbon에서 직접 최신 데이터를 받아오며 &lt;code&gt;--volumes-from&lt;/code&gt;을 통해서 whisper 데이터를 읽어오는 것을 알 수 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='graphite-정리'&gt;Graphite 정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;현재 상황을 확인해보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -a
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                        COMMAND                CREATED             STATUS                      PORTS                                                                    NAMES
&lt;/span&gt;&lt;span id="line-3"&gt;3acf95727292        nacyot/graphite-web:latest   /usr/bin/gunicorn_dj   10 minutes ago      Up 10 minutes               0.0.0.0:8000-&amp;gt;8000/tcp                                                   thirsty_ritchie
&lt;/span&gt;&lt;span id="line-4"&gt;5ec8670bef73        nacyot/carbon-cache:latest   /bin/sh -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;./setup_   10 minutes ago      Up 10 minutes               0.0.0.0:2003-&amp;gt;2003/tcp, 0.0.0.0:2004-&amp;gt;2004/tcp, 0.0.0.0:7002-&amp;gt;7002/tcp   tender_newton
&lt;/span&gt;&lt;span id="line-5"&gt;48a012d30afb        nacyot/whisper:latest        /bin/sh                12 minutes ago      Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 12 minutes ago                                                                            whisper
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞서 설명했듯이 whisper는 실제로 실행중인 컨테이너가 아니므로 &lt;code&gt;-a&lt;/code&gt; 옵션을 사용하지 않으면 보이지 않습니다. carbon-cache를 사용해서 whisper에 데이터를 저장하고 graphite-web에서 저장된 데이터와 carbon-cache에서 최신 데이터를 가져오도록 완벽히 세팅되었습니다.&lt;/p&gt;

&lt;p&gt;여기까지 잘 따라오셨다면 &lt;code&gt;http://0.0.0.0:8000&lt;/code&gt;에 접속해봅니다. 몇 번인가 언급했다시피 graphite-web은 api 서버이자, 대시보드 어플리케이션 역할을 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/BiV7oAE.png" alt="Grphite-Web Dashboard"&gt;
&lt;p class="shape-title"&gt;Graphite-Web 대시보드&lt;/p&gt;r&lt;/p&gt;

&lt;p&gt;오오, 뭔가 나오네요 &amp;gt;_&amp;lt;&lt;/p&gt;

&lt;p&gt;아직 어떠한 데이터도 집어넣은 기억이 없으실 지도 모릅니다만, carbon은 기본적으로 데몬으로부터 간단한 데이터를 수집합니다.&lt;/p&gt;

&lt;h1&gt;&lt;a name='grafana'&gt;Grafana&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;Grafana는 Graphite나 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/influxdb'&gt;influxDB&lt;/a&gt;&lt;/span&gt;를 백엔드로 사용하는 대시보드 툴입니다. 처음 Graphite + Grafana 조합을 보면, ElasticSearch + Kibana 조합과 뭐가 다른 건지, 대체 가능한 건지 의문이 들 지도 모릅니다. 차이가 있다고 하면 있고, 없다고 하면 없기는 합니다. 그런 알쏭달쏭한 면이 있기는 하지만,  하나 분명한 차이는 Graphite는 단지 시간과 데이터를 받는 시계열 데이터베이스고, ElasticSearch를 사용한 모니터링은 로그 수집에 가깝다는 점입니다. 결론적으로 ElasticSearch가 Graphite의 기능을 대개 커버할 수 있을지는 모르지만, 단순 시계열 데이터를 저장하는데 최적화된 플랫폼은 아닙니다. 결국에 시스템 모니터링 + 로그 시스템을 구축할 때는 Graphite + Grafana와 ElasticSearch + Kibana 두 조합 모두 사용하는 게 답이 아닌가 하고, 필요하다면 각각에 대한 대체툴을 찾아야겠죠.&lt;/p&gt;

&lt;p&gt;어쨌건 약간 주제에서 빗겨난 이야기를 했습니다만, 다시 한 번 정리하면 Graphite는 시계열 데이터를 저장하는데 최적화되어있고, Grafana는 시계열 데이터를 보여주는데 최적화된 대시보드라고 할 수 있습니다. 아, 물론 Graphite를 기반으로 하는 대시보다 툴은 더 많이 있습니다. Garafana는 그 중에서 최근에 가장 잘 나가는 도구라고 보시면 됩니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='grafana-실행하기'&gt;Grafana 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 grafana를 실행시키기 위해서는 elasticsearch가 필요합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull dockerfile/elasticsearch
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음 명령어로 grafana를 실행합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull nacyot/grafana
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8001:8000 nacyot/grafana
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='dockerfile'&gt;Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Grafana는 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/angularjs'&gt;Angularjs&lt;/a&gt;&lt;/span&gt;를 기반으로 만들어진 앱어플리케이션으로 자바스크립트 프로젝트입니다. 따라서 레일스나 장고와 같은 서버 계층을 가지고 있지 않습니다. 갑자기 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/centos' rel='noindex,nofollow'&gt;Centos&lt;/a&gt;&lt;/span&gt;를 사용하고 있습니다만, 이전에 작업하던 걸 기반으로 한 거라 별다른 의미이는 없습니다. 설치과정은 grafana 어플리케이션을 가져와서 적절한 위치에 설치하고 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/apache' rel='noindex,nofollow'&gt;apache&lt;/a&gt;&lt;/span&gt;를 기반으로 실행합니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;centos&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;centos6&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iUvh&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/grafana/grafana.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Japan&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;ES_API_HOST&lt;/span&gt; &lt;span class="mf"&gt;172.17.42.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;ES_API_PORT&lt;/span&gt; &lt;span class="mi"&gt;9200&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;GRAPHITE_API_HOST&lt;/span&gt; &lt;span class="mf"&gt;172.17.42.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;GRAPHITE_API_PORT&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일단 다른 부분들은 대체로 비슷한데, 로컬 타임 설정하는 부분이 있습니다. 기본적으로 도커 컨테이너에서는 시간이 UTC로 설정된다는 걸 이해하고 있어야합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -i -t ubuntu bash
&lt;/span&gt;&lt;span id="line-2"&gt;root@1f27c50b400d:/# date
&lt;/span&gt;&lt;span id="line-3"&gt;Fri Jul 18 01:05:48 UTC 2014
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이는 여러모로 귀찮은 문제들을 발생시키곤 합니다. 어플리케이션 단에서 이 문제를 명시적으로 설정해서 푸는 방법도 있습니다만, 해당하는 설정이 작동하지 않는 경우 시스템 시간 설정을 바꾸는 것도 방법입니다. 여기서 시스템 시간 설정을 하는 이유는 아마 해당하는 이슈가 있었기 때문이라고 어렴풋이 떠올려봅니다만, 사실 정확히 기억나진 않습니다. 일단 여기서는 시스템 시간 설정을 바꿔줍니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='config.js-&amp;amp;-setup_configs.js'&gt;config.js &amp;amp; &lt;code&gt;setup_configs.js&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음으로 config.js를 살펴봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;settings&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;       &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;           &lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;               &lt;span class="nx"&gt;elasticsearch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ES_API_HOST:ES_API_PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;               &lt;span class="nx"&gt;datasources&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;                 &lt;span class="nx"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;                   &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;graphite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;                   &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GRAPHITE_API_HOST:GRAPHITE_API_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;                   &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;                   &lt;span class="nx"&gt;render_method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;                 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;               &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;               &lt;span class="nx"&gt;default_route&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/dashboard/file/default.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;               &lt;span class="nx"&gt;timezoneOffset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;               &lt;span class="nx"&gt;grafana_index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;grafana-dash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;               &lt;span class="nx"&gt;panel_names&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;                   &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;                   &lt;span class="s1"&gt;&amp;#39;graphite&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;               &lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;           &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;       &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dockerfile의 아래쪼을 보면 ENV로 ElasticSearch 서버와 Garphite 서버를 설정합니다. 여기서 ElasticSerach를 사용하는 게 의아하실 지도 모릅니다만, Grafana는 기본적으로 Kibana를 베이스로 하고 있으며 대시보드 설정을 ElasticSearch에 저장하고 있습니다. 네, 단지 그 용도로 사용합니다. 데이터는 Graphite에서 가져옵니다. 환경 변수에 저장된 서버 정보는 config.js에서 치환됩니다. 이는 carbon-cache 에서 사용했던 것과 같은 기법입니다. &lt;code&gt;setup_configs.conf&lt;/code&gt;를 살펴보죠.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;[&lt;/span&gt; -f /opt/grafana/src/config/config.js &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cp /opt/grafana/src/config/config.js /opt/grafana/src/config.js
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/ES_API_HOST/${ES_API_HOST}/g&amp;quot;&lt;/span&gt; ./src/config.js
&lt;/span&gt;&lt;span id="line-6"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/ES_API_PORT/${ES_API_PORT}/g&amp;quot;&lt;/span&gt; ./src/config.js
&lt;/span&gt;&lt;span id="line-7"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/GRAPHITE_API_HOST/${GRAPHITE_API_HOST}/g&amp;quot;&lt;/span&gt; ./src/config.js
&lt;/span&gt;&lt;span id="line-8"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/GRAPHITE_API_PORT/${GRAPHITE_API_PORT}/g&amp;quot;&lt;/span&gt; ./src/config.js
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우선 별도의 설정 파일을 마운트했을 경우 해당하는 config.js를 우선적으로 사용할 수 있도록 했습니다. 기본적으로 이 이미지는 ElasticSearch와 Graphite 서버에 연결할 것을 전제하고 있습니다만, Grafana는 데이터 백엔드로 여러 서버를 지정할 수도 있고 InfluxDB를 지정할 수 있습니다. 물론 다른 설정들도 필요한 경우 수정할 수 있어야하니까요. 설정에 관한 자세한 사항 &lt;a href="http://grafana.org/docs/"&gt;Grafana 문서&lt;/a&gt;를 참조해주세요.&lt;/p&gt;

&lt;p&gt;나머지 부분은 서버 설정을 치환하는 부분입니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='grafana.conf-&amp;amp;-run.sh'&gt;grafana.conf &amp;amp; run.sh&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Apache 설정입니다. Grafana는 자체적인 웹 서버를 가지지 않으므로 nginx나 apache를 사용해서 실행해야합니다. 별 다른 내용은 없습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;Listen 80
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;    ServerName grafana
&lt;/span&gt;&lt;span id="line-4"&gt;    DocumentRoot &amp;quot;/opt/grafana/src&amp;quot;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;run.sh는 아파치를 실제로 실행시키는 파일입니다. &lt;code&gt;-DFOREGROUND&lt;/code&gt; 옵션은 아파치를 데몬이 아니라 포그라운드에서 띄워줍니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;/usr/sbin/httpd -d . -f /etc/httpd/conf/httpd.conf -e info -DFOREGROUND
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='grafana-사용하기'&gt;Grafana 사용하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;네, 여기까지 Grafana 실행 및 내부적으로 어떻게 실행하는 지에 대해서 설명했습니다. 앞서 실행시에 8001번 포트로 내부를 연결했습니다. 웹브라우저로 &lt;code&gt;0.0.0.0:8001&lt;/code&gt;에 접속해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://imgur.com/UYDytKS.png" alt="Grafana"&gt;
&lt;p class="shape-title"&gt;Grafana Randomwalk&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;첫 페이지에 생성되는 데이터는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/randomwalk' rel='noindex,nofollow'&gt;RandomWalk&lt;/a&gt;&lt;/span&gt;로 생성된 시계열 그래프입니다.&lt;/p&gt;

&lt;p&gt;앞서 Graphite-Web 에서 본 그래프는 아래와 Grafana에서는 아래와 같이 보입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/yY0Uoa9.png" alt="Grafana"&gt;
&lt;p class="shape-title"&gt;Grafana Graph(Carbon 데몬이 수집한 데이터)&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;이 글에서는 Grafana의 사용법은 기본적인 개념만 익히면 어렵지 않습니다만, 그 얘기는 또 다음 기회에...&lt;/p&gt;

&lt;h1&gt;&lt;a name='소스코드'&gt;소스코드&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/docker-graphite"&gt;https://github.com/nacyot/docker-graphite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 글에서 다룬 Dockerfile의 최신 코드는 위 저장소에 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/nacyot/whisper/"&gt;https://registry.hub.docker.com/u/nacyot/whisper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/nacyot/carbon-cache/"&gt;https://registry.hub.docker.com/u/nacyot/carbon-cache/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/nacyot/graphite-web/"&gt;https://registry.hub.docker.com/u/nacyot/graphite-web/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/nacyot/grafana/"&gt;https://registry.hub.docker.com/u/nacyot/grafana/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각각의 이미지는 Docker Hub에서 확인할 수 있습니다.&lt;/p&gt;

&lt;h1&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;먼 길을 돌아왔습니다. 하지만 시작에서 이야기한 대로 실행하는 것은 간단합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name whisper nacyot/whisper
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 2003:2003 -p 2004:2004 -p 7002:7002 --volumes-from whisper -e &lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cache nacyot/carbon-cache
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8000:80 -e &lt;span class="nv"&gt;CARBONLINK_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;172.17.42.1:7002&amp;quot;&lt;/span&gt; --volumes-from whisper nacyot/graphite-web
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8001:8000 nacyot/grafana
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 사용하시고자 할 때는 커스터마이징이 필요할 것 같긴합니다만, 테스트 용도로 사용하는 동안에는 이 이미지들을 바로 사용해도 큰 문제는 없을 것입니다. Docker를 사용하면 위에서 설명한 모든 내용이 이 명령어 5개로 압축됩니다.&lt;/p&gt;

&lt;p&gt;사실 이 전부를 다 가지고 있는 이미지 하나를 만드는 것도 가능합니다. 실제로 Docker Hub를 뒤져보면 굉장히 많은 하나로된 Grahpite 이미지들이 있습니다. 오히려 여기서 소개한 방식으로 쪼개져있는 경우를 찾아보기 힘듭니다. 이렇게 쪼개놓은 데는 이유가 있습니다. 이 글에서는 아직 소개하지 않았습니다만, Grahpite는 기본적으로 스케일 아웃 가능하도록 설계되어있습니다. 즉 각 모듈을 조립할 수 있도록 구성해야 좀 더 쉽게 스케일 아웃이 가능해집니다. 고작 숫자라고 생각하실지도 모릅니다만, 다량의 숫자를 다수의 서버에서 동시다발적으로 수집한다면 서버에 금방 과부하가 걸릴 가능성은 매우 큽니다. 이럴 때 스케일 아웃을 통해 생각보다 훨씬 견고한 수치 수집 시스템을 만들 수 있겠죠.(이 이야기가 다음 포스트가 되면 좋겠다고 생각은 하고 있습니다만, 기약은 없습니다.)&lt;/p&gt;

&lt;p&gt;여기서 다룬 내용은 Graphite 시작에 불과합니다. Graphite 자체에 대해서도 이해해야할 주제들이 꽤 있습니다만, Graphite는 무엇보다도 생태계가 상당히 잘 갖춰져있는 오픈소스 모니터링 툴입니다. &lt;a href="https://collectd.org/"&gt;Collected&lt;/a&gt;, &lt;a href="https://github.com/BrightcoveOS/Diamond"&gt;Diamond&lt;/a&gt;, &lt;a href="https://github.com/mojodna/metricsd"&gt;Metricsd&lt;/a&gt;, &lt;a href="http://sensuapp.org/"&gt;Sensu&lt;/a&gt; 같은 툴을 통해서 관리중인 모든 서버의 수치 데이터를 수집할 수도 있고, 부하가 커질 경우 위에서 말한 것처럼 스케일 아웃도 가능하고 &lt;a href="https://github.com/etsy/statsd/"&gt;Statsd&lt;/a&gt;를 써서 버퍼 서버로 사용할 수도 있습니다. 또한 여기서는 Grafana만을 다뤘지만 앞서 언급한대로 다양한 대시보드 툴을 사용해 자신만의 대시보드를 만들 수도 있습니다. 나아가 &lt;a href="https://github.com/arachnys/cabot"&gt;Cabot&lt;/a&gt; 같은 툴을 이용해 수치를 감시하다가 특정 조건에 의해 경고를 보낼 수도 있습니다.&lt;/p&gt;

&lt;p&gt;Graphite와 함께 즐거운 모니터링의 생활화를 도모해보시길!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>캐스크(Cask)로 이맥스(Emacs) 환경설정 관리하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-06-01-emacs-with-cask/"/>
    <id>http://blog.nacyot.com/articles/2014-06-01-emacs-with-cask/</id>
    <published>2014-06-01T14:30:03Z</published>
    <updated>2014-08-04T15:39:15+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;얼마 전 &lt;a href="http://cask.emacs.kr/"&gt;Cask 공식 문서를 한국어로 번역&lt;/a&gt;해서 공개한 바 있다. Cask는 기본적으로 개발중인 패키지의 의존성을 관리하기 위한 툴이다.&lt;/p&gt;

&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/emacs24' rel='noindex,nofollow'&gt;Emacs24&lt;/a&gt;&lt;/span&gt;부터는 기본적으로 패키지 관리자가 포함되어있지만, 이를 통해서 설치되는 패키지는 전역적으로 설치된다. 이러한 방식은 편리하지만, 각각의 프로젝트에게는 섬세하지도, 적절하지도 않다. Emacs24의 기본 패키지 관리자는 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/ruby'&gt;루비&lt;/a&gt;&lt;/span&gt;와 비교하면 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/gem' rel='noindex,nofollow'&gt;Gem&lt;/a&gt;&lt;/span&gt;에 해당한다. 루비에서 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/cask' rel='noindex,nofollow'&gt;Cask&lt;/a&gt;&lt;/span&gt;의 역할은 Gem이 아니라 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/bundler'&gt;Bundler&lt;/a&gt;&lt;/span&gt;의 역할과 같다. Cask는 각 패키지의 의존성을 패키지 단위로 관리해주고, 패키지나 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/emacs'&gt;Emacs&lt;/a&gt;&lt;/span&gt;를 해당하는 의존성을 바탕으로 실행할 수 있도록 도와주는 도구이다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Cask는 이러한 의존성 관리를 크게 두 방향에서 사용할 수 있도록 해준다. 먼저 하나는 Bundler와 같이 프로젝트 단위로 자신의 의존성을 정의하고 프로젝트를 개발할 수 있는 환경을 만들어주는 역할이다. 두번째는 Emacs를 에디터로 사용하는 사람들의 입장에서 패키지들을 체계적으로 관리할 수 있게 도와준다. 이 글에서는 Cask를 통해서 Emacs 환경 설정을 관리하는 방법에 대해서 다룬다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='cask-설치'&gt;Cask 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;(참고: Cask는 Emacs24 이상에서만 사용가능하다) Cask는 아래 명령어로 설치할 수 있다. 시스템에 파이썬이 설치되어있어야한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -fsSkL https://raw.github.com/cask/cask/master/go &lt;span class="p"&gt;|&lt;/span&gt; python
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/mac' rel='noindex,nofollow'&gt;Mac&lt;/a&gt;&lt;/span&gt;에서 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/homebrew' rel='noindex,nofollow'&gt;Homebrew&lt;/a&gt;&lt;/span&gt;를 사용하고 있다면 brew 명령어를 사용해서 설치하는 방법도 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install cask
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 설치되었는지 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cask --version
&lt;/span&gt;&lt;span id="line-2"&gt;0.7.0
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='cask-사용해보기'&gt;Cask 사용해보기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;본적적인 &lt;code&gt;.emacs.d&lt;/code&gt; 환경설정에 앞서 cask를 간단히 사용해보자. 임의의 위치에 cask를 테스트해볼 디렉터리를 만든다. 여기서는 &lt;code&gt;~/tmp/cask&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/tmp/cask
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; 명령어를 통해서 기본 설정을 포함한 Cask 파일 생성할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cask init
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;head Cask
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;gnu&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;melpa&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;(&lt;/span&gt;depends-on &lt;span class="s2"&gt;&amp;quot;bind-key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;(&lt;/span&gt;depends-on &lt;span class="s2"&gt;&amp;quot;cask&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="o"&gt;(&lt;/span&gt;depends-on &lt;span class="s2"&gt;&amp;quot;dash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="o"&gt;(&lt;/span&gt;depends-on &lt;span class="s2"&gt;&amp;quot;drag-stuff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;(&lt;/span&gt;depends-on &lt;span class="s2"&gt;&amp;quot;exec-path-from-shell&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;(&lt;/span&gt;depends-on &lt;span class="s2"&gt;&amp;quot;expand-region&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="o"&gt;(&lt;/span&gt;depends-on &lt;span class="s2"&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;...
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;head&lt;/code&gt;로 초기화된 Cask 파일을 출력해보면 위와 같은 내용이 출력된다. Cask 파일에서 사용하는 명령은 기본적으로 &lt;code&gt;source&lt;/code&gt;와 &lt;code&gt;depends-on&lt;/code&gt; 함수이다. 일단 &lt;code&gt;source&lt;/code&gt;는 패키지를 가져오는 저장소를 의미하고 &lt;code&gt;depends-on&lt;/code&gt;은 사용하는 패키지를 정의한다는 정도만 이해하고 넘어간다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code&gt;cask&lt;/code&gt; 명령을 통해서 의존성을 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cask
&lt;/span&gt;&lt;span id="line-2"&gt;Wrote /home/nacyot/Dropbox/programmings/sandbox/cask/.cask/24.3.1/elpa/archives/gnu/archive-contents
&lt;/span&gt;&lt;span id="line-3"&gt;Wrote /home/nacyot/Dropbox/programmings/sandbox/cask/.cask/24.3.1/elpa/archives/melpa/archive-contents
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;의존성이 정상적으로 설치되었는지 살펴본다. 의존성은 기본적으로 cask 명령어를 실행한 위치의 Caskfile을 사용해서 설치되며, 설치 위치는 명령어를 실행한 디렉터리 아래의 &lt;code&gt;.cask&lt;/code&gt;가 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls .cask/24.3.1/elpa/
&lt;/span&gt;&lt;span id="line-2"&gt;archives                           flycheck-cask-20140118.923        popwin-20140426.659
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nb"&gt;bind&lt;/span&gt;-key-20140414.1744             git-commit-mode-20140313.1504     prodigy-20140421.2359
&lt;/span&gt;&lt;span id="line-4"&gt;cask-20140324.15                   git-rebase-mode-20140313.1504     projectile-20140427.251
&lt;/span&gt;&lt;span id="line-5"&gt;dash-20140407.253                  htmlize-20130207.1202             s-20131223.944
&lt;/span&gt;&lt;span id="line-6"&gt;diminish-20091203.1012             idle-highlight-mode-20120920.948  shut-up-20140211.521
&lt;/span&gt;&lt;span id="line-7"&gt;drag-stuff-20140121.723            magit-20140416.1539               smartparens-20140414.606
&lt;/span&gt;&lt;span id="line-8"&gt;epl-20140405.51                    multiple-cursors-20140418.815     smex-20140425.1314
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;-path-from-shell-20140219.104  nyan-mode-20120710.2200           use-package-20140317.1213
&lt;/span&gt;&lt;span id="line-10"&gt;expand-region-20140406.324         package-build-20140422.803        web-mode-20140425.1520
&lt;/span&gt;&lt;span id="line-11"&gt;f-20140220.21                      pallet-20140413.1345              yasnippet-20140314.255
&lt;/span&gt;&lt;span id="line-12"&gt;flycheck-20140422.657              pkg-info-20140405.50
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 설치된 것을 알 수 있다. 이제 이러한 패키지들을 바탕으로 emacs를 실행시켜보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cask &lt;span class="nb"&gt;exec &lt;/span&gt;emacs
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 Emacs를 실행하면 기존의 설정에 추가적으로 현재 Cask 파일의 의존성이 로드된다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='cask를-활용한-emacs-환경설정'&gt;Cask를 활용한 Emacs 환경설정&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;여기까지 이야기한 내용은 실질적으로 특정 프로젝트에서 의존성을 관리하는 방법에 가깝다. 지금부터는 전역적인 Emacs 사용자 설정을 다룰 것이다.&lt;/p&gt;

&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/emacs23' rel='noindex,nofollow'&gt;Emacs23&lt;/a&gt;&lt;/span&gt; 이후 버전의 환경설정은 기본적으로 &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; 파일을 거쳐서 실행된다. 따라서 먼저 Cask 초기화 코드를 이 파일에 추가해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.cask/cask.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 첫번째 줄에서는 앞서 설치한 &lt;code&gt;cask.el&lt;/code&gt;을 로드한다. 로드 경로에서도 알 수 있듯이 cask는 기본적으로 홈 디렉터리 바로 아래의 &lt;code&gt;.cask&lt;/code&gt;에 설치된다(다른 위치에 설치했다면 물론 해당하는 경로를 지정한다). 다음 줄에서는 &lt;code&gt;cask-initialize&lt;/code&gt; 함수를 호출해 cask를 초기화한다. 이 때 cask를 환경설정에 대해서 초기화하기 위한 Cask 파일이 필요하다. 이 파일은 &lt;code&gt;~/.emacs.d/Cask&lt;/code&gt;에 위치해야한다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='caskfile-살펴보기'&gt;Caskfile 살펴보기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;여기서는 Cask 파일을 정의한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;melpa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;marmalade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ruby-mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rspec-mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;robe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rinari&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magit&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.8.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ox-reveal&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;git@github.com:yjwen/org-reveal.git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞서도 이야기했지만 Caskfile에서 사용할 수 있는 기본적인 함수는 &lt;code&gt;source&lt;/code&gt;와 &lt;code&gt;depends-on&lt;/code&gt;이다. 다른 함수들도 있지만 일반적으로 환경설정을 위한 용도에서는 사용하지 않는다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='source'&gt;source&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저, source 함수는 패키지를 가져올 저장소를 지정하는 명령어로 아래와 같이 사용할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;ALIAS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로는 아래와 같이 사용한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;melpa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://melpa.milkbox.net/packages/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;패키지가 인식할 수 있는 ALIAS를 사용하면 URL을 지정하지 않아도 된다. 사용할 수 있는 ALIAS는 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;gnu&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//elpa.gnu.org/packages/)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;melpa&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//melpa.milkbox.net/packages/)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;marmalade&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//marmalade-repo.org/packages/)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;SC&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//joseito.republika.pl/sunrise-commander/)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//orgmode.org/elpa/)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gnu, melpa, marmalade는 주로 사용하므로 지정해두는 게 좋다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='depends-on'&gt;depends-on&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;depends-on&lt;/code&gt;은 사용하고자 하는 패키지를 지정하는 함수이다. 예를 들어 &lt;code&gt;ruby-mode&lt;/code&gt; 패키지를 사용하고자 하면 아래와 같이 사용한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ruby-mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 &lt;code&gt;ruby-mode&lt;/code&gt;를 지정하면 위에서 source에서 지정한 저장소에서 해당하는 패키지를 찾아 설치한다. 이 때 필요한 경우 아래와 같이 특정 버전을 강제할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magit&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.8.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본 패키지 관리자에 비해서 가장 큰 장점 중 하나는 git로 관리되는 패키지를 직접 지정할 수 있다는 점이다. 아래는는 공식 문서에서 제공하는 예시이다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/git'&gt;Git&lt;/a&gt;&lt;/span&gt; 저장소를 지정했을 때 특정한 커밋이나 브랜치, 혹은 특정 파일들만 로드할 수 있도록 하는 법을 알 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magit&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/magit/magit.git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magit&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/magit/magit.git&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;7j3bj4d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magit&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/magit/magit.git&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magit&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/magit/magit.git&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*.el&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magit-svn.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='cask'&gt;cask&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;필요한 패키지 설정이 모두 끝났으면 작업 디렉토리를 &lt;code&gt;~/.emacs.d&lt;/code&gt;로 옮겨서 &lt;code&gt;cask&lt;/code&gt; 명령을 실행한다. 이를 통해서 지정한 패키지들을 모두 설치할 수 있다. 하나 알아둬야할 점은 명시적으로 cask 명령을 emacs 외부에서 실행하지 않으면 Emacs 실행 시 해당하는 패키지가 적용되지 않는다는 점이다.&lt;/p&gt;

&lt;p&gt;추가적으로 모든 패키지를 업데이트하고자 할 때는 &lt;code&gt;cask update&lt;/code&gt; 명령어를 사용한다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='기타'&gt;기타&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;a name='pallet-패키지(emacs-안에서-패키지-관리)'&gt;pallet 패키지(Emacs 안에서 패키지 관리)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt; : pallet 명령어 사용시 Cask 파일이 변경되는 경우가 있다. 이 때 git 저장소를 지정해둔 정보가 삭제될 가능성이 있다. &lt;a href="https://gist.github.com/nacyot/2387fd61e203b30e5f57"&gt;Cask.diff&lt;/a&gt; 참조.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/pallet' rel='noindex,nofollow'&gt;pallet&lt;/a&gt;&lt;/span&gt; 패키지와 함께 사용하면 좀 더 편리하게 사용할 수 있다. 예를 들어 &lt;code&gt;M-x pallet init&lt;/code&gt; 명령어를 실행하면 현재 &lt;code&gt;package.el&lt;/code&gt;로 설치된 패키지들을 Cask 파일에 입력해준다. 앞서 Cask 파일은 &lt;code&gt;cask install&lt;/code&gt; 명령을 실행하지 않으면 바로 반영이 되지 않는다고 하였는데, pallet 패키지를 사용하면 Cask 파일을 수정하고, &lt;code&gt;M-x pallet-install&lt;/code&gt; 명령어를 실행하면 바로 패키지가 설치된다. 또한 &lt;code&gt;M-x package-install&lt;/code&gt;이나 &lt;code&gt;M-x list-packages&lt;/code&gt; 명령어로 설치한 패키지들을 자동을 Cask 파일로 옮겨준다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='init-loader를-활용한-emacs-초기화'&gt;init-loader를 활용한 Emacs 초기화&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;앞서 이야기한 바와 같이 Emacs 초기화는 기본적으로 &lt;code&gt;init.el&lt;/code&gt;을 거쳐가며 대부분의 설정파일은 여기에서 이루어진다. Cask 사용 시에도 Cask를 초기화하고, Cask를 통해 읽어들인 각 패키지에 대한 설정은 &lt;code&gt;init.el&lt;/code&gt;파일에서 하면 된다. 하지만 이 역시 설정할 내용이 많을 때는 &lt;code&gt;init.el&lt;/code&gt; 파일이 매우 복잡해지기 때문에 init-loader를 사용해 좀 더 편리하게 관리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/init-loader'&gt;init-loader&lt;/a&gt;&lt;/span&gt; 패키지를 사용하려면 먼저 Cask 파일에 추가해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;init-loader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;init.el&lt;/code&gt;에는 아래 내용을 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/init-loader/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;init-loader-load&lt;/code&gt;는 초기화 파일들을 위치시킬 디렉터리를 지정한다. 여기서는 &lt;code&gt;~/.emacs.d/init-loader&lt;/code&gt;를 지정했으면 원하는 디렉터리를 지정하면 된다. 위와 같이 설정하면 init-loader은 해당하는 폴더 아래의 숫자 2개로 시작하는 모든 파일을 로드한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="n"&gt;_util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="n"&gt;_ik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="n"&gt;_javascript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="n"&gt;_global&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 적절히 초기화 설정을 분리하면 된다. 일반적으로는 패키지 단위로 설정을 관리하는 게 좋다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='설정-파일-컴파일-하기'&gt;설정 파일 컴파일 하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;일반적으로 패키지는 설치과정에서 컴파일된다. 하지만 다른 설정 파일이 많아질 수록 Emacs 시작시간도 길어진다. 필요하다면 init-loader 폴더나 설정 파일을 보관하는 다른 폴더는 아래 명령어로 컴파일 해두는 게 좋다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;recompile&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Emacs를 사용하기 어렵게 만드는 것 중 하나는 언제나 환경설정이었다. Emacs는 정말 방대한 툴이고, 그만큼 사람에 따라서 수십에서 심지어는 수백개 패키지를 사용하는 것도 이상하지 않다. 일반적으로 Emacs를 잘 사용한다는 데는 단순히 단축키를 수십개 더 외우고 있느냐 보다 이런 다양한 패키지들을 얼마나 잘 정리하고 활용하는 지가 중요하다. Cask 공식 문서를 보면 아마 대부분의 Emacs 사용자가 겪어왔을 기존의 패키지 관련 툴들에 관한 이야기가 나온다. &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/el-get' rel='noindex,nofollow'&gt;El-get&lt;/a&gt;&lt;/span&gt;이 있었고, Emacs24에서 공식으로 포함된 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/package.el' rel='noindex,nofollow'&gt;package.el&lt;/a&gt;&lt;/span&gt; 같은 툴도 있었고, 그리고 저장소의 서브 모듈을 사용하는 방법이나 의존 패키지를 통째로 패키지에 포함해서 의존성을 정의하는 방법도 사용해왔다. 필자도 대부분의 방법을 경험했지만 결국엔 두손두발 다 놓게 만드는 게 Emacs 설정이다. &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/elisp' rel='noindex,nofollow'&gt;elisp&lt;/a&gt;&lt;/span&gt;도 잘 모르고, 한 번 아무리 공을 들여서 설정해봤자, 시간이 지나면 역시 관리는 안 된다.&lt;/p&gt;

&lt;p&gt;그런 와중에 Cask는 Emacs 사용자에게 단비와 같은 패키지이다. 아마.&lt;/p&gt;

&lt;h2&gt;&lt;a name='참고자료'&gt;참고자료&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cask.emacs.kr/"&gt;Cask 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/naoya/20140424/1398318293"&gt;Cask - naoyaのはてなダイアリー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rdallasgray/pallet"&gt;Pallet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/netpyoung/netpyoung.emacs.d"&gt;netpyoung/.emacs.d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/.emacs.d"&gt;nacyot/.emacs.d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>도커 레지스트리(Docker Registry) 설치하기 + S3 연동</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-05-08-docker-registry-introduction/"/>
    <id>http://blog.nacyot.com/articles/2014-05-08-docker-registry-introduction/</id>
    <published>2014-05-08T01:00:03Z</published>
    <updated>2014-08-04T15:39:15+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;&lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker'&gt;도커&lt;/a&gt;&lt;/span&gt;의 장점 중 하나는 도커에서 빌드한 이미지를 쉽게 공유할 수 있다는 점입니다. 이러한 장점은 오픈소스 커뮤니티 위에서 공적인 공유로 그 장점이 극대화됩니다. 실제로 도커에서는 도커에서 생성한 이미지를 공유할 수 있는 &lt;a href="http://index.docker.io"&gt;공식 저장소&lt;/a&gt;를 제공하고 있습니다. 공식 저장소에는 프론트엔드 어플리케이션과 데이터베이스와 같은 백엔드 어플리케이션 등 이미 많은 도커 이미지들이 공유되고 있습니다. 물론 도커의 가장 큰 장점은 경량화된 가상화(격리)를 통한 어플리케이션 배포에 있습니다만, 이러한 열린 공간을 통해서 오픈소스 어플리케이션을 공유하는 새로운 장을 열어놓고 있습니다. 나아가 몇몇 프로젝트에서는 좀 더 적극적으로 직접 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/dockerfile'&gt;Dockerfile&lt;/a&gt;&lt;/span&gt;을 제공해 어플리케이션을 도커 이미지로 빌드하는 걸 지원하고 있습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;개인적으로는 이미 개발용으로 오픈소스 어플리케이션을 설치할 때는 거의 전면적으로 도커를 활용하고 있습니다. 일견 납득하기 어려울 지도 모릅니다만, 어떤 어플리케이션을 설치하기 위해 서버를 어떤 상태로 만드는 것보다, 서버의 상태와 무관하게 특정 어플리케이션의 컨테이너를 실행시키는 게 훨씬 쉽고 신뢰높은 전략입니다. 예를 들어서 설치하기 어려운 오픈소스 어플리케이션으로 프라이빗 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/git'&gt;Git&lt;/a&gt;&lt;/span&gt; 저장소인 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/gitlab' rel='noindex,nofollow'&gt;Gitlab&lt;/a&gt;&lt;/span&gt;이 유명합니다만, 도커에서는 명령어 하나면 됩니다. 물론 구체적인 설정이나 실 배포환경에서 사용하는 건 각자의 선택에 달렸겠습니다만.&lt;/p&gt;

&lt;h2&gt;&lt;a name='설치'&gt;설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;도커 이미지의 공적인 공유에 대한 자세한 얘기는 언젠가 기회가 되면 하기로 하고...&lt;/p&gt;

&lt;p&gt;공개된 이미지를 활용해보신 분들이라면 사적인 자신만의 이미지를 공유하는 공간을 가지고 싶어질
것입니다. 이 글에서는 사적인 이미지 공유를 위한 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker_registry' rel='noindex,nofollow'&gt;도커 레지스트리&lt;/a&gt;&lt;/span&gt;에 대해서 소개하고자 합니다. 위에서 이야기한 바의 연장입니다만, 도커 레지스트리 역시 빌드를 위한 Dockerfile을 Github 저장소에서 제공하고 있으며, 도커 공식 저장소에서 빌드된 이미지도 제공되고 있습니다. 여기서는 공식 저장소에서 제공하는 이미지를 통해서 도커 레지스트리를 실행하도록 하겠습니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-설치'&gt;도커 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서는 도커가 이미 설치되어있다고 가정하겠습니다. 설치되어있지 않다면, &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/ubuntu'&gt;Ubuntu&lt;/a&gt;&lt;/span&gt; 14.04 LTS 기준으로 아래 명령어로 도커를 설치해주세요.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install docker.io
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='도커-레지스트리-설치'&gt;도커 레지스트리 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 &lt;code&gt;docker pull&lt;/code&gt; 명령어로 공식 저장소에서 registy 이미지의 최신 버전을 받아옵니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull registry:latest
&lt;/span&gt;&lt;span id="line-2"&gt;Pulling repository registry
&lt;/span&gt;&lt;span id="line-3"&gt;2930bc3d8f1e: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;511136ea3c5a: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;77917256cf11: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;f10485646326: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;...
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이미지를 받아왔으면 &lt;code&gt;images&lt;/code&gt; 명령어로 이미지가 정상적으로 저장됐는지 확인합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;registry.*latest&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="o"&gt;(&lt;/span&gt;표준 입력&lt;span class="o"&gt;)&lt;/span&gt;:3:registry             latest              2930bc3d8f1e        12 days ago         454.8 MB
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='실행'&gt;실행&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이미지가 정상적으로 받아졌으면 실행은 간단합니다. 여기서 &lt;code&gt;--name&lt;/code&gt;은 이름을 지정하는 플래그이며, &lt;code&gt;-d&lt;/code&gt;는 백그라운드에서 실행, &lt;code&gt;-p {host_port}:{container_port}&lt;/code&gt;는 포트 노출을 위한 맵핑을 의미합니다. 마지막 &lt;code&gt;registry&lt;/code&gt;는 실행하고자하는 이미지의 이름입니다. 좀 더 정확히는 &lt;code&gt;registry&lt;/code&gt; 다음에 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/컨테이너' rel='noindex,nofollow'&gt;컨테이너&lt;/a&gt;&lt;/span&gt;에 대해서 실행하고자 하는 명령어를 입력합니다만, &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/이미지' rel='noindex,nofollow'&gt;이미지&lt;/a&gt;&lt;/span&gt; 내부에 기본 실행 명령이 지정되어 있으므로 생략해도 무방합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name personal-registry -d -p 5000:5000 registry
&lt;/span&gt;&lt;span id="line-2"&gt;8fa28faf47f3cacce64aeb63b5a6c7e1388b5470340f6feb342b03d4fad4352c
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;registry 이미지로 도커를 실행하면 &lt;code&gt;8fa28fa&lt;/code&gt;로 시작하는 컨테이너 아이디를 볼 수 있습니다. (컨테이너 아이디는 그 때 그 때 다릅니다.) 컨테이너가 정상적으로 실행됐는지 확인하기 위해 &lt;code&gt;ps -l&lt;/code&gt; 명령어를 실행합니다. &lt;code&gt;-l&lt;/code&gt; 플래그는 가장 최근에 실행한 컨테이너를 보여줍니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -l
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS              PORTS                    NAMES
&lt;/span&gt;&lt;span id="line-3"&gt;8fa28faf47f3        registry:0.6.8           /bin/sh -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /dock   2 seconds ago       Up 2 seconds        0.0.0.0:5000-&amp;gt;5000/tcp   personal-registry
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 실행했다면 위와 비슷한 화면을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;위의 설정대로라면 컨테이너의 5000번 포트가 호스트의 5000번 포트로 노출됩니다. 도커 레지스트리는 도커 명령어를 통해서 사용하는 게 기본입니다만, 5000번 포트를 통해 http로 기본적인 API를 제공하고 있습니다. 이를 통해서 서버가 정상적으로 실행되었는지 확인해보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="s2"&gt;&amp;quot;http://0.0.0.0:5000&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s2"&gt;&amp;quot;docker-registry server (dev) (v0.6.8)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이를 통해 도커 레지스트리(Docker registry)의 실행환경과 버전을 확인할 수 있습니다. 이걸로 도커 레지스트리가 정상적으로 설치되었습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='사용하기'&gt;사용하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;아무것도 설정하지 않았다면 도커 레지스트리는 기본적으로 로컬에 데이터를 저장합니다. &lt;a href="https://github.com/dotcloud/docker-registry/blob/master/config/config_sample.yml"&gt;&lt;code&gt;config_sample.yml&lt;/code&gt;&lt;/a&gt;을 참조해주세요.&lt;/p&gt;

&lt;h3&gt;&lt;a name='사용자-도커-이미지-만들기'&gt;사용자 도커 이미지 만들기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;기본적으로 사적인 저장소는 자신이 직접 빌드한 이미지를 저장하기 위해서 사용합니다. 이미 가지고 있는 이미지를 사용해도 무방합니다만 여기서는 간단한 이미지를 하나 생성하겠습니다. 임의의 디렉토리에 아래 내용을 복사해 &lt;code&gt;Dockerfile&lt;/code&gt;을 만듭니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;12.04&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;을 만들었으면 이 파일을 빌드해서 새로운 이미지를 생성하겠습니다. 아래 내용을 참고해서 빌드합니다. 여기서 &lt;code&gt;-t&lt;/code&gt; 플래그를 통해서 이미지의 이름을 지정할 수 있습니다. 여기선 이미지 이름으로 &lt;code&gt;nacyot/hello_docker&lt;/code&gt;을 사용했습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;/home/nacyot/src/hello_docker
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
&lt;/span&gt;&lt;span id="line-4"&gt;Dockerfile
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t nacyot/hello_docker .
&lt;/span&gt;&lt;span id="line-6"&gt;Uploading context  2.56 kB
&lt;/span&gt;&lt;span id="line-7"&gt;Uploading context
&lt;/span&gt;&lt;span id="line-8"&gt;Step 0 : FROM ubuntu:12.04
&lt;/span&gt;&lt;span id="line-9"&gt;---&amp;gt; c0fe63f9a4c1
&lt;/span&gt;&lt;span id="line-10"&gt;Step 1 : MAINTAINER Daekwon Kim &amp;lt;propellerheaven@gmail.com&amp;gt;
&lt;/span&gt;&lt;span id="line-11"&gt;---&amp;gt; Running in 166e22a298bd
&lt;/span&gt;&lt;span id="line-12"&gt;---&amp;gt; dfaa95be184e
&lt;/span&gt;&lt;span id="line-13"&gt;Step 2 : CMD &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, Docker!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;---&amp;gt; Running in 677b5b6260a2
&lt;/span&gt;&lt;span id="line-15"&gt;---&amp;gt; 677a7d6fbf49
&lt;/span&gt;&lt;span id="line-16"&gt;Successfully built 677a7d6fbf49
&lt;/span&gt;&lt;span id="line-17"&gt;Removing intermediate container 166e22a298bd
&lt;/span&gt;&lt;span id="line-18"&gt;Removing intermediate container 677b5b6260a2
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이미지가 정상적으로 빌드되었는지 &lt;code&gt;images&lt;/code&gt; 명령어로 확인해봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images
&lt;/span&gt;&lt;span id="line-2"&gt;REPOSITORY            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&lt;/span&gt;&lt;span id="line-3"&gt;nacyot/hello_docker   latest              677a7d6fbf49        2 minutes ago       231.1 MB
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이미지가 정상적으로 빌드되었으니 실행해보도록하겠습니다. 간단히 &lt;code&gt;run&lt;/code&gt;에 이미지 이름을 넘겨줍니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run nacyot/hello_docker
&lt;/span&gt;&lt;span id="line-2"&gt;Hello, Docker!
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dockerfile을 유심히 보셨다면 눈치채셨겠지만, &lt;code&gt;Hello, Docker!&lt;/code&gt;를 출력하는 훌륭한 이미지를 만들었습니다. 위와 같은 결과가 나온다면 이미지가 정상적으로 작동하는 것을 확인할 수 있습니다. 중요한 점은 &lt;code&gt;echo&lt;/code&gt; 명령어는 실행하자마자 종료되는 process이기 때문에 &lt;code&gt;docker ps&lt;/code&gt;에서 이 컨테이너를 확인할 수 없다는 점입니다. 컨테이너에서는 자신에게 주어진 주 프로세스가 종료되면 컨테이너도 따라 종료됩니다. 이를 확인하기 위해서 &lt;code&gt;-a&lt;/code&gt; 플래그를 사용합니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -a
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                        COMMAND                CREATED             STATUS                     PORTS                    NAMES
&lt;/span&gt;&lt;span id="line-3"&gt;d01aea6f8332        nacyot/hello_docker:latest   /bin/sh -c &lt;span class="s1"&gt;&amp;#39;echo &amp;#39;&lt;/span&gt;He   2 minutes ago       Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 2minutes ago                            prickly_fermat
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='도커-레지스트리에-푸시(push)하기'&gt;도커 레지스트리에 푸시(Push)하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이미지가 정상적으로 작동하는 것을 확인했으니 이제 이미지를 도커 레지스트리에 집어넣어보겠습니다. 먼저 이미지를 도커 레지스트리에 넣기 위해서는 이미지에 적당한 이름을 붙여줄 필요가 있습니다. &lt;code&gt;docker tag&lt;/code&gt; 명령어로 이미지에 새로운 이름을 부여하겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker tag nacyot/hello_docker 0.0.0.0:5000/hello_docker
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tag&lt;/code&gt; 명령어가 정상적으로 실행됐으면 같은 이미지에 새로운 이름이 부여됩니다. &lt;code&gt;images&lt;/code&gt; 명령어로 확인해봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images
&lt;/span&gt;&lt;span id="line-2"&gt;REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&lt;/span&gt;&lt;span id="line-3"&gt;nacyot/hello_docker         latest              677a7d6fbf49        10 minutes ago      231.1 MB
&lt;/span&gt;&lt;span id="line-4"&gt;0.0.0.0:5000/hello_docker   latest              677a7d6fbf49        10 minutes ago      231.1 MB
&lt;/span&gt;&lt;span id="line-5"&gt;...
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;IMAGE ID&lt;/code&gt;에서 확인할 수 있듯이 열거된 두 이미지는 이름만 다른 같은 이미지입니다. 이렇게 &lt;code&gt;/&lt;/code&gt; 앞에 도커 레지스트리의 주소를 지정해 이름을 부여하고(앞에서 간단히 사용해보았듯이 이 글에서 사용하는 도커 레지스트리의 주소는 &lt;code&gt;0.0.0.0:5000&lt;/code&gt;입니다) &lt;code&gt;push&lt;/code&gt;하면 해당하는 도커 레지스토리에 이미지가 업로드됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker push 0.0.0.0:5000/hello_docker
&lt;/span&gt;&lt;span id="line-2"&gt;The push refers to a repository &lt;span class="o"&gt;[&lt;/span&gt;0.0.0.0:5000/hello_docker&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;len: 1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;Sending image list
&lt;/span&gt;&lt;span id="line-4"&gt;Pushing repository 0.0.0.0:5000/hello_docker &lt;span class="o"&gt;(&lt;/span&gt;1 tags&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;511136ea3c5a: Image successfully pushed
&lt;/span&gt;&lt;span id="line-6"&gt;6170bb7b0ad1: Image successfully pushed
&lt;/span&gt;&lt;span id="line-7"&gt;79fdb1362c84: Image successfully pushed
&lt;/span&gt;&lt;span id="line-8"&gt;c0fe63f9a4c1: Image successfully pushed
&lt;/span&gt;&lt;span id="line-9"&gt;dfaa95be184e: Image successfully pushed
&lt;/span&gt;&lt;span id="line-10"&gt;677a7d6fbf49: Image successfully pushed
&lt;/span&gt;&lt;span id="line-11"&gt;Pushing tag &lt;span class="k"&gt;for &lt;/span&gt;rev &lt;span class="o"&gt;[&lt;/span&gt;677a7d6fbf49&lt;span class="o"&gt;]&lt;/span&gt; on &lt;span class="o"&gt;{&lt;/span&gt;http://0.0.0.0:5000/v1/repositories/hello_docker/tags/latest&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;출력 마지막의 주소를 통해서 실제 도커 레지스트리 서버에 이미지가 정상적으로 올라갔는지 확인해봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="s1"&gt;&amp;#39;http://0.0.0.0:5000/v1/repositories/hello_docker/tags/latest&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s2"&gt;&amp;quot;677a7d6fbf492ff63e9c7bd2fcbff5ea952b0c32c417d1251786a559a6b0af7a&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이미지 ID에서 확인할 수 있듯이 로컬의 &lt;code&gt;0.0.0.0:5000/hello_docker:latest&lt;/code&gt;(&lt;code&gt;nacyot/hello_docker:latest&lt;/code&gt;)와 도커 레지스트리의 &lt;code&gt;hello_docker:latest&lt;/code&gt;는 같은 이미지입니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-레지스트리에서-풀(pull)-받아-실행하기'&gt;도커 레지스트리에서 풀(Pull) 받아 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이제 가장 중요한 부분입니다. 도커 레지스트리에 이미지를 업로드했으니 거꾸로 이 도커 레지스트르에서 이미지를 &lt;code&gt;pull&lt;/code&gt; 받아 실행해보도록 하겠습니다. 로컬 도커 서버에 같은 이미지가 있으면 정확한 확인이 안 되니, 로컬에서 실행했던 컨테이너와 이미지를 삭제하겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 앞서 실행한 종료 상태에 있는 컨테이너를 삭제해야합니다. 컨테이너가 종료되었더라도 삭제되지 않은 상태로 있으면 컨테이너의 부모 이미지는 삭제할 수 없습니다. 앞서 &lt;code&gt;ps -a&lt;/code&gt; 명령어를 참조해 컨테이너를 삭제합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -a
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                        COMMAND                CREATED             STATUS                     PORTS                    NAMES
&lt;/span&gt;&lt;span id="line-3"&gt;d01aea6f8332        nacyot/hello_docker:latest   /bin/sh -c &lt;span class="s1"&gt;&amp;#39;echo &amp;#39;&lt;/span&gt;He   2 minutes ago       Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 2minutes ago                            prickly_fermat
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker rm prickly_fermat
&lt;/span&gt;&lt;span id="line-5"&gt;prickly_fermat
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; 명령어에 컨테이너 이름이나 아이디를 지정해 컨테이너를 삭제합니다. 다음으로 이미지를 삭제합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker rmi nacyot/hello_docker 0.0.0.0:5000/hello_docker
&lt;/span&gt;&lt;span id="line-2"&gt;Untagged: nacyot/hello_docker:latest
&lt;/span&gt;&lt;span id="line-3"&gt;Untagged: 0.0.0.0:5000/hello_docker:latest
&lt;/span&gt;&lt;span id="line-4"&gt;Deleted: 677a7d6fbf492ff63e9c7bd2fcbff5ea952b0c32c417d1251786a559a6b0af7a
&lt;/span&gt;&lt;span id="line-5"&gt;Deleted: dfaa95be184ee02339884cd7b4d93e0830cf7e6c8262a281409e0e8cef5f45e9
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;를 실행해 삭제되었는지 확인해봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images &lt;span class="p"&gt;|&lt;/span&gt; grep hello_docker
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;삭제된 이미지는 당연히 실행되지 않겠죠? 하지만 앞서서 도커 레지스트리의 주소를 지정한 이름을 사용하면 도커는 해당하는 주소에 도커 이미지가 있는지 먼저 검색합니다. 공유된 도커 이미지의 실행은 먼저 풀(Pull)을 받고 실행하는 단계를 거칩니다만, 바로 실행(&lt;code&gt;run&lt;/code&gt;) 명령어를 사용하면 도커는 자동적으로 해당하는 주소의 이미지를 풀 받고 실행합니다. 여기서는 바로 앞서 푸시한 도커 이미지를 실행하겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run 0.0.0.0:5000/hello_docker
&lt;/span&gt;&lt;span id="line-2"&gt;Unable to find image &lt;span class="s1"&gt;&amp;#39;0.0.0.0:5000/hello_docker&amp;#39;&lt;/span&gt; locally
&lt;/span&gt;&lt;span id="line-3"&gt;Pulling repository 0.0.0.0:5000/hello_docker
&lt;/span&gt;&lt;span id="line-4"&gt;677a7d6fbf49: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;511136ea3c5a: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;6170bb7b0ad1: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;79fdb1362c84: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;c0fe63f9a4c1: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;dfaa95be184e: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;Hello, Docker!
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;명령어는 위에서 로컬에 있던 이미지를 실행하는 것과 같습니다. 하지만 실행 과정의 출력을 보면 알 수 있듯이 로컬에 이미지가 없으니 &lt;code&gt;0.0.0.0:5000&lt;/code&gt;의 도커 레지스트리에서 이미지를 다운 받는 것을 확인할 수 있습니다. 그리고 마지막에는 정상적으로 이미지가 실행되어 &lt;code&gt;Hello, Docker!&lt;/code&gt;가 출력되었습니다!&lt;/p&gt;

&lt;h3&gt;&lt;a name='원격에서-도커-레지스트리-사용하기'&gt;원격에서 도커 레지스트리 사용하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이 예제에서는 로컬에서 도커 레지스트리와 도커 실행 서버를 둘 다 운영하고 있어서 실제로 제대로 작동하는 건지 잘 와닿지 않을지도 모릅니다. 가능하면 자신의 로컬(도커 레지스트리를 설치한 서버)을 외부에 노출시켜서 다른 도커 서버에서 실행시켜봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://17.231.14.21:5000/
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s2"&gt;&amp;quot;docker-registry server (dev) (v0.6.8)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run 17.231.14.21:5000/hello_docker
&lt;/span&gt;&lt;span id="line-4"&gt;Unable to find image &lt;span class="s1"&gt;&amp;#39;17.231.14.21:5000/hello_docker&amp;#39;&lt;/span&gt; locally
&lt;/span&gt;&lt;span id="line-5"&gt;Pulling repository 17.231.14.21:5000/hello_docker
&lt;/span&gt;&lt;span id="line-6"&gt;677a7d6fbf49: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;511136ea3c5a: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;6170bb7b0ad1: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;79fdb1362c84: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;c0fe63f9a4c1: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;dfaa95be184e: Download &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;Hello, Docker!
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제 IP는 공개할 수 없지만 :) 도커 레지스트리 서버(여기선 &lt;code&gt;17.231.14.21:5000&lt;/code&gt;)에 접속 가능한 도커 서버에서도 로컬에서와 같은 결과를 볼 수 있습니다. 직접 테스트해보시기 바랍니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='s3와-연동하기'&gt;S3와 연동하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;AWS빠라면 응당 도커 이미지를 S3에 저장하고 싶다고 느낄 것입니다. 속도나 추가적인 비용이 발생하는 데서, S3에 저장하는데 따른 부담이 없는 것은 아닙니다만 가장 쉽게 이미지를 안전하게 저장하는 방법이라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 도커 레지스트리는 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/python'&gt;파이썬&lt;/a&gt;&lt;/span&gt;의 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/flask' rel='noindex,nofollow'&gt;flask&lt;/a&gt;&lt;/span&gt;에 기반한 웹 어플리케이션입니다. 따라서 S3에서는 도커 레지스트리를 구동할 수 없습니다. 즉,  도커 레지스트리는 EC2나 로컬 서버를 이용해서 별도로 실행해야합니다. 이 레지스트리 설정에 이미지 저장 공간으로 로컬 드라이브가 아닌 S3 버킷을 지정해두면 해당하는 버킷에 이미지를 저장합니다. 이렇게 설정하면 도커 레지스트리에 이미지를 푸시할 때 도커 레지스트리는 이 이미지를 S3로 복사합니다. S3에 복사되면 아마존은 이 이미지를 안전하게 보관해줍니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-레지스트리-저장공간으로-s3-설정하기'&gt;도커 레지스트리 저장공간으로 S3 설정하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;S3 가입과 버킷 생성법은 별도로 다루지 않습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code&gt;s3api&lt;/code&gt; 명령어나 aws 웹콘솔에서 S3에 &lt;code&gt;docker-registry&lt;/code&gt;라는 새로운 버킷(bucket)을 만들어줍니다. 아마 &lt;code&gt;docker-registry&lt;/code&gt;라는 이름은 사용할 수 없을 테니 적당한 이름을 지정해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-05-07-docker-registry-introduction/create_bucket.png" alt="Creating a S3 bucket"&gt;&lt;/p&gt;

&lt;p&gt;다음으로 아래와 같이 &lt;code&gt;config.yml&lt;/code&gt; 파일을 작성합니다. bucket 이름과 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;로 둘러쌓인 변수들을 자신의 값으로 바꿔줍니다. &lt;code&gt;&amp;lt;SECRET_KEY&amp;gt;&lt;/code&gt;에는 임의의 값을 적절히 입력해줍니다. s3_region은 도쿄를 사용하고 있다고 가정하겠습니다. 도쿄를 사용할 시 &lt;code&gt;ap-northeast-1&lt;/code&gt;을 지정합니다. 이 파일을 적절히 새로운 디렉토리에 저장합니다. 여기서는 &lt;code&gt;/home/nacyot/src/registry-conf/config.yml&lt;/code&gt;에 저장한다고 가정합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;    &lt;span class="n"&gt;boto_bucket&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;    &lt;span class="n"&gt;s3_access_key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;S3_ACCESS_KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="n"&gt;s3_secret_key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;S3_SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;    &lt;span class="n"&gt;s3_bucket&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="n"&gt;s3_encrypt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    &lt;span class="n"&gt;s3_secure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;    &lt;span class="n"&gt;s3_region&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;northeast&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="n"&gt;storage_path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 이 설정을 적용해서 도커 레지스트리를 실행할 차례입니다. 이 설정 파일을 컨테이너를 실행해 직접 복사하거나 작성하고 커밋하는 방식으로 설정 파일이 적용된 이미지를 새로 만들 수도 있습니다만, 여기서는 도커 컨테이너에 호스트의 디렉토리를 마운트하는 기능을 사용합니다. &lt;code&gt;-v {HOST_DIR}:{CONTAINER_DIR}&lt;/code&gt;과 같이 지정하면 &lt;code&gt;HOST_DIR&lt;/code&gt;이 컨테이너 내부의 &lt;code&gt;CONTAINER_DIR&lt;/code&gt;에 마운트됩니다. 앞서서 &lt;code&gt;/home/naycot/src/registry-conf&lt;/code&gt;에 설정 파일을 넣어뒀으니 컨테이너에서는 &lt;code&gt;/registry-conf&lt;/code&gt; 디렉토리를 통해서 &lt;code&gt;config.yml&lt;/code&gt;에 접근할 수 있습니다. 다음으로 &lt;code&gt;-e&lt;/code&gt;는 컨테이너 내부의 환경 변수를 지정할 수 있습니다. &lt;code&gt;DOCKER_REGISTRY_CONFIG&lt;/code&gt;는 설정 파일 위치를 지정하는 환경변수입니다. 다음으로 &lt;code&gt;SETTINGS_FLAVOR&lt;/code&gt;는 실행 환경을 선택하는 환경변수입니다. 환경변수들을 아래와 같이 지정하고 컨테이너를 실행합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 5000:5000 -v /home/nacyot/src/registry-conf:/registry-conf -e &lt;span class="nv"&gt;SETTINGS_FLAVOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prod -e &lt;span class="nv"&gt;DOCKER_REGISTRY_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/registry-conf/config.yml registry
&lt;/span&gt;&lt;span id="line-2"&gt;91f0af600e4ef3a0ba41382cf74e9b4c1228524ec95c8ab3a05d64fbae5755cd
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ps&lt;/code&gt; 명령어로 컨테이너가 정상적으로 실행되었는지 확인합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -l
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                    NAMES
&lt;/span&gt;&lt;span id="line-3"&gt;91f0af600e4e        registry:0.6.8      /bin/sh -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /dock   6 minutes ago       Up 6 minutes        0.0.0.0:5000-&amp;gt;5000/tcp   compassionate_ptolemy
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞서 로컬에서와 마찬가지로 0.0.0.0:5000에 이미지를 푸시해봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker push 0.0.0.0:5000/hello_docker
&lt;/span&gt;&lt;span id="line-2"&gt;The push refers to a repository &lt;span class="o"&gt;[&lt;/span&gt;0.0.0.0:5000/hello_docker&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;len: 1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;Sending image list
&lt;/span&gt;&lt;span id="line-4"&gt;Pushing repository 0.0.0.0:5000/hello_docker &lt;span class="o"&gt;(&lt;/span&gt;1 tags&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;511136ea3c5a: Image successfully pushed
&lt;/span&gt;&lt;span id="line-6"&gt;6170bb7b0ad1: Image successfully pushed
&lt;/span&gt;&lt;span id="line-7"&gt;79fdb1362c84: Image successfully pushed
&lt;/span&gt;&lt;span id="line-8"&gt;c0fe63f9a4c1: Image successfully pushed
&lt;/span&gt;&lt;span id="line-9"&gt;dfaa95be184e: Image successfully pushed
&lt;/span&gt;&lt;span id="line-10"&gt;677a7d6fbf49: Image successfully pushed
&lt;/span&gt;&lt;span id="line-11"&gt;Pushing tag &lt;span class="k"&gt;for &lt;/span&gt;rev &lt;span class="o"&gt;[&lt;/span&gt;677a7d6fbf49&lt;span class="o"&gt;]&lt;/span&gt; on &lt;span class="o"&gt;{&lt;/span&gt;http://0.0.0.0:5000/v1/repositories/hello_docker/tags/latest&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 푸시된 것을 확인할 수 있습니다. 이 출력을 봐서는 실제로 이미지가 어디에 저장되었는지 확인하기 어렵습니다. 실제로 s3에 들어가 저장이 되었는지 확인해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-05-07-docker-registry-introduction/images.png" alt="Docker Images on AWS S3"&gt;&lt;/p&gt;

&lt;p&gt;푸시한 이미지들이 S3에 저장되어있는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;S3 설정을 사용하는 경우 어디에 저장하는 지만 차이가 나기 때문에, 앞서 다룬 풀(Pull)과 실행(Run)은 로컬에서 했던 것과 마찬가지입니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='기타-주제'&gt;기타 주제&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;a name='비용-문제'&gt;비용 문제&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;아직 헤비 유저는 아니라 단언은 불가하지만 비용 문제가 그렇게 부담은 아닐 거라고 생각하고 있습니다. 얼핏 생각해봐도 이미지의 용량이 상당히 크지 않을까 하는 생각이 듭니다만 도커에서는 이미지를 레이어 단위로 저장한다는 사실을 떠올릴 필요가 있습니다. 도커의 이미지는 부모 레이어에 대한 차분만을 저장합니다. 따라서 특정한 어플리케이션에 대한 이미지를 만들고 변경사항들을 계속 누적해가도 용량은 생각보다 크지 않습니다. 즉 10번의 변경이 누적된 이미지가 있다고 할 때 각각의 이미지가 최종적으로 1GB라고 해도 &lt;code&gt;1GB * 10 = 10GB&lt;/code&gt;가 되는 것이 아니라 &lt;code&gt;1GB + 0GB + 0GB ... = 1.xxxGB&lt;/code&gt; 정도가 됩니다. 물론 전혀 다른 이미지의 경우는 그만큼 용량을 차지합니다만, 사용하기에 따라서 절대적으로 부담스러운 용량은 아닐지도 모릅니다. 참고로 S3 프리티어는 5GB이고 이후 1GB당 1달에 $0.033 정도가 과금됩니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='보안'&gt;보안&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이 예제에서는 사용자 인증을 다루고 있지 않습니다. 따라서 예제대로 따라하면 개인적인 이미지 저장소이지만 네트워크가 열려있으면 공개되어있는 거나 마찬가지입니다. 실제로 사용하려면 보안 설정은 필수입니다. 더 자세한 사항은 &lt;a href="https://github.com/dotcloud/docker-registry"&gt;Github 저장소&lt;/a&gt;를 참조해주세요.&lt;/p&gt;

&lt;h3&gt;&lt;a name='api'&gt;API&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://docs.docker.io/reference/api/registry_api/"&gt;Docker Registry API&lt;/a&gt;를 참조하세요. 아직 레지스트리에 올라간 모든 이미지를 가져오는 API가 없습니다만, 아마 다음 버전에 추가될 것으로 보입니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;앞서 이야기했듯이 이미지를 쉽게 공유할 수 있다는 건 도커의 큰 장점 중 하나입니다. 공적 공유뿐 아니라 내부 네트워크에서 이미지의 사적 공유를 실현하는 건 도커를 실제 운용하는데 아마 필수적인 부분일 것입니다. 이를 통해 도커 레지스트리에서 커스텀 이미지를 일괄적으로 관리할 수 있고, 분산된 도커 서버들에서 이를 사용할 수 있습니다.&lt;/p&gt;
</content>
  </entry>
</feed>
