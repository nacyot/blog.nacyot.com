<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nacyot의 프로그래밍 이야기</title>
  <subtitle>Nacyot의 프로그래밍 이야기</subtitle>
  <id>http://blog.nacyot.com/</id>
  <link href="http://blog.nacyot.com/"/>
  <link href="http://blog.nacyot.com/feed.xml" rel="self"/>
  <updated>2014-12-16T16:35:00Z</updated>
  <author>
    <name>nacyot(Daekwon Kim)</name>
  </author>
  <entry>
    <title>루비와 파이썬에서 함수 호출과 함수 참조에 대한 차이</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-12-17-diffrence-of-ruby-and-python/"/>
    <id>http://blog.nacyot.com/articles/2014-12-17-diffrence-of-ruby-and-python/</id>
    <published>2014-12-16T16:35:00+00:00</published>
    <updated>2014-12-16T16:45:04+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;h2&gt;&lt;a name='발단이-된-트윗'&gt;발단이 된 트윗&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p&gt;파이썬 프로그래머는 이 코드를 보면 a가 출력될 거라고 예상하는 것 같다. 루비 프로그래머라면 당연히 ab고...&lt;/p&gt;&amp;mdash; nacyot (@nacyo_t) &lt;a href="https://twitter.com/nacyo_t/status/544497910436466689"&gt;2014년 12월 15일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;반응이 있어서(?) 조금 정리해봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 저 코드를 보시면 무엇이 출력될 것이라고 예상되시나요? 재미있게도 이 코드는 자신이 주로 사용하는 언어에 따라서 그 결과가 다르게 보일 수 있습니다.&lt;/p&gt;

&lt;p&gt;저는 루비를 주로 사용해왔고, 이 코드를 보면 그냥 당연히 ab가 출력될 것이라고 생각합니다. 더욱이 이 코드는 Ruby 코드이기 때문에 실제로 실행해봐도 ab가 출력됩니다. 이 코드를 이해하기 위한 핵심은 아래 코드에서&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a와 b가 실제로는 메서드 호출이라는 점입니다. 루비에서는 a, b와 같은 이름이 주어지면 먼저 현재 맥락에서 이러한 이름을 가진 변수를 찾고, 변수를 찾지 못 하면 이러한 이름을 가진 메서드를 찾아서 호출합니다. 즉, f가 호출되는 시점에, &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;b&lt;/code&gt;는 각각 메서드 호출로 평가되어 그 반환값으로 치환됩니다. 따라서 이 시점에 &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;b&lt;/code&gt;가 실행되고, ab가 출력됩니다. 그리고 루비에서는 &lt;code&gt;return&lt;/code&gt; 메서드를 명시적으로 사용하지 않을 경우 메서드 본문의 마지막 문장의 평가 결과가 반환된다는 규칙에 따라 &lt;code&gt;print &amp;#39;a&amp;#39;&lt;/code&gt;의 평가 결과인 &lt;code&gt;nil&lt;/code&gt;이 반환됩니다. 따라서 &lt;code&gt;a&lt;/code&gt; 메서드는 a를 출력하고, nil을 반환하고, b 역시 같은 원리로 동작합니다. 이에 따라 실제로 &lt;code&gt;f(a, b)&lt;/code&gt;는 &lt;code&gt;f(nil, nil)&lt;/code&gt;을 호출한 것과 같습니다. 그리고 f함수 안에서 &lt;code&gt;arg1&lt;/code&gt;은 nil이기 때문에 &lt;code&gt;f(a, b)&lt;/code&gt;는 결과적으로 nil을 반환합니다.&lt;/p&gt;

&lt;p&gt;Python 프로그래머에게 ab라는 출력 결과는 의아할 것입니다. 이 코드를 파이썬으로 치환해해보면 아래와 같습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 이 코드를 파이썬에서 실행하면 a가 출력됩니다. 이렇게 보면 앞선 루비 코드가 ab를 출력하는 일이 왜 의아한 일인지 알 수 있습니다. 이제 반대 입장에서 이는 루비 프로그래머 입장에서 보면 의아한 일입니다.&lt;/p&gt;

&lt;p&gt;어째서 이런 일이 일어난 걸까요. 파이썬에서는 &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;b&lt;/code&gt;가 함수 호출이 아닙니다. a라는 이름으로 함수를 정의하고 나면 &lt;code&gt;a&lt;/code&gt;를 통해서 함수 자체에 접근할 수 있습니다. 즉 &lt;code&gt;f(a, b)&lt;/code&gt;에서 &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;b&lt;/code&gt;는 루비와 달리 함수 호출이 아니라, 함수 참조 자체를 f 함수에 넘기는 일이 됩니다. 따라서 f함수 내에서 &lt;code&gt;arg1()&lt;/code&gt;은 실제로는 &lt;code&gt;a()&lt;/code&gt;과 같은 표현이고, 따라서 a만 출력됩니다.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none" lang="ko"&gt;&lt;p&gt;&lt;a href="https://twitter.com/nacyo_t"&gt;@nacyo_t&lt;/a&gt; 아무 일도 일어나지 않을 것 같은데요..?&lt;/p&gt;&amp;mdash; xymz (@extinctspecies_) &lt;a href="https://twitter.com/extinctspecies_/status/544805229816860672"&gt;2014년 12월 16일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;이런 의견도 있었는데, 루비 코드를 파이썬 코드로 (뇌 내에서) 포팅할 때 f 함수의 본문을 &lt;code&gt;arg1&lt;/code&gt;로 보느냐 &lt;code&gt;arg()&lt;/code&gt;로 보느냐의 차이에서 오는 것으로 보입니다. &lt;code&gt;arg1()&lt;/code&gt;로 해석하면 &lt;code&gt;a()&lt;/code&gt;와 같이 함수 호출이 되어 a를 출력하지만, &lt;code&gt;arg1&lt;/code&gt;로 보면 단순히 함수 자체를 평가하는 일이 되서 아무일도 일어나지 않습니다(파이썬에는 루비와 같은 마지막 식을 반환한다는 규칙도 없으므로 아무것도 반환되지도 않습니다).&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;루비와 파이썬은 생각보다 다르다, 는 걸로.&lt;/p&gt;

&lt;p&gt;이런 시각 차이는 두 가지 점에서 기인하는 듯 합니다. 하나는 단순한 문법 차이고, 하나는 언어 디자인 자체에 있습니다. 파이썬에서는 함수 정의와 다른 객체들에 대해 실질적인 차이 없이 접근할 수 있습니다만, 그런데 루비에서는 그렇지 않습니다. 루비에서 &lt;code&gt;self.method(:a)&lt;/code&gt;와 같이 메서드 객체를 참조하는 방법이 있긴합니다만, 다른 객체처럼 동등한 방법으로 접근할 방법은 없습니다. 오히려 그렇게 하면 메서드가 호출되어 버립니다. 심지어 &lt;code&gt;self.method(:a)&lt;/code&gt;와 같이 참조한 메서드를 호출하는 방법도 그냥 호출하면 안되고 &lt;code&gt;.call&lt;/code&gt; 메서드를 통해서 호출해야합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/ahastudio/posts/10152981560200929"&gt;아샬 님의 글&lt;/a&gt;도 참조해주세요.&lt;/p&gt;

&lt;h2&gt;&lt;a name='이-코드에-대해-나눈-대화-전문'&gt;이 코드에 대해 나눈 대화 전문&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 와 루비 이상해요&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 네???&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 이거 결과가&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : ㅋ&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아니&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 이렇게 되면 당연히&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 상식적으로(?)&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : a만 출력되야 하는거 아닌가요?&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 왜 그렇게 생각하시는 거죠?&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 궁금하네요. 왜 그렇게 생각하신 건지&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : ㅋㅋ&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬을 써서&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬에서는 a, b 가 그냥 함수인 변수인데 루비는 아닌가보죠?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 왠지 도발한 느낌인데 ㅋㅋ&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 함수인 변수라는 게 무슨 말인지 모르겠네요;;;&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 도발이라는 건 아니고...&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬은 저렇게 하면&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : a가 결과잖아요&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 루비 &lt;strike&gt;게이&lt;/strike&gt;로서 이해가 안 되요.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 근데 루비는 ab가 나와서&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그런가요?&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 파이썬에선 왜 a가 나오죠?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 왜냐하면&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 안에서&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : arg1만 호출하니까&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : f라는 함수 안에서는&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : args1로 a가 넘어가는 거예요?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 네&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : &amp;quot;a&amp;quot;&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 음. 파이썬도&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : a라는 함수인 변수가&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 넘어가니&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 아하.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : arg1가&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : a라는 함수가 넘어가니.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : a가 되는거죠&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 네&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : a는&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : a()&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : a = a()&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 파이썬 얘기 듣게요.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 근데&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그렇게 되면 arg1은 뭐죠? 함수 안에서.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 이건 그냥 함수잖아요.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 그냥 함수죠&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 네&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 함수 호출도 아니고.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬은 그냥 함수&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 파이썬은 물론&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그럼 왜 a가 찍히죠?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : ()가 있어야 ..&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 아.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : ㅇㅋ 이해했습니다.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 루비는 ()가 없어도 호출 되길래&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : 음&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 원래 루비는 그렇게 호출하나보다 라고 생각을 ..&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 루비 해설해 드릴게요.&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : 루비는 함수를 넘기려면 어떻게 하지&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 루비는 함수를 못 넘깁니다.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 리터럴로는&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아 ..&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 파이썬은 자바스크립트랑 비슷해요.&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : 아 뭔가 꼼수같은 방법 없나요?&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 저 소스 다시 써주세요.ㅜ&lt;br/&gt;
&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : 애초에 그렇게 안해서 그런가 ㅋ&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 를 이해할 필요가 있는데.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;  &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : a를 호출하면 a가 찍히겠죠?&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 넵&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그러니까 f(a, b)에서&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 실제는 f(a(), b())이 되서,&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : a,b는 미리 출력됩니다.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 헐&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 그런거구나&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그럼 어떻게 f()가 호출되는 거냐면.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color:purple"&gt;&lt;strong&gt;s?????&lt;/strong&gt;&lt;/span&gt; : a -&amp;gt; a() 요것만 생각하면 이해가 쉬우실듯 ㅋㅋ&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 이 메서드의&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 반환값이&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : nil이에요.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 그러니까  실제로는 f(a,b)라고 생각하셨지만, 이 시점에서 함수 호출과 반환값으로 치환이 이루어지는 거죠.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 따라서 ab가 출력되고&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 헐 ..&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 실제 인자는 반환값이군요&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : f(nil, nil)을 호출하는 겁니다.&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 아 ..&lt;br/&gt;
&lt;span style="color:blue"&gt;&lt;strong&gt;l?????&lt;/strong&gt;&lt;/span&gt; : 이해가 한 방에 됐네요 감사합니다. ㅜ&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : f 내부에서 args1이 nil이 되니까.&lt;br/&gt;
&lt;span style="color:darkgreen"&gt;&lt;strong&gt;nacyot&lt;/strong&gt;&lt;/span&gt; : 저 함수는 ab를 출력하고 반환값이 nil이 되는 거죠&lt;br/&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>도커(Docker)로 루비 온 레일스 어플리케이션 배포하기 (1) 어플리케이션 이미지 만들기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-08-08-rails-on-docker/"/>
    <id>http://blog.nacyot.com/articles/2014-08-08-rails-on-docker/</id>
    <published>2014-08-07T20:10:00+00:00</published>
    <updated>2014-12-16T16:45:04+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;이 글은 지난 6월 10일 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/rorlab' rel='noindex,nofollow'&gt;RORLab&lt;/a&gt;&lt;/span&gt;에서 발표한 &amp;#39;도커(Docker)로 루비 온 레일스 어플리케이션 배포하기&amp;#39;를 정리한 문서입니다. 발표 자료는 &lt;a href="https://www.facebook.com/naverd2/posts/505653179563380"&gt;페이스북 페이지&lt;/a&gt;를 참조해주세요. 먼저 이미지와 컨테이너 소개 및 이미지 생성에 대해서 다룬 앞 부분은 이전에 작성했던 문서 &amp;#39;&lt;a href="http://blog.nacyot.com/articles/2014-01-27-easy-deploy-with-docker/"&gt;도커(Docker) 튜토리얼 : 깐 김에 배포까지&lt;/a&gt;&amp;#39;로 대체합니다.&lt;/p&gt;

&lt;p&gt;이 글은 두 편으로 나눠서 공개할 예정입니다. 먼저 이 글에서는 Docker를 사용해 Ruby on Rails 어플리케이션을 도커 이미지화하는 법에 대해서 다룹니다. 그리고 다음 글에서는 이미지화한 어플리케이션을 실제로 어떻게 배포하는 지와 간단한 스케일 아웃 예제를 소개합니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='도커로-어플리케이션-배포하기'&gt;도커로 어플리케이션 배포하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker'&gt;도커&lt;/a&gt;&lt;/span&gt;는 다양한 용도로 사용 가능하지만, 가장 원초적인 목적은 어플리케이션 배포에 있다. 또한 이미지를 기반으로 한 도커의 방식에 따라 도커를 통해 어플리케이션을 배포한다는 의미는 개발한 어플리케이션과 어플리케이션을 둘러싼 어플리케이션이 실행가능한 환경 전체를 이미지화한다는 의미를 가지고 있다.&lt;/p&gt;

&lt;p&gt;이 과정에서 기존의 서버를 운영하는 것과 마찬가지로 기본적으로는 일련의 명령어를 실행시키거나 쉘스크립트를 실행시킨다. 이러한 일련의 과정을 도커에서는 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/dockerfile'&gt;Dockerfile&lt;/a&gt;&lt;/span&gt; 이라는 독자적인 포맷(DSL)을 통해서 기술하고, 이 Dockerfile을 빌드해서 이미지를 생성한다.&lt;/p&gt;

&lt;p&gt;아쉽지만 같은 Dockerfile 이라도 빌드가 항상 성공한다는 보장은 물론 없다. 즉, Dockefile을 통해 이미지 생성 과정을 재현할 수 있지만, 이 과정이 완벽하다고는 할 수 없다. 예를 들어 네트워크가 불안정해서 관련된 빌드 과정에 문제가 생길 수도 있고, 시스템 라이브러리에 중요한 보안 패치가 있어서 어플리케이션 실행에 영향을 줄 수도 있다. 재현은 불완전하다. 하지만 일반적으로 빌드에 성공한 이미지는 그 시점이 언제인지가 큰 상관만 없다면 완결된 이미지로서 정상적으로 완결되어있다고 봐도 무방하다.&lt;/p&gt;

&lt;p&gt;이렇게 빌드된 이미지는 어플리케이션 + 실행환경은 하나의 세트로 포함하고 있으며, 따라서 도커 서버가 설치된 곳이라면 어디에서든지 &amp;#39;당장&amp;#39;에 &amp;#39;정상적으로&amp;#39; 실행가능하다. 다시 한 번 이야기하지만, 도커를 통해서 어플리케이션을 배포한다는 의미는 어플리케이션을 포함하는 이미지를 생성하고 관리한다는 의미이다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='레일스-어플리케이션'&gt;레일스 어플리케이션&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서 배포하는 어플리케이션은 &lt;code&gt;rails new&lt;/code&gt;로 생성되는 사실은 속에 아무것도 없는 어플리케이션이다. 물론 훨씬 더 개발이 진행된 어플리케이션에서는 고려해야할 사항이 훨씬 더 많이 있겠지만, 그런 문제들은 도커를 통한 배포의 문제라기보다는 서버 구성이나 레일스 내부적으로 결정해야할 문제라고 할 수 있다. 도커를 통해서 이미지를 만드는 과정 자체는 근본적으로 다르지 않을 것이다. 단지 좀 더 많은 설정이 필요하고, 좀 더 많고, 정교한 의존성 관리가 필요한 것 뿐이다.&lt;/p&gt;

&lt;p&gt;어쨌거나 한 번 더 강조하지만, 어떤 어플리케이션을 배포하건 도커를 통한 배포의 목표는 이 어플리케이션이 실행 가능한 이미지를 만드는 일이다. 이 글에서 사용한 레일스 샘플 어플리케이션의 저장소는 아래에서 찾을 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/docker-sample-project"&gt;nacyot/docker-sample-project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 글에서 사용하는 dockerfile들은 아래 저장소에서 찾을 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/rails-new-dockerfile"&gt;nacyot/rails-new-dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name='이미지-생성-준비-작업'&gt;이미지 생성 준비 작업&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 작업을 진행하기 위해 위에서 언급한 저장소를 작업 디렉토리에 clone한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# 샘플 레일스 프로젝트 클론&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# 도커파일 클론&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 클론되었는지 확인한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ll
&lt;/span&gt;&lt;span id="line-2"&gt;drwxrwxr-x 13 nacyot nacyot 4096 Jun 10 20:50 docker-sample-project
&lt;/span&gt;&lt;span id="line-3"&gt;drwxrwxr-x 10 nacyot nacyot 4096 Jun 11 21:08 rails-new-dockerfile
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='v0.0'&gt;v0.0&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker-sample-project&lt;/code&gt;는 &lt;code&gt;rails new&lt;/code&gt; 명령어로 생성되었다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/ruby_on_rails'&gt;레일스&lt;/a&gt;&lt;/span&gt;를 사용해본 사람이라면 바로 이해하겠지만 &lt;code&gt;rails new&lt;/code&gt; 명령어는 레일스 프로젝트의 뼈대를 만들어준다. 프로그래머는 이 뼈대에 자신이 필요한 것들을 붙여나가면서 어플리케이션을 만들어나간다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v0.0&lt;/code&gt;은 아직 아무것도 수정하지 않은 상태이다. 실제 이미지 생성은 &lt;code&gt;v0.1&lt;/code&gt;부터 진행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;docker-sample-project
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout v0.0
&lt;/span&gt;&lt;span id="line-3"&gt;HEAD is now at c3754e3... Initialize project
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
&lt;/span&gt;&lt;span id="line-5"&gt;app  ca      config.ru  docker   Gemfile.lock  log     Rakefile     &lt;span class="nb"&gt;test  &lt;/span&gt;vendor
&lt;/span&gt;&lt;span id="line-6"&gt;bin  config  db         Gemfile  lib           public  README.rdoc  tmp
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;익숙한 레일스 프로젝트를 볼 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='v0.1-procfile-&amp;amp;-serve-static-assets-옵션'&gt;v0.1 Procfile &amp;amp; serve static assets 옵션&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 처음으로 배포할 태그 &lt;code&gt;v0.1&lt;/code&gt;은 &lt;code&gt;rails new&lt;/code&gt;로 프로젝트를 생성한 이후 약간의 수정을 거쳤다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout v0.1
&lt;/span&gt;&lt;span id="line-2"&gt;HEAD is now at 4b3c006... Set serve_static_assets &lt;span class="nb"&gt;true &lt;/span&gt;in production
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;v0.0&lt;/code&gt;은 레일스 프로젝트가 초기화된 시점이다. diff 명령어를 통해 &lt;code&gt;v0.1&lt;/code&gt;과 비교해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git diff v0.0
&lt;/span&gt;&lt;span id="line-2"&gt;diff --git a/Procfile b/Procfile
&lt;/span&gt;&lt;span id="line-3"&gt;+web: bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails server -p 60005
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;diff --git a/config/environments/production.rb b/config/environments/production.rb
&lt;/span&gt;&lt;span id="line-6"&gt;-  config.serve_static_assets &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;+  config.serve_static_assets &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;diff를 통해 &lt;code&gt;v0.1&lt;/code&gt;에서는 두 개의 파일이 변경된 것을 확인할 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='procfile'&gt;Procfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat Procfile
&lt;/span&gt;&lt;span id="line-2"&gt;web: bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails server -p 60005
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/procfile' rel='noindex,nofollow'&gt;Procfile&lt;/a&gt;&lt;/span&gt;은 어플리케이션의 실행단위를 정의한다. 예를 들어 하나의 어플리케이션은 여러개의 프로세스로 구성될 수 있다. 가장 기본적인 프로세스는 단연 웹 서버일 것이다. 부가적으로 백그라운드 작업을 하는 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/sidekiq'&gt;sidekiq&lt;/a&gt;&lt;/span&gt;이 있을 수도 있고, 중간 cache_db가 있을 수도 있다. 일반적인 서버 운영시에는 필요한 프로세스를 각각 실행시킨다. 하지만 이러한 프로세스들은 하나로 모아야만 하나의 어플리케이션이 정상적으로 실행될 수 있다면, 그것들을 한꺼번에 실행시키는 것이 더 합리적일 것이다. Procfile에는 바로 이러한 어플리케이션 실행 단위를 정의한다. 여기서는 아직 레일스 기본 웹서버밖에 없으므로 특별한 내용은 없다.&lt;/p&gt;

&lt;p&gt;참고로 포트를 60005번으로 지정한 것은 3000번 포트를 자주 사용하므로 편의상 이동시킨 것뿐이고, 특별한 의미는 없다.&lt;/p&gt;

&lt;p&gt;이 Procfile은 루비의 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/foreman' rel='noindex,nofollow'&gt;foreman&lt;/a&gt;&lt;/span&gt;이라는 Gem을 사용해서 실행한다. 이는 뒤에서 Dockerfile을 검토할 때 다룬다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='serve-static-assets-옵션'&gt;serve static assets 옵션&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;두번째로 변경한 부분은 &lt;code&gt;produciton.rb&lt;/code&gt;(프로덕션 환경 설정)에서 &lt;code&gt;serve_static_assets&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt;로 지정한 부분이다. 개발(development) 모드에서는 레일스 서버가 &lt;code&gt;./public&lt;/code&gt; 디렉토리 아래의 파일들을 직접 응답해준다. 하지만 프로덕션 환경에서는 그렇지 않다. 이는 실제 프로덕션 환경에서는 이러한 정적 파일들을 레일스 서버가 아니라 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/nginx' rel='noindex,nofollow'&gt;nginx&lt;/a&gt;&lt;/span&gt;나 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/apache' rel='noindex,nofollow'&gt;apache&lt;/a&gt;&lt;/span&gt;와 같은 이런 역할에 좀 더 충실한 서버들을 활용해서 전달될 것을 기대하기 때문이다. 그리고 실제로 그렇게 사용하는 것이 정상적인 구성이다. 하지만 여기서는 해당하는 구성을 하지 않으므로 에러 페이지를 비롯한 기본적인 정적 파일에 응답하기 위해 이 옵션을 활성화한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='v0.1-이미지-생성하기'&gt;v0.1 이미지 생성하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기까지 간략하게 &lt;code&gt;v0.1&lt;/code&gt;이 어떻게 변경되었는 지를 살펴보았다. 그렇다면 여기서부터는 실제로 &lt;code&gt;v0.1&lt;/code&gt; 프로젝트를 이미지로 만들 것이다. 이를 위해서는 이러한 일련의 과정을 기술한 Dockerfile을 준비해야한다. 이 파일은 앞서서 클론 받은 &lt;code&gt;rails-new-dockerfile&lt;/code&gt; 디렉토리에 포함되어 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../rails-new-dockerfile/v0.1
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
&lt;/span&gt;&lt;span id="line-3"&gt;Dockerfile
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 디렉토리에는 Dockerfile 하나만 덩그러니 들어있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='dockerfile(v0.1)'&gt;Dockerfile(v0.1)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 빌드에 앞서 도커 파일을 살펴보도록하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Run upgrades&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="cp"&gt;# Install basic packages&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt; &lt;span class="n"&gt;libssl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; 
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="cp"&gt;# Install Ruby 2.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;brightbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ng&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bundler&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rdoc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="cp"&gt;# Install packages for app&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;libsqlite3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;nodejs&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;foreman&lt;/span&gt; &lt;span class="n"&gt;compass&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="cp"&gt;# Install docker-sample-project v0.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/nacyot/docker-sample-project.git /app&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="cp"&gt;# Run docker-sample-project&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;SECRET_KEY_BASE&lt;/span&gt; &lt;span class="n"&gt;hellodocker&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-30"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;RAILS_ENV&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-31"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;60005&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-32"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="n"&gt;foreman&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;Procfile&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;계속해서 사용할 Dockerfile이므로 각각의 부분에 대해서 좀 더 자세히 살펴보자.&lt;/p&gt;

&lt;h4&gt;&lt;a name='베이스-이미지-지정'&gt;베이스 이미지 지정&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt;은 이 Dockerfile을 빌드할 때 사용할 베이스 이미지를 지정한다. 지정 방식은 이미지를 나타내는 해시값이나 이름을 지정할 수 있다.&lt;/p&gt;

&lt;p&gt;여기서 사용한 &lt;code&gt;dockerfile/ubuntu&lt;/code&gt;는 공식 &lt;code&gt;ubuntu:14.04&lt;/code&gt;에 약간의 기본적인 설정이 가미된 이미지이다. &lt;a href="http://dockerfile.github.io/#/ubuntu"&gt;Dockerfile Project&lt;/a&gt;는 비슷한 종류의 확장된 기본 이미지를 다수 제공한다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='dockerfile-관리자-지정'&gt;Dockerfile 관리자 지정&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;MAINTAINER&lt;/code&gt;는 이 Dockerfile을 관리하는 사람을 명시적으로 알려준다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='기본-라이브러리-설치'&gt;기본 라이브러리 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Run upgrades&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Install basic packages&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt; &lt;span class="n"&gt;libssl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; 
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt;은 쉘 명령어를 실행시킨다. 먼저 &lt;code&gt;apt-get update&lt;/code&gt;를 통해서 저장소의 정보를 갱신한다. 이 과정을 생략하면 빌드 시점에 따라서 &lt;code&gt;apt-get install&lt;/code&gt;이 정상적으로 작동되지 않을 가능성이 높으므로 특별한 이유가 없는 한 반드시 실행한다.&lt;/p&gt;

&lt;p&gt;다음으로는 &lt;code&gt;apt-get install&lt;/code&gt; 명령어로 기본 패키지들을 설치한다. 이는 필요에 따라서 유동적이다. 여기서는 다른 어플리케이션 빌드 과정에서 필요한 패키지들과 어플리케이션을 저장소에서 가져올 수 있도록 git을 미리 설치한다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='루비-설치하기'&gt;루비 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Install Ruby 2.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;brightbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ng&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;레일스 어플리케이션은 루비 프로그래밍 언어를 기반으로 하고 있다. 따라서 레일스 어플리케이션을 실행하고자 한다며 반드시 루비를 실행할 수 있어야한다. 공식 루비 패키지는 루비 버전이 오래되었을 가능성이 높다. &lt;code&gt;ppa:brightbox/ruby-ng&lt;/code&gt;에서는 최신 루비 패키지를 지원한다. 따라서 이 저장소를 추가하고 &lt;code&gt;apt-get install ruby2.1&lt;/code&gt; 명령어로 루비를 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bundler&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rdoc&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;루비에는 현재 기본적으로 패키지 관리를 위한 &lt;code&gt;gem&lt;/code&gt; 명령어를 포함한다. 이는 시스템 단위의 패키지 관리를 해주는 툴이므로 어플리케이션 단위의 의존성 관리를 위한 &lt;code&gt;bundler&lt;/code&gt;를 설치할 필요가 있다. 이를 설치해준다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='레일스-어플리케이션-실행을-위한-시스템-패키지-설치'&gt;레일스 어플리케이션 실행을 위한 시스템 패키지 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;libsqlite3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;nodejs&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기에는 함정에 빠진 초보 레일스 개발자를 구해줄 마법같은 명령어들이 있다. 레일스는 특별히 설정하지 않으면 기본적으로 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/sqlite3' rel='noindex,nofollow'&gt;sqlite3&lt;/a&gt;&lt;/span&gt;를 사용한다. 그런데 &lt;code&gt;bundle install&lt;/code&gt;을 실행하면 sqlite3 Gem 부분에서 에러가 나는 경우가 많다. 위의 패키지를 설치하면 해당하는 문제가 마법같이 해결된다.&lt;/p&gt;

&lt;p&gt;아래 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/nodejs'&gt;nodejs&lt;/a&gt;&lt;/span&gt; 패키지도 마찬가지다. nodejs 패키지 설치없이 &lt;code&gt;bundle install&lt;/code&gt;을 설치하면 시스템에 자바스크립트 런타임이 없다는 이유로 bundle이 제대로 이루어지지 못 한다. nodejs를 설치하면 이러한 문제가 해결된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;foreman&lt;/span&gt; &lt;span class="n"&gt;compass&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;추가적으로 루비 패키지들을 설치해준다. foreman은 앞서서 소개한 Procfile을 실행시켜주는 Gem이다. &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/compass' rel='noindex,nofollow'&gt;compass&lt;/a&gt;&lt;/span&gt;는 에셋 컴파일에 사용된다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='레일스-어플리케이션-설치하기'&gt;레일스 어플리케이션 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;여기까지가 기본적인 시스템 설정이었다면 여기부터가 직접 만든 어플리케이션을 설치하는 부분이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; 지시자는 앞으로 실행되는 모든 &lt;code&gt;RUN&lt;/code&gt; 지시자의 실행 위치를 지정한다. 즉 &lt;code&gt;WORKDIR /app&lt;/code&gt;을 통해서 아래의 모든 명령어는 &lt;code&gt;/app&lt;/code&gt; 디렉토리에서 실행된다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/nacyot/docker-sample-project.git /app&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;어플리케이션을 클론하고, &lt;code&gt;v0.1&lt;/code&gt;로 체크아웃한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로덕션 모드에서 배포를 위한 레일스 의존성을 설치한다. 특별히 어려울 건 전혀없다. 앞서서 &lt;code&gt;bundle&lt;/code&gt; 실행시 발생할 수 있는 문제들을 해결하기 위한 패키지들도 미리 설치해두었기 때문에 별 무리없이 설치가 진행될 것이다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='환경변수-지정하기'&gt;환경변수 지정하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;RAILS_ENV&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;SECRET_KEY_BASE&lt;/span&gt; &lt;span class="n"&gt;hellodocker&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;레일스에서는 일부 환경변수를 우선적으로 자신의 환경설정에 적용한다. &lt;code&gt;ENV&lt;/code&gt; 지시자를 사용하면 이미지에 이러한 환경변수 초기값을 지정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RAILS_ENV&lt;/code&gt;는 어플리케이션이 실행되는 환경을 의미한다. 여기서는 (아직 아무것도 없음에도 불구하고!)배포 과정이므로 &lt;code&gt;production&lt;/code&gt;을 지정한다.&lt;/p&gt;

&lt;p&gt;또한 production 모드에서는 &lt;code&gt;secret_token&lt;/code&gt;이 기본적으로 설정되어있지 않다. 이를 지정하기 위해서는 &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt; 환경변수를 사용해야한다. 적당한 값을 지정해주면 된다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='포트-노출하기'&gt;포트 노출하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;60005&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 지시자는 실행된 도커 컨테이너에서 외부에 노출 가능한 포트를 지정한다. 앞서 언급한 바 있듯이 이 글에서는 편의상 서버를 60005번으로 사용한다. 따라서 컨테이너의 60005번 포트를 노출시킨다.&lt;/p&gt;

&lt;h4&gt;&lt;a name='기본-명령어-지정하기'&gt;기본 명령어 지정하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="n"&gt;foreman&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;Procfile&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;를 사용하면 도커 이미지에 기본 명령어를 지정할 수 있다. 이미지와 컨테이너를 소개할 때 반복적으로 강조하려고 하는 두 가지가 이미지로부터 컨테이너가 실행된다는 거고, 컨테이너는 항상 단 하나의 프로세스라는 점이다. 즉 개념적으로는 가상머신과 비슷하지만, 구현적으로는 가상머신과 너무나도 다르다. 다시 한 번 이야기한다. 컨테이너는 항상 단 하나의 프로세스이다. 이 사실을 놓쳐서는 안 된다.&lt;/p&gt;

&lt;p&gt;이 말을 바꿔말하면 어플리케이션 실행 환경이 통째로 들어있는 이미지에 대해서 &amp;#39;어떠한 명령어&amp;#39;를 사용해서든 컨테이너를 실행할 수 있다는 말이다. 그래서 &lt;code&gt;/bin/bash&lt;/code&gt;를 지정하면 컨테이너에 접속을 할 수 있는 거고, &lt;code&gt;bundle exec rails server&lt;/code&gt;를 지정하면 어플리케이션을 실행할 수 있다. 조건은 컨테이너에 해당하는 실행파일만 있으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;로 기본 명령어를 지정한다는 말은 도커 이미지를 명령어 인자 없이 &lt;code&gt;run&lt;/code&gt;(실행)시켰을 때 실행되는 명령어를 지정한다는 의미이다.&lt;/p&gt;

&lt;p&gt;여기서는 기본 명령어로 위에서 이야기한 대로 foreman을 사용해 Procfile을 실행한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-이미지-빌드'&gt;도커 이미지 빌드&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기까지 따라왔으면 거진 다 온 거나 마찬가지다. 이제 이미지를 빌드해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t nacyot/rails-new:0.1 .
&lt;/span&gt;&lt;span id="line-2"&gt;Sending build context to Docker daemon 3.584 kB
&lt;/span&gt;&lt;span id="line-3"&gt;Sending build context to Docker daemon 
&lt;/span&gt;&lt;span id="line-4"&gt;Step 0 : FROM dockerfile/ubuntu
&lt;/span&gt;&lt;span id="line-5"&gt; ---&amp;gt; 96af2d36fb39
&lt;/span&gt;&lt;span id="line-6"&gt;Step 1 : MAINTAINER nacyot&lt;span class="o"&gt;(&lt;/span&gt;propellerheaven@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-8"&gt; ---&amp;gt; 63b3eaf59343
&lt;/span&gt;&lt;span id="line-9"&gt;Step 2 : RUN apt-get update
&lt;/span&gt;&lt;span id="line-10"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-11"&gt; ---&amp;gt; c20d985f7209
&lt;/span&gt;&lt;span id="line-12"&gt;...
&lt;/span&gt;&lt;span id="line-13"&gt;Step 18 : EXPOSE 60005
&lt;/span&gt;&lt;span id="line-14"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-15"&gt; ---&amp;gt; 1d4c322a6f1a
&lt;/span&gt;&lt;span id="line-16"&gt;Step 19 : CMD foreman start -f Procfile
&lt;/span&gt;&lt;span id="line-17"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-18"&gt; ---&amp;gt; 3c2e6f8643fd
&lt;/span&gt;&lt;span id="line-19"&gt;Successfully built 3c2e6f8643fd
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; 옵션은 이미지 이름을 지정해주는 부분이다. 마지막의 &lt;code&gt;.&lt;/code&gt;이 조금 헷갈릴 수도 있는데, 이는 현재 디렉토리에 있는 Dockerfile을 빌드하라는 의미이다. 한번 빌드했었기 때문에 위의 출력 결과에서는 cache를 사용해 빌드했음을 알 수 있다. 어쨌거나 빌드는 무사히 성공되었다.&lt;/p&gt;

&lt;p&gt;이미지가 정상적으로 등록되었는지 검색해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images &lt;span class="p"&gt;|&lt;/span&gt; grep rails-new
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="o"&gt;(&lt;/span&gt;standard input&lt;span class="o"&gt;)&lt;/span&gt;:8:nacyot/rails-new   0.1   3c2e6f8643fd   32 hours ago   716.8 MB
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dockerfile만 잘 만들면 시간이 걸릴 뿐이지, 빌드는 정말 쉽다. 중간에 빌드가 실패하더라도, 실패한 부분까지는 레이어가 만들어져 cache를 사용할 수 있게된다. 따라서 실패한 부분 이후의 Dockerfile만 수정하고 다시 빌드하더라도 매우 빠르게 진행이 되서 부담이 적다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-이미지-실행'&gt;도커 이미지 실행&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;계속해서 강조하지만 도커에서 어플리케이션을 배포한다는 말은 실행가능한 이미지를 생성하는 일이다. 첫번째 레일스 이미지를 만드는데 무사히 성공했다. 이제 이를 실행해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name v0.1 -d -p 60005:60005 nacyot/rails-new:0.1
&lt;/span&gt;&lt;span id="line-2"&gt;320306d26b2efbd2b3e326890f4c477b5a62fa1ca0e95b21912f8557c9f49df0
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 실행되었는 지 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -l
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                  COMMAND                CREATED             STATUS              PORTS                      NAMES
&lt;/span&gt;&lt;span id="line-3"&gt;320306d26b2e        nacyot/rails-new:0.1   /bin/sh -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;foreman    12 minutes ago      Up 12 minutes       0.0.0.0:60005-&amp;gt;60005/tcp   v0.1
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 실행되고 있음을 알 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;logs&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;WEBrick&lt;/span&gt; &lt;span class="mf"&gt;1.3.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="mf"&gt;2.1.1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;WEBrick&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60005&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 사이트에 접속 가능하다. &lt;code&gt;http://localhost:60005&lt;/code&gt;로 사이트에 접속해보면 아래와 같은 결과를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.1.png" alt="v0.1 사이트 접속"&gt;&lt;/p&gt;

&lt;p&gt;접속은 정상적으로 이루어지지만 에러가 난다. 이 에러는 내부 에러라기보다는 아직 레일스 어플리케이션을 전혀 작성하지 않았기 때문에 발생하는 에러이다. 즉, 메인 라우트가 없기 때문에 발생한다. 이전에 Rails3까지는 Public 폴더에 레일스 기본 페이지가 있었으나, Rails4 부터는 이러한 기본 페이지가 동적으로 생성되며 프로덕션 모두에서는 작동하지 않는다. 따라서 에러가 발생하는 것이다. 일단 어플리케이션 작성이 목적은 아니라 &lt;strong&gt;정상적으로&lt;/strong&gt; 에러가 나는 것을 축하하며 다음으로 넘어가자.&lt;/p&gt;

&lt;p&gt;다시 로그를 출력해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker logs v0.1
&lt;/span&gt;&lt;span id="line-2"&gt;15:54:16 web.1  &lt;span class="p"&gt;|&lt;/span&gt; started with pid 10
&lt;/span&gt;&lt;span id="line-3"&gt;15:54:18 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-11 15:54:18&lt;span class="o"&gt;]&lt;/span&gt; INFO  WEBrick 1.3.1
&lt;/span&gt;&lt;span id="line-4"&gt;15:54:18 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-11 15:54:18&lt;span class="o"&gt;]&lt;/span&gt; INFO  ruby 2.1.1 &lt;span class="o"&gt;(&lt;/span&gt;2014-02-24&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x86_64-linux-gnu&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;15:54:18 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-11 15:54:18&lt;span class="o"&gt;]&lt;/span&gt; INFO  WEBrick::HTTPServer#start: &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10 &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60005
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로덕션 모드에서는 기본적으로 로그가 전부 파일에서 출력되기 때문에 아무것도 출력되지 않는다.&lt;/p&gt;

&lt;p&gt;여기까지 해서 훌륭히 첫번째 레일스 어플리케이션을 도커로 빌드하고 실행해봤다. 이제 컨테이너를 종료하고 v0.2로 넘어간다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker stop v0.1
&lt;/span&gt;&lt;span id="line-2"&gt;v0.1
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker rm v0.1
&lt;/span&gt;&lt;span id="line-4"&gt;v0.1
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='v0.2-rails_12factor'&gt;v0.2 rails_12factor&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;[[히로쿠(heroku)|heroku]]를 사용해본 적이 있다면 히로쿠의 배포 방식이 기존의 배포 방식과는 상당히 다르다는 것을 알 수 있다. 클라우드로 따지자면 Infrastructure as a Service와 Platform as a Service의 차이라고 단순히 말할 수도 있겠지만, 그러한 환경을 구현하기 위해서 많은 것이 달라진다. 그리고 그러한 변화에 대응하기 위해 적용되는 라이브러리가 &lt;code&gt;rails_12factor&lt;/code&gt;라는 gem이다.&lt;/p&gt;

&lt;p&gt;분명 잘은 모르겠지만,&lt;/p&gt;

&lt;p&gt;Heroku에서는 이 gem을 설치하라고 하고, 이 gem을 설치하면 뭔가 문제가 생기던 게 해결된다. 하지만 마법과 같은 이 Gem이 무엇을 하는 지까지 관심을 가지는 경우는 드물다. 이번에는 이 gem 을 설치하고 그 궁금증을 해소해본다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='프로젝트-변경사항'&gt;프로젝트 변경사항&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../docker-sample-project
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout v0.2
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat Gemfile &lt;span class="p"&gt;|&lt;/span&gt; grep 12
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;(&lt;/span&gt;standard input&lt;span class="o"&gt;)&lt;/span&gt;:13:gem &lt;span class="s1"&gt;&amp;#39;rails_12factor&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로젝트에 변경되는 부분은 거의 없다. 단지 gem에 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/rails_12factor' rel='noindex,nofollow'&gt;rails_12factor&lt;/a&gt;&lt;/span&gt;를 추가했을 뿐이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='dockerfile'&gt;Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dockerfile에 대해서도 위에서 자세히 설명했다. 여기서 달라지는 부분은 실질적으로 &lt;code&gt;v0.2&lt;/code&gt;로 체크아웃하는 거 이외에는 없다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;# Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="n"&gt;Dockerfile&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="n"&gt;c22&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="n"&gt;c25&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='이미지-빌드하기'&gt;이미지 빌드하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;빌드도 똑같다. 단지 이번에는 태그에 &lt;code&gt;0.2&lt;/code&gt;를 주고 빌드한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t nacyot/rails-new:0.2 .
&lt;/span&gt;&lt;span id="line-2"&gt;Sending build context to Docker daemon 3.072 kB
&lt;/span&gt;&lt;span id="line-3"&gt;Sending build context to Docker daemon 
&lt;/span&gt;&lt;span id="line-4"&gt;Step 0 : FROM dockerfile/ubuntu
&lt;/span&gt;&lt;span id="line-5"&gt; ---&amp;gt; 96af2d36fb39
&lt;/span&gt;&lt;span id="line-6"&gt;Step 1 : MAINTAINER nacyot&lt;span class="o"&gt;(&lt;/span&gt;propellerheaven@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-8"&gt; ---&amp;gt; 63b3eaf59343
&lt;/span&gt;&lt;span id="line-9"&gt;Step 2 : RUN apt-get update
&lt;/span&gt;&lt;span id="line-10"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-11"&gt; ---&amp;gt; c20d985f7209
&lt;/span&gt;&lt;span id="line-12"&gt;...
&lt;/span&gt;&lt;span id="line-13"&gt;Step 18 : EXPOSE 60005
&lt;/span&gt;&lt;span id="line-14"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-15"&gt; ---&amp;gt; 2804c093d552
&lt;/span&gt;&lt;span id="line-16"&gt;Step 19 : CMD foreman start -f Procfile
&lt;/span&gt;&lt;span id="line-17"&gt; ---&amp;gt; Using cache
&lt;/span&gt;&lt;span id="line-18"&gt; ---&amp;gt; a8263aeb3676
&lt;/span&gt;&lt;span id="line-19"&gt;Successfully built a8263aeb3676
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='이미지-실행하기'&gt;이미지 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;실행하고 정상적으로 실행되었는 지 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name v0.2 -d -p 60005:60005 nacyot/rails-new:0.2
&lt;/span&gt;&lt;span id="line-2"&gt;019e38fb70382fd1e49c3be7b011b7ea715644e6bb6b99f199506d8e8708fadb
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -l
&lt;/span&gt;&lt;span id="line-4"&gt;CONTAINER ID        IMAGE                  COMMAND                CREATED             STATUS              PORTS               NAMES
&lt;/span&gt;&lt;span id="line-5"&gt;019e38fb7038        nacyot/rails-new:0.2   /bin/sh -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;foreman    16 minutes ago                                              v0.2
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;http://localhost:6005&lt;/code&gt;로 접속해본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.2.png" alt="v0.2 사이트 접속"&gt;&lt;/p&gt;

&lt;p&gt;v0.1 때와 같은 에러가 출력된다. 다시 로그를 출력해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker logs v0.2
&lt;/span&gt;&lt;span id="line-2"&gt;16:00:27 web.1  &lt;span class="p"&gt;|&lt;/span&gt; started with pid 10
&lt;/span&gt;&lt;span id="line-3"&gt;16:00:29 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-14 16:00:29&lt;span class="o"&gt;]&lt;/span&gt; INFO  WEBrick 1.3.1
&lt;/span&gt;&lt;span id="line-4"&gt;16:00:29 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-14 16:00:29&lt;span class="o"&gt;]&lt;/span&gt; INFO  ruby 2.1.1 &lt;span class="o"&gt;(&lt;/span&gt;2014-02-24&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x86_64-linux-gnu&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;16:00:29 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2014-06-14 16:00:29&lt;span class="o"&gt;]&lt;/span&gt; INFO  WEBrick::HTTPServer#start: &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10 &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60005
&lt;/span&gt;&lt;span id="line-6"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Booting WEBrick
&lt;/span&gt;&lt;span id="line-7"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Rails 4.1.1 application starting in production on http://0.0.0.0:60005
&lt;/span&gt;&lt;span id="line-8"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Run &lt;span class="sb"&gt;`&lt;/span&gt;rails server -h&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;more startup options
&lt;/span&gt;&lt;span id="line-9"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Notice: server is listening on all interfaces &lt;span class="o"&gt;(&lt;/span&gt;0.0.0.0&lt;span class="o"&gt;)&lt;/span&gt;. Consider using 127.0.0.1 &lt;span class="o"&gt;(&lt;/span&gt;--binding option&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Ctrl-C to shutdown server
&lt;/span&gt;&lt;span id="line-11"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; Started GET &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;172.17.42.1 at 2014-06-14 16:00:33 +0000
&lt;/span&gt;&lt;span id="line-12"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; 
&lt;/span&gt;&lt;span id="line-13"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt; ActionController::RoutingError &lt;span class="o"&gt;(&lt;/span&gt;No route matches &lt;span class="o"&gt;[&lt;/span&gt;GET&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;span id="line-14"&gt;16:00:33 web.1  &lt;span class="p"&gt;|&lt;/span&gt;   actionpack &lt;span class="o"&gt;(&lt;/span&gt;4.1.1&lt;span class="o"&gt;)&lt;/span&gt; lib/action_dispatch/middleware/debug_exceptions.rb:21:in &lt;span class="sb"&gt;`&lt;/span&gt;call&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="s1"&gt;16:00:33 web.1  |   actionpack (4.1.1) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;...
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;뭔가 달라졌다. 분명 &lt;code&gt;v0.1&lt;/code&gt; 때는 로그에 아무것도 출력되지 않았으나, &lt;code&gt;v0.2&lt;/code&gt;에서는 에러에 대한 로그가 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v0.2&lt;/code&gt;에서 코드가 달라진 부분은 &lt;code&gt;rails_12factor&lt;/code&gt;를 추가한 부분뿐이다. 그렇다면 자연스럽게 결론을 내릴 수 있다. &lt;code&gt;rails_12factor&lt;/code&gt;는 로그를 Process의 stdout으로 출력해준다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='the-twelve-factor-app'&gt;The Twelve-Factor App&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서 두 가지 정도 의문이 들 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails_12factor&lt;/code&gt;는 왜 로그를 굳이 파일이 아니라 stdout로 출력해주는 걸까?&lt;/p&gt;

&lt;p&gt;그리고 이 gem을 여기서 왜 설치했을까?&lt;/p&gt;

&lt;p&gt;이는 도커의 컨테이너 환경을 이해하는데 핵심적인 역할을 하는 문제이다. 잠깐 히로쿠 이야기로 돌아가보자. 일반적으로 운영체제에서 할 수 있는 모든 것을 할 수 있는 가상머신인 IaaS와 어플리케이션 코드만으로 실행 가능한 PaaS는 근본적으로 많은 부분에서 다르다. 예를 들어 히로쿠에는 서버 관리라는 개념이 없다. 히로쿠를 써봤다면 알겠지만, 히로쿠에 git 저장소를 만들어놓고 이 저장소에 어플리케이션을 push하면 어플리케이션이 빌드되고 자동으로 실행된다. 여기서 중요한 점은 heroku에서 실행되고 있는 서버에 접근해서 어떠한 명령어를 실행시키는 게 거의 불가능하다는 점이다(혹은 매우 제한적이다). 사용자는 히로쿠의 서버를 운영하지 않는다. 그런 면에서 볼 때 PaaS란 단순히 IaaS의 일부 역할을 대체한다고 말할 수가 없어진다. 어플리케이션을 운영해본 사람이라면 알겠지만 어플리케이션과 직접 관련이 없더라도 어플리케이션 운영중에 서버 상에서 여러가지 작업을 필요로 하는 경우는 흔한 일이다. 히로쿠에서는 그런 종류의 작업이 거의 불가능하다.&lt;/p&gt;

&lt;p&gt;단지 어플리케이션이 실행되고 있을 뿐이고, 히로쿠가 하는 일은 어플리케이션이 실행되어있다는 것을 보장해주는 것 뿐이다.&lt;/p&gt;

&lt;p&gt;따라서 PaaS에서 어플리케이션을 운영하는 모델은 IaaS에서 해오던 것과는 전혀 다르다. 바로 이 지점에서 단순한 범위 차이 이상의 차이가 발생한다. 이러한 차이는 최적화의 문제이기도 하고, 패러다임의 문제이기도 하다. 예를 들어 TDD를 적용해 프로그래밍을 하면 단순히 테스트를 습관화들이는 것뿐만 아니라, 어플리케이션을 설계하는 데 있어서도 테스트가 더 편하게 가능한 설계를 고민하게 된다는 이야기와 비슷하다. PaaS는 기존의 어플리케이션을 그대로 옮겨둘 수도 있겠지만, PaaS 방식에 맞는 어플리케이션을 요구한다. 여기서 어플리케이션이란 단순히 실제 어플리케이션 코드만을 이야기하는 것은 아니다. 어플리케이션과 그것을 운영하고 관리하는 방식 전체를 통틀어서의 이야기이다.&lt;/p&gt;

&lt;p&gt;추상적인 얘기는 집어치우고, 그래서 왜 히로쿠에서는 &lt;code&gt;rails_12factor&lt;/code&gt;가 필요할까? 정답은 간단하다. 사용자는 히로쿠 서버의 파일 시스템에 직접적으로 접근할 수 없고, 따라서 log파일을 직접 가져오는 게 불가능하다. 바로 이런 지점이 IaaS와 PaaS가 극적으로 달라지는 부분이자, 패러다임 시프트를 요구하는 부분이다. 어쨌거나 로그는 필요하다. 그래서 히로쿠는 CLI 클라이언트를 통해서 마지막 (최대) &lt;a href="https://devcenter.heroku.com/articles/limits#logs"&gt;1500줄 분량의 로그를 제공해준다&lt;/a&gt;. 이를 위해서 rails_12factor를 통해 파일로 보내질 로그를 stdout으로 출력할 필요가 있었던 것이다. 즉 히로쿠에서는 전체 어플리케이션 로그를 가져올 방법이 없고, 히로쿠에서는 이러한 문제를 해결할 수 있는 방안으로 다른 로깅 서비스를 연동해서 사용할 것을 이야기하고 있다.&lt;/p&gt;

&lt;p&gt;이 정도면 조금 감이 올 지 모르겠다. 도커, 좀 더 정확히는 컨테이너는 기본적으로 PaaS에 가깝다. 도커에서도 히로쿠와 마찬가지로 실행중인 어플리케이션의 서버를 운용하는 방식으로 관리하는 것은 매우 번거롭고 제한적이다. 더욱이 Adam Wiggins은 The Twelve-Factor App에서 히로쿠의 로그 방식이 단순히 파일을 다룰 수 없는 제약 때문은 아니었다는 것을 분명히 이야기하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;로그는 모든 실행중인 프로세스와 백엔드 서비스의 누적되며 시간순으로 수집되고 정렬되는 이벤트 스트림이다. 일반적으로 어플리케이션이 직접 생성하는 로그는 한 줄에 하나의 이벤트를 텍스트 포맷으로 기록한다(예외를 추적하는 로그는 여러줄로 쓰여지기도 한다). 로그는 고정된 시작과 끝이 없으면 어플리케이션이 실행되는 한 계속된다.&lt;/p&gt;

&lt;p&gt;Twelve Factor App은 어플리케이션의 출력 스트림의 목적지나 어디에 저장되는 지 일체 간섭하지 않는다. 어플리케이션은 로그를 작성하거나 로그 파일을 관리하려고 해서는 안된다. 로그 파일을 관리하는 대신 각각의 실행중인 프로세스는 자신의 이벤트 스트림을 버퍼없이 stdout에 출력한다. 로컬에서 개발중인 프로그래머는 이러한 스트림을 터미널의 포그라운드에서 확인할 수 있으며, 이를 통해 어플리케이션이 어떻게 동작하는 지 확인할 수 있다. (&lt;a href="http://the-twelve-factor-app.herokuapp.com/logs"&gt;The Twelve-Factor App 11장 로그&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아, 여기서 &lt;code&gt;rails_12factor&lt;/code&gt;의 정체가 명확해진다. &lt;code&gt;rails_12factor&lt;/code&gt;은 다름 아닌 The Twelve-Factor App의 실천사항의 일부를 실제로 구현해주는 gem이다. 소개가 늦었다. The Twelve-Factor App은 위에서 이야기한 PaaS의 패러다임에 해당하는 이야기를 히로쿠의 프로그래머가 정리한 문서이다.&lt;/p&gt;

&lt;p&gt;도커는 어렵다. 도커를 가상화 기술이라고 소개할 때 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/vmware' rel='noindex,nofollow'&gt;VMWare&lt;/a&gt;&lt;/span&gt;나 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/virtualbox' rel='noindex,nofollow'&gt;VirtualBox&lt;/a&gt;&lt;/span&gt;와 같은 툴들과 상당한 차이를 지니고 있다. 이는 단순히 하드웨어 에뮬레이션 정도의 차이가 아니라, 어플리케이션을 다루는 방식 전반에 걸친 차이가 존재하기 때문이다. 그리고 컨테이너라는 개념과 이러한 차이를 이해하는 게 도커를 활용하는 지름길이라고 할 수 있다. 컨테이너는 단지 하나의 프로세스이고, 이 하나의 프로세스로 어플리케이션을 운영해야한다는 점에서는 VMWare의 가상머신보다는 히로쿠의 어플리케이션에 한없이 가깝다. 따라서 The twelve-Factor App의 원칙들은 컨테이너를 유연하게 사용하는데 좋은 지침이 된다. 이는 2가지 면에서 좋은 지침이 되어주는데, 도커에서 어플리케이션을 어떻게 실행 관리되는 지를 알려주고, 두번째로 &lt;code&gt;Build once, Run anywhere&lt;/code&gt;를 실현할 수 있는 전략들을 알려준다.&lt;/p&gt;

&lt;p&gt;물론 도커의 컨테이너를 가상머신처럼 다루는 게 불가능하지는 않다. 컨테이너를 실행할 때 sshd 데몬을 같이 띄운다거나 log가 저장되는 디렉토리 자체를 어플리케이션에 이미지와 별개로 마운트시키는 방식으로 log 파일을 관리하는 게 가능하기는 하다. 하지만 그런 방식이 도커에서 딱히 권장되지는 않는다.&lt;/p&gt;

&lt;p&gt;이 정도면 처음에 품었던 두 가지 질문에 대한 설명은 충분히되었다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='rails_12factor'&gt;rails_12factor&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;그렇다면 실제로 &lt;code&gt;rails_12factor&lt;/code&gt;가 해주는 일은 어떤 것들이 있을까?&lt;/p&gt;

&lt;p&gt;먼저 로그를 stdout으로 출력해주는 것은 이미 살펴보았다. 또 하나는 앞서 다룬 &lt;code&gt;serve_static_assets&lt;/code&gt;를 활성화시켜는 일이다. rails_12factor가 하는 일은 정말 딱 이렇게 두가지다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='v0.2-정리'&gt;v0.2 정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이걸로 v0.2에 대한 설명도 마무리 되었다. 이제 컨테이너를 멈추고 삭제한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='v0.3-데이터베이스-연동하기'&gt;v0.3 데이터베이스 연동하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;웹 어플리케이션의 꽃은 이러쿵저러쿵 해도 데이터베이스다. &lt;code&gt;v0.3&lt;/code&gt;에서는 데이터베이스를 연동하고 간단한 scaffolding을 통해 에러없이 어플리케이션이 작동하도록 만든다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='프로젝트-변경사항'&gt;프로젝트 변경사항&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 v0.3에서는 scaffold 명령어로 Post 모델을 생성했다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails g scaffold post title body:text published:boolean
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;config/routes.rb&lt;/code&gt; 파일을 아래와 같이 변경한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;posts#index&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 외에 변경한 사항은 mysql2 gem을 추가한 정도이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout v0.3
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat Gemfile &lt;span class="p"&gt;|&lt;/span&gt; grep mysql2
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;(&lt;/span&gt;standard input&lt;span class="o"&gt;)&lt;/span&gt;:14:gem &lt;span class="s1"&gt;&amp;#39;mysql2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='dockerfile'&gt;Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;rails-new-docker/v0.3의 Dockerfile에서 달라진 부분은 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;diff Dockerfile ../v0.2/Dockerfile
&lt;/span&gt;&lt;span id="line-2"&gt;19d18
&lt;/span&gt;&lt;span id="line-3"&gt;&amp;lt; RUN apt-get install -qq -y mysql-server mysql-client libmysqlclient-dev
&lt;/span&gt;&lt;span id="line-4"&gt;23c22
&lt;/span&gt;&lt;span id="line-5"&gt;&amp;lt; &lt;span class="c"&gt;# Install docker-sample-project v0.3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;---
&lt;/span&gt;&lt;span id="line-7"&gt;&amp;gt; &lt;span class="c"&gt;# Install docker-sample-project v0.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;26c25
&lt;/span&gt;&lt;span id="line-9"&gt;&amp;lt; RUN git checkout v0.3
&lt;/span&gt;&lt;span id="line-10"&gt;---
&lt;/span&gt;&lt;span id="line-11"&gt;&amp;gt; RUN git checkout v0.2
&lt;/span&gt;&lt;span id="line-12"&gt;34d32
&lt;/span&gt;&lt;span id="line-13"&gt;&amp;lt; 
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/mysql'&gt;mysql&lt;/a&gt;&lt;/span&gt;에 필요한 시스템 패키지를 설치하고 v0.3으로 체크아웃 하는 정도이다.. 시스템 라이브러리를 설치하는 부분은 레일스를 처음 사용할 때 겪는 함정으로 해당하는 패키지가 없으면 &lt;code&gt;bundle install&lt;/code&gt;에 실패한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='이미지-빌드하기'&gt;이미지 빌드하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이미지를 빌드한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='이미지-실행하기'&gt;이미지 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이미지를 실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;60005&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60005&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;http://localhost:60005&lt;/code&gt; 페이지에 접속해본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.3.png" alt="v0.3 사이트 접속 - We`re sorry, but something went wrong"&gt;&lt;/p&gt;

&lt;p&gt;이번에는 에러메시지가 달라졌다. 이전 에러메시지는 페이지가 없다는 내용(즉 라우트가 없음)이었는데 이번에는 &amp;#39;We&amp;#39;re sorry, but something went wrong.&amp;#39;라고 내부적으로 문제가 있다는 걸 볼 수 있다. &lt;/p&gt;

&lt;p&gt;구체적인 내요은 로그를 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="x"&gt;$ docker logs v0.3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="x"&gt;02:50:21 web.1  | started with pid 9&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="x"&gt;02:50:23 web.1  | [2014-06-15 02:50:23] INFO  WEBrick 1.3.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="x"&gt;02:50:23 web.1  | [2014-06-15 02:50:23] INFO  ruby 2.1.1 (2014-02-24) [x86_64-linux-gnu]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="x"&gt;02:50:23 web.1  | [2014-06-15 02:50:23] INFO  WEBrick::HTTPServer#start: pid=9 port=60005&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Booting WEBrick&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Rails 4.1.1 application starting in production on http://0.0.0.0:60005&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Run `rails server -h` for more startup options&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Notice: server is listening on all interfaces (0.0.0.0). Consider using 127.0.0.1 (--binding option)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="x"&gt;02:50:34 web.1  | =&amp;gt; Ctrl-C to shutdown server&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="x"&gt;02:50:34 web.1  | Started GET &amp;quot;/&amp;quot; for 172.17.42.1 at 2014-06-15 02:50:34 +0000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="x"&gt;02:50:34 web.1  | Processing by PostsController#index as HTML&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="x"&gt;02:50:34 web.1  | SQLite3::SQLException: no such table: posts: SELECT &amp;quot;posts&amp;quot;.* FROM &amp;quot;posts&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="x"&gt;02:50:34 web.1  |   Rendered posts/index.html.erb within layouts/application (6.3ms)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="x"&gt;02:50:34 web.1  | Completed 500 Internal Server Error in 16ms&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="x"&gt;02:50:34 web.1  | &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="x"&gt;02:50:34 web.1  | ActionView::Template::Error (SQLite3::SQLException: no such table: posts: SELECT &amp;quot;posts&amp;quot;.* FROM &amp;quot;posts&amp;quot;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     11:   &amp;lt;/thead&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     12: &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     13:   &amp;lt;tbody&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     14:     &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     15:       &amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     16:         &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="x"&gt;02:50:34 web.1  |     17:         &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="x"&gt;02:50:34 web.1  |   app/views/posts/index.html.erb:14:in `_app_views_posts_index_html_erb___1118890408216197302_48728380&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="x"&gt;02:50:34 web.1  | &lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="x"&gt;02:50:34 web.1  | &lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;에러 메시지를 자세히 살펴보면, 중간에 &lt;code&gt;SQLite3::SQLException&lt;/code&gt; 에러가 발생한 것을 알 수 있다. 이 이유가 발생한 이유는 간단하다. &lt;code&gt;db:migrate&lt;/code&gt;(혹은 &lt;code&gt;db:create&lt;/code&gt;)를 하지 않았기 때문이다. 앞서 scaffold로 만든 post 모델은 데이터베이스를 필요로 한다. 레일스에서는 데이터베이스 접속을 &lt;code&gt;config/database.yml&lt;/code&gt;에서 관리하는데 아무것도 설정하지 않으면 sqlite를 로컬에서 사용한다. 하지만 지금은 데이터베이스가 제대로 초기화되어있지 않기 때문에 문제가 발생하는 것이다.&lt;/p&gt;

&lt;p&gt;이번에는 실제 데이터베이스에 연결하고 초기화하는 방법을 알아보자. 먼저 지금 실행중인 컨테이너를 삭제한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker stop v0.3
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker rm v0.3
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='데이터베이스-준비'&gt;데이터베이스 준비&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서는 데이터베이스로 mysql을 사용한다. 이를 통해서 도커에서 웹어플리케이션을 실행시킬 때 어떻게 외부 서비스를 연결하는지 알 수 있다. 먼저 mysql을 준비한다. 여기서는 편의상 호스트에 mysql을 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install mysql-server
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;데이터베이스에 접속해서 데이터베이스 및 계정을 추가하고 권한을 부여해준다. 데이터베이스 접속시 사용하는 root 계정의 암호는 위에서 mysql 설치 과정에서 입력하는 암호이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mysql -h localhost -u root -p
&lt;/span&gt;&lt;span id="line-2"&gt;Enter password:
&lt;/span&gt;&lt;span id="line-3"&gt;mysql&amp;gt; CREATE DATABASE rails_new
&lt;/span&gt;&lt;span id="line-4"&gt;mysql&amp;gt; GRANT ALL PRIVILEGES ON rails_new.* TO &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; IDENTIFIED BY &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;mysql&amp;gt; GRANT ALL PRIVILEGES ON rails_new.* TO &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt; IDENTIFIED BY &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;권한 설정이 끝났으면 데이터베이스 접속을 종료하고 docker 계정으로 다시 접속한다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mysql -h localhost -u docker -p
&lt;/span&gt;&lt;span id="line-2"&gt;Enter password:
&lt;/span&gt;&lt;span id="line-3"&gt;mysql&amp;gt; use rails_new
&lt;/span&gt;&lt;span id="line-4"&gt;Database changed
&lt;/span&gt;&lt;span id="line-5"&gt;mysql &amp;gt; show databases&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;+--------------------+
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="p"&gt;|&lt;/span&gt; Database           &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;+--------------------+
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="p"&gt;|&lt;/span&gt; information_schema &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="p"&gt;|&lt;/span&gt; rails_new          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;+--------------------+
&lt;/span&gt;&lt;span id="line-12"&gt;2 rows in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;mysql&amp;gt; show tables&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;Empty &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 도커 컨테이너의 mysql 서버로 접속이 가능하도록 &lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt; 파일을 편집해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;데이터베이스를 재실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service mysql restart
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것으로 데이터베이스가 준비되었다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='컨테이너로-rake-명령어-사용하기---db:migrate'&gt;컨테이너로 rake 명령어 사용하기 - db:migrate&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이번에는 도커 컨테이너를 통해서 rake를 실행해 데이터베이스 테이블을 초기화한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -i -t -e &lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mysql2://docker:docker@172.17.42.1/rails_new&amp;quot;&lt;/span&gt; nacyot/rails-new:0.3 bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake db:migrate
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;Migrating to CreatePosts &lt;span class="o"&gt;(&lt;/span&gt;20140608141640&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;==&lt;/span&gt; 20140608141640 CreatePosts: &lt;span class="nv"&gt;migrating&lt;/span&gt; &lt;span class="o"&gt;======================================&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;-- create_table&lt;span class="o"&gt;(&lt;/span&gt;:posts&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;   -&amp;gt; 0.0035s
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;==&lt;/span&gt; 20140608141640 CreatePosts: migrated &lt;span class="o"&gt;(&lt;/span&gt;0.0036s&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=============================&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본적으로 루비 온 레일스에서는 데이터베이스 연결을 &lt;code&gt;database.yml&lt;/code&gt; 파일에서 관리한다. 하지만 &lt;code&gt;DATABASE_URL&lt;/code&gt; 환경 변수가 설정되어있다면 이 설정을 우선적으로 사용한다. 여기서는 컨테이너를 실행하는 호스트에 있는 mysql을 사용하니 &lt;code&gt;mysql2://docker:docker@localhost/rails_new&lt;/code&gt;처럼 지정해준다. 여기에는 프로토콜, Id, Password, Host, Database 정보를 담고있다. 이제 레일스 어플리케이션은 이 데이터베이스를 사용한다. 여기서 &lt;code&gt;172.17.42.1&lt;/code&gt;은 도커 내부에서 바라보는 호스트 PC의 IP이다. 컨테이너 안에서 localhost나 127.0.0.1이 도커 컨테이너 자체를 가리킨다고 생각하면 이해하기 쉬울 것이다.&lt;/p&gt;

&lt;p&gt;그 다음에는 실행하고자 하는 이미지를 지정한다.&lt;/p&gt;

&lt;p&gt;마지막 부분이 중요하다. 앞서서도 이야기했지만 컨테이너는 하나의 프로세스이다. 즉 이미지로부터 컨테이너를 실행할 때 실행하고자 하는 명령어를 지정할 수 있다. 일반적으로 이미지를 사용하면 &lt;code&gt;CMD&lt;/code&gt; 지시자를 통해 지정된 기본 명령어를 사용하지만, 직접 명령어를 입력하면 해당하는 명령어가 실행된다.&lt;/p&gt;

&lt;p&gt;따라서 위에서 실행한 &lt;code&gt;docker run&lt;/code&gt; 명령어는 &amp;#39;nacyot/rails-new:0.3&amp;#39; 이미지를 통해서 &lt;code&gt;bundle exec rake db:migrate&lt;/code&gt;를 실행한다. 이 때 외부 데이터베이스 서비스를 사용하도록 외부 mysql을 지정했으므로 해당하는 데이터베이스에 대해 &lt;code&gt;db:migrate&lt;/code&gt;가 이루어진다. 여기서는 CreatePosts가 생성된다.&lt;/p&gt;

&lt;p&gt;위에서 실행한 컨테이너는 단지 이 역할만 하고 종료된다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='데이터베이스가-연결된-어플리케이션-실행하기'&gt;데이터베이스가 연결된 어플리케이션 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이제 어플리케이션을 실행하고 어플리케이션에 접속한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;60005&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60005&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mysql2://docker:docker@172.17.42.1/rails_new&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.3db.png" alt="v0.3 사이트 접속"&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 실행된다! posts를 하나 만들어본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2014-06-16-rails-on-docker/v0.3db2.png" alt="v0.3 사이트 접속 - We`re sorry, but something went wrong"&gt;&lt;/p&gt;

&lt;p&gt;포스트도 정상적으로 만들어졌다. 이제 mysql에 접속해 지정한 데이터베이스에 정상적으로 기록이 되고있는지 확인한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mysql -h localhost -u docker -p
&lt;/span&gt;&lt;span id="line-2"&gt;mysql&amp;gt; USE rails_new
&lt;/span&gt;&lt;span id="line-3"&gt;mysql&amp;gt; SELECT * FROM posts&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;+----+---------------+--------+-----------+---------------------+---------------------+
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="p"&gt;|&lt;/span&gt; id &lt;span class="p"&gt;|&lt;/span&gt; title         &lt;span class="p"&gt;|&lt;/span&gt; body   &lt;span class="p"&gt;|&lt;/span&gt; published &lt;span class="p"&gt;|&lt;/span&gt; created_at          &lt;span class="p"&gt;|&lt;/span&gt; updated_at          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;+----+---------------+--------+-----------+---------------------+---------------------+
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="p"&gt;|&lt;/span&gt;  1 &lt;span class="p"&gt;|&lt;/span&gt; Hello, Docker &lt;span class="p"&gt;|&lt;/span&gt; Docker &lt;span class="p"&gt;|&lt;/span&gt;         1 &lt;span class="p"&gt;|&lt;/span&gt; 2014-06-15 04:49:20 &lt;span class="p"&gt;|&lt;/span&gt; 2014-06-15 04:49:20 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;+----+---------------+--------+-----------+---------------------+---------------------+
&lt;/span&gt;&lt;span id="line-9"&gt;1 row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 기록된다. 이제 도커를 통해 레일스 어플리케이션을 배포할 때 데이터베이스를 연결하는 것까지 성공했다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='sqlite3-vs-mysql,-database.yml-vs-환경변수'&gt;sqlite3 vs mysql, database.yml vs 환경변수&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서 잠깐 왜 mysql과 환경변수를 사용했는지 살펴볼 필요가 있다.&lt;/p&gt;

&lt;p&gt;먼저 sqlite3는 파일 하나로 구성되는 데이터베이스이다. 이는 임시로 사용하기에는 편리하지만 실제 어플리케이션에서 사용하기는 여러가지 제약이 따른다. 또한 도커 이미지를 통해서 어플리케이션을 배포할 때 sqlite를 사용하게 되면 어플리케이션과 데이터가 강하게 결합되게 된다. 이는 어플리케이션이 컨테이너의 상태에 강하게 의존되어 실행된다는 의미를 가진다. 이러한 로컬 파일 시스템에 의존해야할 때는 &lt;code&gt;docker run&lt;/code&gt;의 &lt;code&gt;-v&lt;/code&gt;와 같은 옵션을 사용해 이미지에 별개의 볼륨을 마운트 시켜 사용하는 방법이 있기는 하지만, 어플리케이션과 데이터는 가능한한 분리하는 것이 좋다. 이러한 분리가 이루어져야만 관리가 용이할 뿐 아니라 나중에 컨테이너 실행만으로도 스케일 아웃이 가능해진다. (물론 여기에는 좀 더 여러가지 궁리가 필요하지만...)&lt;/p&gt;

&lt;p&gt;레일스에서는 개발용을 sqlite3를 많이 사용하는데, 재미있는 건 Heroku에서는 sqlite3를 아예 지원하지 않는다는 점이다. 이 때문에 개발 과정에서 Heroku를 사용해본 사람들은 시작부터 데이터베이스를 제대로 셋업하고 시작하는 게 번거롭게 느껴졌을 지도 모르지만, 그럼에도 불구하고 왜 히로쿠에서 sqlite3를 지원하지 않는 지를 이해하는 것은 중요하다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;database.yml&lt;/code&gt; 역시 비슷한 이유에서 권장되지 않는다. 데이터베이스 커넥션 정보를 파일 형태로 가지고 있을 시에는 어플리케이션이 이 파일에 의존해서 작동한다. 여기에는 몇 가지 문제가 있는데 어플리케이션 저장소에 이러한 파일을 포함시키는 것은 매우 좋지 않다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;어플리케이션에서 설정이 분리되어있는 지 여부를 확인할 수 있는 간단한 방법은, 어플리케이션 내부에 어떠한 인증 정보도 포함시키지 않고 지금 당장 오픈소스로 공개할 수 있는 지 검토해보는 것이다. &lt;a href="http://the-twelve-factor-app.herokuapp.com/config"&gt;The Twelve-Factor App - 설정&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 저장소에 저장시키지 않고 이미지 빌드 시에 해당하는 파일을 전달해준다고 해도, 데이터베이스 설정이 바뀔 때마다 이미지를 새로 만들어야하는 불편함이 수반된다. 데이터베이스 접속을 &lt;code&gt;database.yml&lt;/code&gt;에 의존하지 않고 데이터베이스 핸들러를 환경변수로 관리하면 이러한 불편함이 해소된다. 즉 외부 서비스가 어디에 있는지와는 상관없이 어플리케이션을 이미지로 보관할 수 있고, 실행시에 동적으로 외부 서비스들을 연결해줄 수 있다는 의미이다. 외부 서비스에 대해서 파일 설정보다 환경변수를 적극 활용하는 것은 &lt;code&gt;Build once, Run anywhere&lt;/code&gt;를 구현하기 위해 The Twelve Factor App에서 제시하는 하나의 전략이라고 할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Twelve-Factor App에서는 설정을 환경 변수(environment variables)에 저장한다. 환경변수를 사용하면 코드 수정 없이 설정을 쉽게 변경할 수 있다. 설정 파일과는 달리 실수로 저장소에 설정을 포함시킬 가능성도 낮다. 나아가 독자적인 형식의 설정 파일이나 자바 시스템 프로퍼티와 같은 설정 형식과 달리 환경변수는 언어나 OS에 의존하지 않는 표준이다. &lt;a href="http://the-twelve-factor-app.herokuapp.com/config"&gt;The Twelve-Factor App - 설정&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;a name='정리'&gt;정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서는 루비 온 레일스 어플리케이션을 도커 이미지로 만드는 과정을 다루었다. 여기서 다룬 어플리케이션은 &lt;code&gt;rails new&lt;/code&gt;로 생성한 아무것도 없는 어플리케이션이긴 하지만 어플리케이션의 복잡도에 따라서 어플리케이션을 배포하는 방식 자체가 달라지지는 않는다. 이 글에서는 도커로 어떻게 하면 어플리케이션을 이미지로 만들어낼 수 있는지, 그리고 도커를 사용함으로써 (좋은 의미에서건 나쁜 의미에서건) 발생하는 새로운 제약에 대해 어떻게 이해하고 대처해야하는 지 The Twelve Factor App의 관점에서 설명했다.&lt;/p&gt;

&lt;p&gt;이를 통해 이미지는 만들었다. 다음 글에서는 이제 이미지가 준비됐으니 이 이미지를 어떻게 실 서버에 배포하고 스케일 아웃이 가능한 지에 대해서 다룬다.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Docker Korea 스터디 그룹 두번째 모임</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-08-04-docker-korea-secord/"/>
    <id>http://blog.nacyot.com/articles/2014-08-04-docker-korea-secord/</id>
    <published>2014-08-04T15:15:03+00:00</published>
    <updated>2014-12-16T16:45:04+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;얼마 전 &amp;#39;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker_korea' rel='noindex,nofollow'&gt;도커 코리아&lt;/a&gt;&lt;/span&gt;&amp;#39;라는 이름으로 &lt;a href="http://blog.nacyot.com/articles/2014-07-26-docker-korea/"&gt;스터디를 진행한다는 이야기&lt;/a&gt;를 전한 바 있습니다. 그 후로 시간이 흘러 지난 8월 2일에 &lt;a href="http://onoffmix.com/event/31354"&gt;도커 코리아 두번째 모임&lt;/a&gt;을 가졌습니다. 이번 스터디는 시범적인 차원에서 공개적으로 진행되었습니다. 단 아직 정기적인 스터디 지원이 확정되지 않아, 이번 모임은 소정의 참가비와 부족한 부분은 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/remotty'&gt;리모티&lt;/a&gt;&lt;/span&gt; 재정의 지원으로 이루어졌습니다. 리모티 팀원들을 비롯해 총 16분이 참석해 자리를 빛내주셨습니다 :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;이 글에서는 스터디 그룹에서 공유한 내용들을 간략히 정리합니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커를-이용한-파이썬-모듈-배포하기'&gt;도커를 이용한 파이썬 모듈 배포하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37580971" width="600" height="440" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/litiblue/ss-37580971" title="도커를 이용한 파이썬 모듈 배포하기" target="_blank"&gt;도커를 이용한 파이썬 모듈 배포하기&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/litiblue" target="_blank"&gt;JunSeok Seo&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/RRT58hbDXNs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;먼저 Litiblue 님이 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker'&gt;Docker&lt;/a&gt;&lt;/span&gt;를 이용해 파이썬 모듈을 배포한 경험에 대해서 발표해주셨습니다. 이 발표에서는 도커에 대한 전반적인 소개와 일반적인 서버에 직접 어플리케이션을 배포하는 것과 그로 인해 생기는 문제점을 도커를 통해서 어떻게 해결할 수 있는 지에 대해서 이야기해주셨습니다. 예를 들어 Litiblue 님이 배포하고자 했던 파이선 어플리케이션에는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/apscheduler' rel='noindex,nofollow'&gt;APScheduler&lt;/a&gt;&lt;/span&gt;와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/rpyc' rel='noindex,nofollow'&gt;RPyC&lt;/a&gt;&lt;/span&gt;라는 라이브러리에 의존성이 있는데, 이러한 라이브러리들이 파이썬의 버전에 따라서 사용법이나 실행경로가 바뀌면서 생길 수 있는 있다고 합니다. 이러한 문제들을 도커를 통해서 어떻게 해결할 수 있는지 보여주셨습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커로-고스트-블로그-플랫폼-5분만에-설치하기'&gt;도커로 고스트 블로그 플랫폼 5분만에 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//slides.com/meoooh/setup-ghost-via-docker/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="600" height="445" src="//www.youtube.com/embed/MGXMRJP4LhQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;다음으로 Han 님께서 &amp;#39;도커로 고스트 블로그 플랫폼 5분만에 설치하기&amp;#39;를 발표해주셨습니다. 최근에 유행하는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/ghost' rel='noindex,nofollow'&gt;Ghost&lt;/a&gt;&lt;/span&gt;라고 하는 유명한 블로그 플랫폼이 있습니다만, 이 블로그 플랫폼을 도커를 써서 어떻게 배포할 수 있는 지에 대해서 다루고있습니다. 5분만에 배포하기라고 쓰고, 고스프 플랫폼 도커로 배포하면서 겪은 삽질기로 내용이 변모한 감이 없지 않아있었습니다만 :) 도커 파일 최적화, 이미지간 연결, .dokcerignore 파일의 사용법 등 도커를 사용하면서 필연적으로 궁금하게 되고, 활용해야만한 하는 많은 이야기들을 담고 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='도커(docker)-메트릭스-&amp;amp;-로그-수집'&gt;도커(Docker) 메트릭스 &amp;amp; 로그 수집&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37592250" width="600" height="440" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/ext/docker-37592250" title="도커(Docker) 메트릭스 &amp;amp; 로그 수집" target="_blank"&gt;도커(Docker) 메트릭스 &amp;amp; 로그 수집&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/ext" target="_blank"&gt;Daekwon Kim&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/eFPsz0oCLSs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;마지막 발표는 제가 &amp;#39;Docker와 로그 &amp;amp; 메트릭스 수집&amp;#39;이라는 주제로 발표를 했습니다. 로그 &amp;amp; 메트릭스 수집은 사실 새삼스럽게 나온 문제는 아닙니다만, 이러한 &amp;#39;기존의 문제&amp;#39;가 도커가 나오면서 어떻게 변해야하고, 어떤 방향으로 나아갈 것인지에 대해서 이야기했습니다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/elasticsearch'&gt;ElasticSearch&lt;/a&gt;&lt;/span&gt;와 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/kibana'&gt;Kibana&lt;/a&gt;&lt;/span&gt;, &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/graphite'&gt;Graphite&lt;/a&gt;&lt;/span&gt;와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/grafana' rel='noindex,nofollow'&gt;Grafana&lt;/a&gt;&lt;/span&gt;를 설치하고 로그 수집을 시연하는 거창한 데모를 준비했습니다만, 훌륭하게 실패하고 다행히 미리 준비해둔 이미지로 대체했습니다 ㅜ&lt;/p&gt;

&lt;p&gt;로그 수집과 메트릭스에 관한 이야기는 지금 제일 관심있는 주제인 관계로 이 블로그에서도 자주 이야기해나갈 생각입니다. 기회가 되면 더 보충해나가도록 하죠.&lt;/p&gt;

&lt;p&gt;Docker Korea 두번째 모임에서는 이와 같이 3가지 주제에 대해서 공유했습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='service-discovery-행아웃'&gt;Service Discovery 행아웃&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;오프라인 모임과 더불어 7월 30일에는 온라인 행아웃으로 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/service_discovery'&gt;service discovery&lt;/a&gt;&lt;/span&gt; 도구들에 대해서 이야기했습니다. Docker가 어플리케이션 배포의 복잡도를 확 낮춰주는 어플리케이션이라면 이렇게 배포가 되는 수많은 노드와 서비스들을 관리하는 게 그 다음으로 다뤄야할 주제입니다. 그런 이유로 Service Discovery는 현재 Docker와 함께 뜨거운 화두가 되고 있는 주제 중 하나입니다. 다들 아직 이러한 도구들에 대한 이해가 부족하다는 공감이 있어서 각자 한가지 씩 Service Discovery 도구들을 리뷰하는 시간을 가졌습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/nacyot/514b904f7ae569e801e4"&gt;https://gist.github.com/nacyot/514b904f7ae569e801e4&lt;/a&gt;&lt;/p&gt;

&lt;iframe src="//slides.com/subicura/coreos-study/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="//slides.com/changhoonjeong/docker-ambassador/embed" width="600" height="440" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="600" height="440" src="//www.youtube.com/embed/jBK3T1-1QdI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;이 행아웃에서는 Seapy 님이 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker_ambassador_pattern' rel='noindex,nofollow'&gt;docker ambassador&lt;/a&gt;&lt;/span&gt; 패턴에 대해서 발표해주셨고, 그 다음으로 제가 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/consul'&gt;Consul&lt;/a&gt;&lt;/span&gt;에 대해서 발표했습니다. 마지막으로 Subicura 님이 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/coreos'&gt;CoreOS&lt;/a&gt;&lt;/span&gt;와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/etcd' rel='noindex,nofollow'&gt;etcd&lt;/a&gt;&lt;/span&gt;와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/fleet' rel='noindex,nofollow'&gt;fleet&lt;/a&gt;&lt;/span&gt;를 활용한 간단한 사용 예제를 보여주셨습니다.&lt;/p&gt;

&lt;p&gt;아직 확정된 바는 없습니다만, 아마 여기서 논의한 이야기를 각자 좀 더 발전 시켜 다음 모임에서 발표를 하게 되지 않을까 생각하고 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='정리'&gt;정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;지난 번 모임이후 진행된 사항을 정리해보았습니다.&lt;/p&gt;

&lt;p&gt;다다음주가 황금연휴(?)고, 격주 진행시 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/pycon' rel='noindex,nofollow'&gt;pycon&lt;/a&gt;&lt;/span&gt;과 겹치는 관계로 아마 다음 모임은 23일이 될 것으로 생각하고 있습니다. 아직 스터디 지원 문제나 고정된 장소가 확정되지 않은 상태이긴 한데, 아마 확정되는대로 조만간 세번째 모임도 공지를 할 예정입니다.&lt;/p&gt;

&lt;p&gt;모임에 참여해주신 모든 분들 다시 한 번 감사드립니다. 다들 어디 숨어계셨나 했더니 :) Docker Korea는 도커를 비롯해 클라우드나 서버 운영 전반에 관심있으신 분들 모두에게 열려있습니다. 특히 경험 공유나 주제 발표하시고 싶으신 분은 더더욱 우대합니다! 관심있으신 분들은 &lt;a href="http://forum.docker.co.kr/"&gt;포럼&lt;/a&gt;에 들러주시고 &lt;a href="http://forum.docker.co.kr/t/docker-korea/70"&gt;대화방&lt;/a&gt;에도 참여해주세요.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>리눅스에서 터미널과 클립보드 연동하기 - Xclip과 Tmux</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-07-29-linux-terminal-and-copy-integration/"/>
    <id>http://blog.nacyot.com/articles/2014-07-29-linux-terminal-and-copy-integration/</id>
    <published>2014-07-29T15:25:00+00:00</published>
    <updated>2014-12-16T16:45:04+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/terminal' rel='noindex,nofollow'&gt;터미널&lt;/a&gt;&lt;/span&gt; 환경과 GUI 환경은 대개 상당히 동떨어진 환경으로 이 둘을 스무스하게 연동하는 것은 작업환경을 갖추는 데 있어서 중요한 주제 중에 하나이다. 이 연결고리가 잘 연결되어있어야 작업 효율도 올라간다. 이 글에서는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/xclip' rel='noindex,nofollow'&gt;Xclip&lt;/a&gt;&lt;/span&gt;를 통해서 터미널 환경의 문자열을 리눅스 GUI 환경의 클립보드로 복사하는 법과 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/tmux'&gt;Tmux&lt;/a&gt;&lt;/span&gt;의 복사 모드와 Xclip을 연동하는 법을 알아본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='xclip'&gt;Xclip&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;a name='xclip-설치'&gt;Xclip 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/ubnutu' rel='noindex,nofollow'&gt;Ubnutu&lt;/a&gt;&lt;/span&gt;에서 Xclip는 아래 명령어로 설치할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install -y xclip
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 설치가 되었는지 확인해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;xclip -version
&lt;/span&gt;&lt;span id="line-2"&gt;xclip version 0.12
&lt;/span&gt;&lt;span id="line-3"&gt;Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; 2001-2008 Kim Saunders et al.
&lt;/span&gt;&lt;span id="line-4"&gt;Distributed under the terms of the GNU GPL
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;버전 정보가 정상적으로 출력된다면 정상적으로 설치된 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='xclip으로-복사하기'&gt;Xclip으로 복사하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Xclip의 기본적인 사용법은 간단하다. 리눅스 커맨드의 출력 결과를 파이프라인으로 넘겨주면 Xclip이 그 결과를 GUI 환경의 클립보드에 저장해준다. 예를 들어 &lt;code&gt;date&lt;/code&gt; 명령어를 사용하면 아래와 같이 출력된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;date
&lt;/span&gt;&lt;span id="line-2"&gt;Tue Jul 29 23:35:59 KST 2014
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;터미널 어플리케이션마다 약간의 차이는 있지만 보통 이러한 출력을 복사하기 위해서는 마우스로 문자열을 선택하고 복사를 하거나 그것도 잘 안 되면 마우스 오른쪽 버튼을 눌러서 컨텍스트 메뉴에서 복사하기를 클릭해줘야한다.&lt;/p&gt;

&lt;p&gt;같은 상황에서 &lt;code&gt;date&lt;/code&gt;의 출력을 복사할 때 xclip을 사용하면 아래의 명령어를 실행하면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;date &lt;span class="p"&gt;|&lt;/span&gt; xclip -selection clipboard
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;복사가 잘 되었는지 GUI 에디터에서 Ctrl + v 로 복사해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/FPZg8Fy.png" alt="Copy &amp;amp; Paste"&gt;
&lt;p class="shape-title"&gt;Copy &amp;amp; Paste&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 출력되는 것을 알 수 있다. 표준 출력의 내용을 파이프로 넘겨주기만 하면 복사가 이뤄지므로 훨씬 더 다양한 활용이 가능하다. 예를 들어 시스템 정보를 출력해서 바로 클립보드로 보낼 수도 있고, &lt;code&gt;cat&lt;/code&gt;과 함께 사용하면 아주 킨 파일을 바로 클립보드로 보낼 수도 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /var/log/syslog &lt;span class="p"&gt;|&lt;/span&gt; xclip -selection clipboard
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;클립보드가 훨씬 더 강력해질 것이다.&lt;/p&gt;

&lt;p&gt;계속 긴 옵션을 사용하는 것은 귀찮은 일이므로 alias를 사용하면 더 편리하게 사용할 수 있다. 필요한 경우 alias 셸 설정(~/.zshrc 등)에 포함시킨다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xclip -selection clipboard&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /var/log/syslog &lt;span class="p"&gt;|&lt;/span&gt; copy
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a name='xclip-함정(?)'&gt;Xclip 함정(?)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;몇몇 예제에서는 &lt;code&gt;-selection clipboard&lt;/code&gt; 옵션 없이 xclip을 사용하기도 하는데 이렇게 사용할 때는 조심할 필요가 있다. X11의 클립보드는 하나가 아니다. 분명 위의 옵션을 명시적으로 주지 않아도 복사는 일어난다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;date &lt;span class="p"&gt;|&lt;/span&gt; xclip
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;분명히 정상적으로 복사되었지만 아마 일반적으로 Ctrl + v 키로 복사한 내용을 가져오지 못 할 것이다. 이렇게 복사한 경우 마우스 가운데 버튼을 통해서 복사한 내용을 가져올 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='xclip으로-붙여넣기'&gt;Xclip으로 붙여넣기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;GUI 클립보드의 내용을 표준 출력에 출력하는 것은 아래 명령어로 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;xclip -o
&lt;/span&gt;&lt;span id="line-2"&gt;Tue Jul 29 23:35:59 KST 2014
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='tmux와-연동하기'&gt;Tmux와 연동하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Tmux는 다수의 셸을 동시에 띄워놓고 사용할 수 있는 도구이다. Tmux를 사용하면 세션을 통한 프로젝트 관리 등 더 많은 일을 할 수 있지만, 여기서는 간단히만 이해하고 넘어가자. Tmux에서는 터미널 어플리케이션의 스크롤 기능이 자체적인 출력 관리를 수행하며, Copy Mode를 통해서 이렇나 출력들에 대해서 이동하고 복사까지 할 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 복사 모드를 설명하기에 앞서 Tmux에서는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/vi' rel='noindex,nofollow'&gt;vi&lt;/a&gt;&lt;/span&gt;나 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/emacs'&gt;emacs&lt;/a&gt;&lt;/span&gt; 모드를 통해서 키 설정을 사용할 수 있다. 이 설정은 &lt;code&gt;~/.tmux.conf&lt;/code&gt; 파일에 아래 옵션을 통해서 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;vi 모드를 사용하고자 하면 아래와 같이 설정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="n"&gt;vi&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;emacs 모드를 사용하고자 하면 아래와 같이 설정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="n"&gt;emacs&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 복사모드를 사용해보자. Tmux 내에서 복사 모드는 &lt;code&gt;^b [&lt;/code&gt; 키로 시작하고, &lt;code&gt;^b ]&lt;/code&gt;로 종료한다. 복사 모드 내에서도 vi나 emacs 모드에 따라서 아래의 단축키들을 사용할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;Function&lt;/span&gt;                &lt;span class="n"&gt;vi&lt;/span&gt;             &lt;span class="n"&gt;emacs&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;Back&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;indentation&lt;/span&gt;     &lt;span class="o"&gt;^&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;Clear&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;         &lt;span class="n"&gt;Escape&lt;/span&gt;         &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;Copy&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;          &lt;span class="n"&gt;Enter&lt;/span&gt;          &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;             &lt;span class="n"&gt;j&lt;/span&gt;              &lt;span class="n"&gt;Down&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;             &lt;span class="n"&gt;h&lt;/span&gt;              &lt;span class="n"&gt;Left&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;            &lt;span class="n"&gt;l&lt;/span&gt;              &lt;span class="n"&gt;Right&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;   &lt;span class="n"&gt;L&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;   &lt;span class="n"&gt;M&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;      &lt;span class="n"&gt;H&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;               &lt;span class="n"&gt;k&lt;/span&gt;              &lt;span class="n"&gt;Up&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;Delete&lt;/span&gt; &lt;span class="n"&gt;entire&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;      &lt;span class="n"&gt;d&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;Delete&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;   &lt;span class="n"&gt;D&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="n"&gt;End&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;             &lt;span class="err"&gt;$&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;Goto&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;               &lt;span class="o"&gt;:&lt;/span&gt;              &lt;span class="n"&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="n"&gt;Half&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;          &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;            &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Down&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="n"&gt;Half&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;            &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Up&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;               &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;            &lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;               &lt;span class="n"&gt;w&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;Paste&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;            &lt;span class="n"&gt;p&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="n"&gt;Previous&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;           &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;            &lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="n"&gt;Previous&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;           &lt;span class="n"&gt;b&lt;/span&gt;              &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="n"&gt;Quit&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;               &lt;span class="n"&gt;q&lt;/span&gt;              &lt;span class="n"&gt;Escape&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="n"&gt;Scroll&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;             &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Down&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;J&lt;/span&gt;    &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Down&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="n"&gt;Scroll&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;               &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Up&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;      &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Up&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;again&lt;/span&gt;            &lt;span class="n"&gt;n&lt;/span&gt;              &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;backward&lt;/span&gt;         &lt;span class="o"&gt;?&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;forward&lt;/span&gt;          &lt;span class="o"&gt;/&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;&lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt;              &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-30"&gt;&lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;         &lt;span class="n"&gt;Space&lt;/span&gt;          &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Space&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-31"&gt;&lt;span class="n"&gt;Transpose&lt;/span&gt; &lt;span class="n"&gt;chars&lt;/span&gt;                        &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기까지는 좋으나, 여기서의 복사 기능은 GUI 환경의 클립보드를 의미하지 않는다. 이를 다시 옮기는 일은 번거로우므로 간단한 설정을 추가해 tmux의 복사를 자동적으로 클립보드로 옮겨줄 수 있다. 아래의 설정을 &lt;code&gt;~/.tmux.conf&lt;/code&gt;에 추가해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;emacs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xclip -i -selection clipboard&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설정을 추가했으면 설정 파일을 아래와 같이 리로드하거나 tmux 서버를 재실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tmux &lt;span class="nb"&gt;source&lt;/span&gt;-file ~/.tmux.conf
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 (Emacs 모드에서) Ctrl+Space로 필요한 영역을 선택한 후 M-w를 누르면 해당영역이 복사되고, 자동적으로 클립보드에도 복사된다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='정리'&gt;정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;터미널 환경과 GUI 환경의 클립보드를 통합하면 매우 편리하다. 그리고 위에서는 간단히만 이야기했지만, 표준 출력으로 넘길 수 있는 모든 것이 클립보드에 복사될 수 있으므로 단순히 클립보드를 통합한다는 이상의 의미를 지닌다. 이는 셸에서 활용할 수 있는 다양한 스크립트와 출력들을 큰 어려움 없이 GUI 환경에 그대로 복사해 갈 수 있음을 의미한다. 또한 Tmux를 사용해 셸 화면을 직접 선택해 복사하는 방법도 보다 편리하게 사용할 수 있다. &lt;/p&gt;

&lt;p&gt;P.S. xclip과 비슷한 툴로는 xsel이 있으며, OSX에서는 pbcopy, pbpaste라는 명령어를 사용한다.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Docker Korea 스터디 그룹</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-07-26-docker-korea/"/>
    <id>http://blog.nacyot.com/articles/2014-07-26-docker-korea/</id>
    <published>2014-07-26T06:47:03+00:00</published>
    <updated>2014-12-16T16:45:04+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.shomney.com"&gt;함께 쓰는 가계부 Shomney&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재 저는 &lt;a href="http://blog.remotty.com/about/"&gt;Remotty&lt;/a&gt;라는 프로그래밍 모임에 속해있습니다. Remotty는 작년 다른 스터디 그룹에서 파생된 작은 팀으로 2014년에는 계속 Shomney라는 공동 가계부 웹앱을 만들어왔습니다. 업무로 일을 하는 게 아니다보니, 다들 바쁜 시간을 쪼개고, 다른 일에 치이면서(저는 거의 참여도 하지 못 했고...) 7월에서야 겨우 빚을 보았습니다.&lt;/p&gt;

&lt;p&gt;Shomney는 계속 개발중입니다만, 이 공동가계부를 뒤로 하고 Remotty 팀에서는 2번째 커다란 주제로 도커(Docker)를 스터디하기로 했습니다. 그리고 지난주 토요일(7월 19일) 시청역 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/space_noah' rel='noindex,nofollow'&gt;스페이스 노아&lt;/a&gt;&lt;/span&gt;에서 첫 모임을 가졌습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/kngLZ3Y.png" alt="Docker Korea 1회 모임"&gt;&lt;/p&gt;

&lt;p&gt;첫번째 모임에서는 2가지 주제 발표가 이루어졌습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;a href="https://twitter.com/subicura"&gt;subicura&lt;/a&gt; 님이
&amp;#39;Docker - 배포할때 알면 좋은 tip&amp;#39;에 대해서 발표해주셨습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;iframe src="//slides.com/chungsubkim/docker-tip/embed" width="680" height="480" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=ix1E8YBOTeA"&gt;http://www.youtube.com/watch?v=ix1E8YBOTeA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음으로는 제가 &amp;#39;Immutable Infrastructure&amp;#39;라는 주제로 도커와 맞물린 서버 운영의 패러다임 변화에 대해서 발표했습니다. 이 주제는 이전 Programer 세미나에서 발표했던 주제로, &lt;a href="http://localhost:5004/articles/2014-04-06-immutable-infrastructure/"&gt;이미지 기반 어플리케이션 배포 패러다임 Immutable Infrastructure&lt;/a&gt;도 참조해주세요.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/33063863" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/ext/immutable-infrastructure123123123" title="이미지 기반의 배포 패러다임 Immutable infrastructure" target="_blank"&gt;이미지 기반의 배포 패러다임 Immutable infrastructure&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/ext" target="_blank"&gt;Daekwon Kim&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=PdI88QNF-1w"&gt;http://www.youtube.com/watch?v=PdI88QNF-1w&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 앞으로 스터디 모임을 어떻게 진행할 지에 대해서 논의를 했습니다. 논의 결과, 격주로 돌아가며 주제발표를 진행하고 스터디에서 공유한 자료는 부족하더라도 웹 상에서 공유하기로 결정을 했습니다.&lt;/p&gt;

&lt;p&gt;여기서도 발표 자료를 공개해두었습니다만, 아마 이후 스터디에서 공유되는 자료는 작은 포럼 게시판과 유튜브 채널을 통해서 공개될 것입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://forum.docker.co.kr/"&gt;Docker Korea 포럼 게시판&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/channel/UC-TpdzGorF3igglmjCWQhMA"&gt;유튜브 Docker Korea Study 채널&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아직 확정되진 않았습니다만, 스터디에서 여력이 된다면 공개적으로 운영할 계획도 가지고 있으니 관심이 있으시거나 특히 도커에 관해서 발표나 하고싶은 얘기가 있으시다면 꼭 포럼 게시판을 들러주시기 바랍니다.&lt;/p&gt;

&lt;p&gt;다음 모임의 발표주제는 아직 확정은 아닙니다만, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker로 Ghost 배포하기&lt;/li&gt;
&lt;li&gt;도커를 이용한 파이썬 모듈 배포시 의존성 해결&lt;/li&gt;
&lt;li&gt;도커 모니터링 및 로그 수집 시스템 구축하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 주제에 대해서 공유할 예정입니다. 다음에 또 스터디 그룹에 대한 새로운 소식 전달하겠습니다~&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>그라파이트(Grahpite) + 그라파나(Grafana) 모니터링 시스템 구축 with Docker</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2014-07-17-graphite-with-dokcer/"/>
    <id>http://blog.nacyot.com/articles/2014-07-17-graphite-with-dokcer/</id>
    <published>2014-07-24T15:55:03+00:00</published>
    <updated>2014-12-16T16:45:04+00:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;시스템 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/monitoring'&gt;모니터링&lt;/a&gt;&lt;/span&gt;에 대해서 리뷰하거나, 직접 시스템 모니터링을 해봤다면 아래 그림과 같은 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/rrdtool' rel='noindex,nofollow'&gt;rrdtool&lt;/a&gt;&lt;/span&gt;로 만들어진 그래프를 자주 만나게 될 것입니다. rrdtool은 여전히 시스템 모니터링에 있어서 강자입니다만, 이 세계에 단지 rrdtool만 있는 것은 아닙니다. 특히 시계열 데이터 수집에 최적화된 타임시리즈 데이터베이스의 일종인 Graphite는 시스템 정보(&lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/metrics' rel='noindex,nofollow'&gt;metrics&lt;/a&gt;&lt;/span&gt;) 수집에 있어 꽤나 매력적인 도구 중 하나입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/egJIriw.png" alt="rrdtool"&gt;
&lt;p class="shape-title"&gt;rrdtool&lt;/p&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/graphite'&gt;Graphite&lt;/a&gt;&lt;/span&gt;는 기본적으로 특정한 네임스페이스에 시간과 데이터를 계속해서 쌓아가는 특수한 데이터 저장소입니다. 이것만으로는 그래프까지 그려주는 rrdtool에 비해서 그다지 메리트가 없어보입니다만, Graphite는 프로젝트 중에는 Graphite-Web이라는 모듈이 있어 API 형태로 그래프 파일을 제공하거나, 수치 데이터를 제공해줍니다. 기본적인 그래프 생성기가 그렇게 훌륭하진 않습니다만, 수치 데이터를 받을 수 잇는 API를 기반으로 다양한 대시보드 어플리케이션들이 만들어져 있습니다. 물론 오픈소스로. 사용자는 먼저 Grahpite에 데이터를 쌓아놓기만 하면, 자신의 취향에 맞는 대시보드를 골라서 자신만의 대시보드를 만들어나가면 됩니다. 그 중에서도 이 글에서 소개할 대시보드는 Grafana라는 툴입니다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/elasticsearch'&gt;ElasticSearch&lt;/a&gt;&lt;/span&gt;의 대시보드 툴로 유명한 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/kibana'&gt;Kibana&lt;/a&gt;&lt;/span&gt; 라는 프로젝트가 있습니다만, &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/grafana' rel='noindex,nofollow'&gt;Grafana&lt;/a&gt;&lt;/span&gt;는 이 Kibana에서 영감을 받아 만들어진 Graphite판 Kibana라고 이해하시면 좀 더 쉽습니다.&lt;/p&gt;

&lt;p&gt;이 글에서는 Grahphite에 대한 전반적인 소개에 걸쳐 Graphite를 구성하는 하나하나의 요소들을 시작으로 Grafana까지 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/docker'&gt;Docker&lt;/a&gt;&lt;/span&gt;를 사용해 모니터링 시스템 전체를 구축해보도록하겠습니다.&lt;/p&gt;

&lt;h1&gt;&lt;a name='tl;dr'&gt;Tl;dr&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name whisper nacyot/whisper
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 2003:2003 -p 2004:2004 -p 7002:7002 --volumes-from whisper -e &lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cache nacyot/carbon-cache
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8000:80 -e &lt;span class="nv"&gt;CARBONLINK_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;172.17.42.1:7002&amp;quot;&lt;/span&gt; --volumes-from whisper nacyot/graphite-web
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8001:8000 nacyot/grafana
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="http://imgur.com/UYDytKS.png" alt="Grafana"&gt;
&lt;p class="shape-title"&gt;Grafana&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;예이! 참 쉽죠잉?&lt;/p&gt;

&lt;h1&gt;&lt;a name='graphite'&gt;Graphite&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src="https://googledrive.com/host/0B5YqfYBpS__8b1pIVnNVbFNGc0U/Graphite" alt="Graphite의 모듈 구성"&gt;
&lt;p class="shape-title"&gt;Graphite 구성도&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;앞서 Graphite를 단순히 시계열 데이터 저장소라고 소개했습니다만, 이를 사용하기 위해서는 기본적으로 Garphite의 각 구성 요소가 어떻게 이루어지는 지를 이해할 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;위의 그림을 기준으로 간단히 설명하도록 하겠습니다. 먼저 Collector는 Graphite에 어떠한 데이터를 쌓기 위한 모듈입니다. 여기에 대한 특별한 제한은 없습니다만, 시계열 데이터베이스의 특성상 기본적으로 데이터가 저장될 &lt;strong&gt;네임스페이스와 시간, 데이터&lt;/strong&gt; 이렇게 3가지 데이터가 필요합니다. 이러한 정보를 Graphite의 모듈인 Carbon-Cache에 보냅니다. Carbon-Cache는 Collector가 보낸 데이터를 받아 Whisper에 저장합니다. Carbon-Cache가 데이터 수집기라면 Whisper는 실제로 데이터를 파일시스템에 저장하고 읽어오는 모듈입니다. 자 이제 Whisper를 통해 데이터가 파일 시스템에 저장되었습니다. 그렇다면 이 데이터를 어떻게 가져올 수 있을까요. 이 시점에서 등장하는 게 Graphite-Web입니다. Graphite-Web은 http 프로토콜을 통해서 Whisper에 저장된 데이터를 읽어와 이미지 파일이나, 데이터 형식으로 출력합니다. Graphite-Web은 기본적으로 데이터를 제공하는 API와 대시보드 기능 두 가지를 제공하고 있습니다. 여기서 제공하는 대시보드 기능을 그냥 사용해도 무방합니다만, 기본적으로 그렇게 편리하지는 않습니다. 직접적인 Graphite 프로젝트는 아닙니다만, 이 Graphite-Web에서 대시보드를 제외하고 API 기능만을 따로 구현해둔 Graphite-api라는 모듈도 있습니다. 다른 대시보드를 사용한다면 Grahpite-Web이나 Graphite-api 어느 툴을 사용해도 무방합니다.&lt;/p&gt;

&lt;p&gt;이렇게 보면 정말 간단하죠? 정말 간단합니다만, 이 관계를 모르고 무턱대고 Graphite를 사용해보겠다고 덤비면 Carbon은 모고 Whisper는 모고, Graphite-Web이 있는데 또 Graphite-api는 모고, 가벼운 현기증을 시작으로 멘붕을 겪을 지도 모릅니다. Graphite 하나 설치하면 마법 같이 작동하는 그런 아름다운 세계는 없습니다. 간단히 보이지만 이 기본 구성을 이해해두는 건 많은 도움이 될 것입니다. 특히 Graphite 이야기를 쫓아가다보며 statsd며, carban-relay며, diamond며, 나아가 스케일 아웃 얘기까지 나오면 이것저것 알쏭달쏭한 단어와 개념들이 쏟아져나오기 때문에 여기서 이해의 끈을 놓쳐서는 안 됩니다. &lt;/p&gt;

&lt;h2&gt;&lt;a name='graphite-시작하기'&gt;Graphite 시작하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;기본적을 Graphite 구성에 대해서 살펴보았으니 이제 실제로 설치해보도록 하겠습니다. 제목에서 이야기한 바대로 Docker를 기반으로 진행해나갑니다. 조금 번거로울 수도 있지만 이 글은 기본적으로 Graphite 이야기와 Docker 이야기가 혼재되어있습니다. Docker에 전혀 관심이 없으시다면 &lt;a href="https://graphite.readthedocs.org/en/latest/index.html"&gt;Graphite 문서&lt;/a&gt;를 직접 읽으실 것을 추천해드립니다.&lt;/p&gt;

&lt;p&gt;기본적으로 Ubuntu를 사용한다고 전제하고 이야기를 진행하도록 하겠습니다. (Docker와 연결만 되어있다면 사실 다른 운영체제라도 무방합니다.)&lt;/p&gt;

&lt;h2&gt;&lt;a name='whisper'&gt;Whisper&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;우선은 데이터가 저장될 Whisper 이야기부터 시작하도록 하겠습니다. 아래 명령어를 실행합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull nacyot/whisper
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name whisper nacyot/whisper
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='nacyot/whisper-dockerfile'&gt;nacyot/whisper Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;사실 &lt;code&gt;nacyot/whisper&lt;/code&gt; 이미지에는 아무것도 없습니다. &lt;a href="https://github.com/nacyot/docker-graphite/blob/master/whisper/Dockerfile"&gt;Dockerfile&lt;/a&gt;을 열어보면 아래와 같이 실행되는 명령어는 전혀 없습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;busybox&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;VOLUME&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;whisper&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자세히 보면 &lt;code&gt;busybox&lt;/code&gt;라는 이미지를 기반으로 단지 &lt;code&gt;/opt/graphite/storage/whisper&lt;/code&gt; 디렉토리를 마운트 시키는 역할을 하고 있습니다. 정말 이것뿐입니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='볼륨-컨테이너'&gt;볼륨 컨테이너&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Docker의 볼륨 컨테이너라는 개념을 이해하고 계신다면 바로 이해하실 수 있겠지만, 별안간 등장한 busybox라는 이미지가 낯설어보일지도 모릅니다. 잠깐 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/busybox' rel='noindex,nofollow'&gt;busybox&lt;/a&gt;&lt;/span&gt;의 정체를 짚고 넘어가죠.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images busybox
&lt;/span&gt;&lt;span id="line-2"&gt;REPOSITORY          TAG                   IMAGE ID            CREATED             VIRTUAL SIZE
&lt;/span&gt;&lt;span id="line-3"&gt;busybox             latest                a9eb17255234        6 weeks ago         2.433 MB
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;imagse&lt;/code&gt;를 명령어를 실행해보면 busybox 이미지가 놀라울 정도로 &lt;strong&gt;작은&lt;/strong&gt; 이미지라는 것을 알 수 있습니다. busybox의 정체는 초경량 임베디드 리눅스의 일종입니다. 실제로 &lt;code&gt;naycot/whisper&lt;/code&gt;가 하는 역할은 &lt;code&gt;/opt/graphite/storage/whisper&lt;/code&gt;라는 디렉토리를 마운트해놓고, 관련된 모듈이 여기에 데이터를 저장하거나 읽어들이기 위한 역할만을 하는 정말로 &lt;strong&gt;데이터만을 위한&lt;/strong&gt; 이미지입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name whisper nacyot/whisper
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;눈치가 빠르신 분들은 이미 알아채셨겠지만, 이 &lt;code&gt;docker run&lt;/code&gt; 명령어는 심상치 않습니다. 보통 셸을 사용하는 경우처럼 컨테이너에 직접 접속하고자 할 때는 &lt;code&gt;-it&lt;/code&gt; 옵션을 사용하고, 반대로 백그라운드에서 실행시킬 때는 &lt;code&gt;-d&lt;/code&gt; 옵션을 사용하는데, 여기에는 아무런 옵션이 보이질 않습니다. 실제로 이 명령어를 통해서 컨테이너는 생성되지만 실행되진 않습니다. 이렇게 &lt;strong&gt;데이터만을 위한&lt;/strong&gt; 이미지는, &lt;strong&gt;데이터만을 위한&lt;/strong&gt; 컨테이너로 탈바꿈합니다.&lt;/p&gt;

&lt;p&gt;사실 이러한 볼륨 컨테이너를 사용하지 않아도 어플리케이션을 사용하는 데는 아무런 문제가 없습니다만, 볼륨 컨테이너를 사용하면 좋은 점이 있습니다. 먼저 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/aufs' rel='noindex,nofollow'&gt;AUFS&lt;/a&gt;&lt;/span&gt;와 같은 도커 파일 시스템 자체에 데이터를 기록하는 일은 성능 면에서 손해가 많은 편입니다. 다른 파일 시스템을 사용하는 방법도 있기는 합니다만 Volume 기능을 사용해 특정한 디렉토리를 마운트 시키면 호스트와 같은 파일 시스템으로 데이터가 기록됩니다. 이를 통해 성능 손실을 막을 수 있습니다.&lt;/p&gt;

&lt;p&gt;또한 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/volume_container' rel='noindex,nofollow'&gt;볼륨 컨테이너&lt;/a&gt;&lt;/span&gt;를 통해서 실제로 작동되는 프로세스의 실행 종료와 완전히 무관하게, 볼륨 컨테이너가 삭제되지 않는 한 해당하는 컨테이너에 마운트된 데이터도 사라지지 않도록 영속성을 보장할 수 있게 해줍니다. 이를 통해 부가적으로 프로세스와 데이터의 논리적 분리를 통해서 좀 더 깔끔한 관리가 가능하게 해주며, 특히 다수의 프로세스에서 데이터를 공유할 때 특정 프로세스 컨테이너나 특정 Host의 폴더에 의존하지 않는 구조를 만들 수 있게 해줍니다.&lt;/p&gt;

&lt;p&gt;앞서 실행한 볼륨 컨테이너를 확인해보죠. 컨테이너는 실행중인 상태가 아니므로 &lt;code&gt;-a&lt;/code&gt; 옵션을 통해서 확인합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -al
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                        COMMAND                CREATED             STATUS                           PORTS
&lt;/span&gt;&lt;span id="line-3"&gt;45b4afcb4be2        nacyot/whisper:latest        /bin/sh                About an hour ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; About an hour ago                                                                              whisper
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;뭔가 아무것도 없는데 설명이 길었습니다만, 이걸로 데이터를 저장할 준비가 되었습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='carbon-cache'&gt;carbon-cache&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;다음은 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/carbon' rel='noindex,nofollow'&gt;Carbon&lt;/a&gt;&lt;/span&gt;입니다. 실질적으로 데이터를 수집해서 파일 시스템에 기록하는 모듈이 바로 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/carbon-cache' rel='noindex,nofollow'&gt;Carbon-Cache&lt;/a&gt;&lt;/span&gt;입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull nacyot/carbon-cache
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 2003:2003 -p 2004:2004 -p 7002:7002 --volumes-from whisper -e &lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cache nacyot/carbon-cache
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것도 간단하죠? 이제 바로 데이터 수집이 가능합니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='nacyot/carbon-base-dockerfile'&gt;nacyot/carbon-base Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 carbon-cache 이미지를 살펴보기 전에 carbon-cache 이미지의 베이스가 되는 carbon-base를 살펴보겠습니다. carbon-base 실제 모듈이 아니라 carbon-cache와 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/carbon-relay' rel='noindex,nofollow'&gt;carbon-relay&lt;/a&gt;&lt;/span&gt;를 위해 만들어진 중간 이미지입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;twisted&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/graphite-project/carbon.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/graphite-project/whisper.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;whisper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;carbon&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="mf"&gt;0.9.12&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;carbon-base 이미지에도 특별한 건 없습니다. &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/python'&gt;python&lt;/a&gt;&lt;/span&gt;을 설치하고 carbon과 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/whisper' rel='noindex,nofollow'&gt;whisper&lt;/a&gt;&lt;/span&gt;를 설치해줍니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='nacyot/carbon-cache-dockerfile'&gt;nacyot/carbon-cache Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음으로 carbon-cache의 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/dockerfile'&gt;Dockerfile&lt;/a&gt;&lt;/span&gt;을 살펴보도록 하겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;carbon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;NODE_NAME&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LOCAL_DATA_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;whisper&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;MAX_CACHE_SIZE&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;MAX_UPDATES_PER_SECOND&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;MAX_CREATES_PER_MINUTE&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LOG_UPDATES&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LINE_RECEIVER_INTERFACE&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;PICKLE_RECEIVER_INTERFACE&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;CACHE_QUERY_INTERFACE&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LINE_RECEIVER_PORT&lt;/span&gt; &lt;span class="mi"&gt;2003&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;PICKLE_RECEIVER_PORT&lt;/span&gt; &lt;span class="mi"&gt;2004&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;CACHE_QUERY_PORT&lt;/span&gt; &lt;span class="mi"&gt;7002&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;2003&lt;/span&gt; &lt;span class="mi"&gt;2004&lt;/span&gt; &lt;span class="mi"&gt;7002&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 carbon은 이미 carbon-base에서 설치가 되었기 때문에 여기서 무언가를 설치하거나 실행하는 부분은 없습니다. 여기서는 우선 ENV를 통해서 기본 환경변수값들을 설정합니다. 이 환경변수들은 &lt;code&gt;carbon.conf&lt;/code&gt; 파일에서 사용됩니다.&lt;/p&gt;

&lt;p&gt;다음으로 &lt;code&gt;/config&lt;/code&gt; 디렉토리를 이미지 내의 carbon 설정 디렉토리로 복사합니다. 이 디렉토리에는 &lt;code&gt;carbon.conf&lt;/code&gt;와 &lt;code&gt;storage-aggregation.conf&lt;/code&gt;, &lt;code&gt;storage-schemas.conf&lt;/code&gt; 파일이 포함되어있습니다. 따로 만든 설정 파일을 사용한다면 이미지 실행시 &lt;code&gt;-v&lt;/code&gt; 옵션으로 설정 파일이 포함된 폴더를 컨테이너에 마운트시키면 됩니다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code&gt;setup_configs.sh&lt;/code&gt;와 &lt;code&gt;run.sh&lt;/code&gt;를 이미지 내부로 복사합니다. 2003 2004 7002 포트를 열어주고 WORKDIR을 설정해주고, 초기 명령어(CMD)를 설정합니다. 여기서부터는 설정파일과 복사한 쉘스크립트의 용도에 대해서 간략히 설명합니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='carbon.conf'&gt;carbon.conf&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 &lt;code&gt;carbon.conf&lt;/code&gt;를 살펴보겠습니다. 이 파일은 데이터를 수집하는 carbon 데몬에 관한 설정을 담고 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[cache]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="na"&gt;LOCAL_DATA_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="na"&gt;MAX_CACHE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="na"&gt;MAX_UPDATES_PER_SECOND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="na"&gt;MAX_CREATES_PER_MINUTE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="na"&gt;LOG_UPDATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="na"&gt;LINE_RECEIVER_INTERFACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="na"&gt;PICKLE_RECEIVER_INTERFACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="na"&gt;CACHE_QUERY_INTERFACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="na"&gt;LINE_RECEIVER_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="na"&gt;PICKLE_RECEIVER_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="na"&gt;CACHE_QUERY_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서는 기본적으로 사용하는 설정들을 나열해놓았습니다. 실제로는 아무런 값도 들어가 있지않습니다. 이렇게도 실행이 가능할까요? 불가능하겠죠. 이 설정은 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/shell_script'&gt;셸스크립트&lt;/a&gt;&lt;/span&gt;를 통해서 환경변수로부터 자동적으로 입력됩니다. 이를 수행하는 게 &lt;code&gt;setup_configs.sh&lt;/code&gt; 파일입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\[cache\]/\[${NODE_NAME}\]/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-4"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(LOCAL_DATA_DIR\).*$/\1 = $(printf &amp;quot;&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOCAL_DATA_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | sed -e &amp;#39;s/\//\\\//g&amp;#39;)/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-5"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(MAX_CACHE_SIZE\).*$/\1 = ${MAX_CACHE_SIZE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-6"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(MAX_UPDATES_PER_SECOND\).*$/\1 = ${MAX_UPDATES_PER_SECOND}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-7"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(MAX_CREATES_PER_MINUTE\).*$/\1 = ${MAX_CREATES_PER_MINUTE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-8"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(LOG_UPDATES\).*$/\1 = ${LOG_UPDATES}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-9"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(LINE_RECEIVER_INTERFACE\).*$/\1 = ${LINE_RECEIVER_INTERFACE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-10"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(PICKLE_RECEIVER_INTERFACE\).*$/\1 = ${PICKLE_RECEIVER_INTERFACE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-11"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(CACHE_QUERY_INTERFACE\).*$/\1 = ${CACHE_QUERY_INTERFACE}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-12"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(LINE_RECEIVER_PORT\).*$/\1 = ${LINE_RECEIVER_PORT}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-13"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(PICKLE_RECEIVER_PORT\).*$/\1 = ${PICKLE_RECEIVER_PORT}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;span id="line-14"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/\(CACHE_QUERY_PORT\).*$/\1 = ${CACHE_QUERY_PORT}/g&amp;quot;&lt;/span&gt; ./conf/carbon.conf
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;단순 무식한 스크립트이므로 설명은 생략하겠습니다. 이를 통해서 기본적인 설정들에 대해서는 실행시에 동적으로 환경 변수를 지정해 사용할 수 있습니다. &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/environment_variable' rel='noindex,nofollow'&gt;환경변수&lt;/a&gt;&lt;/span&gt;를 덮어쓰지 않으면 위에서 살펴본 carbon-cache Dockerfile의 ENV 값들이 사용됩니다. 단순히 하나의 노드로 실행시키고자 할 때는 기본 설정을 사용해도 무방할 것입니다. 각 설정에 대한 자세한 사항은 &lt;a href="https://graphite.readthedocs.org/en/latest/index.html"&gt;Graphite 문서&lt;/a&gt;를 참조하시기바랍니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='carbon에서-사용하는-3개의-포트-:-2003,-2004,-7002'&gt;Carbon에서 사용하는 3개의 포트 : 2003, 2004, 7002&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;조금만 더 설명을 보태겠습니다. 위에서 EXPOSE 지시자를 통해서 2003, 2004, 7002, 이렇게 3개의 포트를 열었습니다. 데이터 수집 데몬이라고 했는데, 은근히 포트가 많죠. 각각의 포트가 어떤 용도로 사용되는 지 정도는 알아둘 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;2003과 2004는 데이터를 받아서 저장하는 포트입니다. 먼저 2003은 plaintext protocol을 사용해 데이터를 받아들이며, 설정에서는 &lt;code&gt;LINE_RECEIVER&lt;/code&gt;로 표현합니다. 한 줄 한 줄 아래와 같은 포맷을 사용합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로는 아래와 같습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt; &lt;span class="mi"&gt;1405608517&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음으로 2004는 pickle protocol입니다. 설정에서는 &lt;code&gt;PICKLE_RECEIVER&lt;/code&gt;라고 표현합니다. 아래와 같은 형식을 사용합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[(path, (timestamp, value)), ...]&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하나의 네임스페이스에 대해서 다량의 정보를 수집할 때 유용합니다. 어쨌거나 대개는 라이브러리나 이미 만들어져있는 수집기를 통해서 metric을 수집하기 때문에 프로토콜까지 이해하고 직접 작성할 일은 별로 없습니다. 포트의 용도 정도만 이해하셔도 충분하다고 생각합니다.&lt;/p&gt;

&lt;p&gt;마지막으로 7002는 쿼리 포트입니다. 실제로 이 포트는 graphite-web에서 연결합니다. 그런데 사실 graphite-web은 whisper 데이터베이스(파일)에서 직접 데이터를 읽어옵니다. 그렇다면 조금 의문이 들 지도 모릅니다. 이 carbon daemon에 쿼리를 하는 건 어떤 용도로 쓰일까요? 사실 carbon에서 받은 데이터는 whisper 데이터베이스에 실시간으로 저장되지 않습니다. carbon에서 받은 데이터는 기본적으로 메모리에 저장되고 whisper 라이브러리에 의해서 적절히 flush되어 파일에 저장됩니다. carbon-cache는 최근에 들어온 아직 파일에 쓰여지지 않은 데이터를 쿼리하는데 사용됩니다.&lt;/p&gt;

&lt;p&gt;이것으로 3가지 포트의 수수께끼는 풀렸습니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='storage-aggregation.conf-&amp;amp;-storage-schemas.conf'&gt;storage-aggregation.conf &amp;amp; storage-schemas.conf&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이외에도 carbon에는 데이터를 저장할 whisper 데이터베이스의 저장방식을 지정하기 위한 설정 파일들이 있습니다.&lt;/p&gt;

&lt;p&gt;whisper 라이브러리는 데이터값을 받는 모든 네임스페이스에 대해서 해당하는 네임스페이스의 데이터가 저장되는 &lt;code&gt;.wsp&lt;/code&gt; 파일을 생성합니다. &lt;code&gt;storage-schemas.conf&lt;/code&gt;는 패턴을 통해서 특정한 패턴에 해당하는 네임스페이스의 데이터베이스를 만들 때 그 구조(retention)를 정의합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[carbon]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;^carbon\..*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="na"&gt;retentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1m:31d,10m:1y,1h:5y&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;[highres]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;^highres.*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="na"&gt;retentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1s:1d,1m:7d&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="k"&gt;[statsd]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;^statsd.*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="na"&gt;retentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1m:7d,10m:1y&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="k"&gt;[default]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;.*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="na"&gt;retentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10s:1d,1m:7d,10m:1y&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설정값이 &lt;code&gt;retentions = 15s:7d,1m:21d,15m:5y&lt;/code&gt;이면 해당하는 네임스페이스의 데이터는 15초 간격의 데이터는 7일, 1분 간격의 데이터는 21일, 15분 간격의 데이터는 5년 치를 저장하게 됩니다. 좀 더 구체적으로 설명하면 데이터를 저장하고 8일이 지나면 이 데이터는 1분 간격으로 저장되고, 1분보다 짧은 간격의 데이터들은 소실됩니다.&lt;/p&gt;

&lt;p&gt;그런데 이렇게 더 짧은 간격의 &lt;strong&gt;데이터들&lt;/strong&gt;이 일부가 소실되어 긴 간격의 포인트가 된다고 한다면 여기에는 분명 어떠한 조작이 일어날 것입니다. 이를 정의하는 게 storage-aggregation.conf 파일입니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[min]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;\.min$&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="na"&gt;xFilesFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="na"&gt;aggregationMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;min&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="k"&gt;[max]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;\.max$&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="na"&gt;xFilesFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="na"&gt;aggregationMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;max&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="k"&gt;[sum]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;\.count$&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="na"&gt;xFilesFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="na"&gt;aggregationMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="k"&gt;[default_average]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="na"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;.*&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="na"&gt;xFilesFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.5&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="na"&gt;aggregationMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;average&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 설정도 마찬가지로 특정한 패턴에 해당하는 네임스페이스에 대해서 적용됩니다. 기본은 &lt;code&gt;average&lt;/code&gt; 통해서 데이터가 집계됩니다. 쉽게 말해 15초 간격의 데이터가 10 20 10 20 이었다면 1분 간격의 데이터는 15가 됩니다. 단 여기서 굉장히 주의해야할 부분이 하나 있습니다. 15초 간격의 데이터인데, 실제로는 데이터가 이 사이에 하나밖에 없다고 해보죠. Whisper에서는 시간과 데이터만 있으면 어떠한 데이터도 저장이 되기 때문이 이런 종류의 제약은 걸려있지 않습니다만, 이 데이터를 average로 집계하면 데이터가 소실되어 버립니다. 이렇게 데이터가 소실되어 버리면 실제로는 데이터가 존재하는 데도 api에서 호출될 때는 사라지는 현상이 발생하게됩니다. 이러한 상황을 방지하기 위해서는 데이터를 간격에 맞춰(혹은 더 자주) 충실히 넣어주거나, average 대신 다른 집계 방법을 사용할 필요가 있습니다. 이는 Graphite를 처음 사용할 때 빠지기 쉬운 함정이므로 알아두면 좋습니다.&lt;/p&gt;

&lt;p&gt;참고로 패턴 적용은 위에서부터 이루어진다는데 유의가 필요합니다. 즉 이 설정 파일들에서는 순서가 중요합니다. 예를 들어 &lt;code&gt;[default]&lt;/code&gt;의 패턴 &lt;code&gt;.*&lt;/code&gt;이 모든 네임스페이스에 들어맞기 때문에 이후에 어떤 설정을 넣어도 적용되지 않을 것입니다.&lt;/p&gt;

&lt;p&gt;더 자세한 내용은 &lt;a href="https://graphite.readthedocs.org/en/latest/index.html"&gt;Graphite 문서&lt;/a&gt;를 참조해주시기바랍니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='graphite-web'&gt;Graphite-Web&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이것으로 무사히 &lt;code&gt;carbon-cache&lt;/code&gt;까지 실행했습니다. 데이터를 받을 준비는 끝났습니다. 다음은 저장된 데이터를 읽어오는 Garphite-Web 모듈의 차례입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull naycot/graphite-web
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8000:8000 -e &lt;span class="nv"&gt;CARBONLINK_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;172.17.42.1:7002&amp;quot;&lt;/span&gt; --volumes-from whisper nacyot/graphite-web
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;역시나 도커를 사용하면 간단합니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='nacyot/graphite-web-dockrefile'&gt;nacyot/graphite-web Dockrefile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서부터는 좀 더 자세히 graphite-web 이미지가 어떻게 만들어졌는지 살펴보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="cp"&gt;# Install Base Packages&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;supervisor&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;simplejson&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;memcache&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cairo&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-8"&gt;                       &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;twisted&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pysqlite2&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-9"&gt;                       &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="cp"&gt;# Install python packages&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt; &lt;span class="n"&gt;pyparsing&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tagging&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.3.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="cp"&gt;# Install whisper and graphite-web&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/graphite-project/whisper.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;whisper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="mf"&gt;0.9.12&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/graphite-project/graphite-web.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-20"&gt;      &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="mf"&gt;0.9.12&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;/span&gt;&lt;span id="line-21"&gt;      &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="cp"&gt;# Setup graphite directories and environment variables&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;GRAPHITE_STORAGE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;GRAPHITE_CONF_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;PYTHONPATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;LOG_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_INDEX_TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;graphite&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;
&lt;/span&gt;&lt;span id="line-30"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-31"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-32"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-33"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;whisper&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-34"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-35"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;chown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-36"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mo"&gt;0775&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;whisper&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-37"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mo"&gt;0664&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-38"&gt;
&lt;/span&gt;&lt;span id="line-39"&gt;&lt;span class="cp"&gt;# Copy configuration files&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-40"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local_settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local_settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-41"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initial_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initial_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-42"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-43"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervisord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervisor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervisord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-44"&gt;
&lt;/span&gt;&lt;span id="line-45"&gt;&lt;span class="cp"&gt;# Initialize database(sqlite3)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-46"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;syncdb&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;noinput&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-47"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;loaddata&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;initial_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-48"&gt;
&lt;/span&gt;&lt;span id="line-49"&gt;&lt;span class="cp"&gt;# Set CMD&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-50"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webapp&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-51"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-52"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/usr/bin/supervisord&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번엔 꽤나 많은 명령어들이 늘어져있습니다만, 사실 자세히 보면 python과 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/django' rel='noindex,nofollow'&gt;django&lt;/a&gt;&lt;/span&gt; 관련 패키지 설치, 관련 폴더/파일 생성, 필요한 ENV 지정, django 앱인 graphite-web을 설치하는 과정에 불과합니다. 내용만 길 뿐이지, 읽어나가는 데 큰 어려움은 없을 것이라 생각합니다.&lt;/p&gt;

&lt;p&gt;마지막 CMD 지시자를 통해서 &lt;code&gt;supervisord&lt;/code&gt;로 &lt;code&gt;gunicorn_django&lt;/code&gt;와 &lt;code&gt;nginx&lt;/code&gt;를 사용해 graphite-web을 실행합니다.&lt;/p&gt;

&lt;p&gt;supervisord.conf는 아래와 같이 구성됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;[supervisord]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="na"&gt;nodaemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;[program:nginx]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/usr/sbin/nginx&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="na"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/supervisor/%(program_name)s.log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="na"&gt;stderr_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/supervisor/%(program_name)s.log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="na"&gt;autorestart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="k"&gt;[program:graphite-webapp]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="na"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/opt/graphite/webapp&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/usr/bin/gunicorn_django -b0.0.0.0:8000 -w2 graphite/settings.py&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="na"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/supervisor/%(program_name)s.log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="na"&gt;stderr_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/supervisor/%(program_name)s.log&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="na"&gt;autorestart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제 graphite-web 어플리케이션은 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/gunicorn' rel='noindex,nofollow'&gt;gunicorn&lt;/a&gt;&lt;/span&gt;을 통해서 실행시키고, &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/nginx' rel='noindex,nofollow'&gt;nginx&lt;/a&gt;&lt;/span&gt;의 프록시 기능을 통해서 외부에 노출시킵니다. &lt;code&gt;nginx.conf&lt;/code&gt; 일부를 살펴보면 아래와 같이 proxy하고 있는 걸 알 수 있습니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;proxy_pass&lt;/span&gt;                 &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:8000;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;   &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Proto&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;           &lt;span class="n"&gt;Host&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이외에도 nginx를 사용하는 이유는 한 가지가 더 있습니다. 바로 외부 호스트에서 호출시 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/cors' rel='noindex,nofollow'&gt;cors&lt;/a&gt;&lt;/span&gt;를 사용하기 위함입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Origin&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GET, OPTIONS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin, authorization, accept&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 graphite-web는 단순히 데이터를 전달하는 용도 뿐만 아니라, 웹사이트 기능을 포함하고 있어서 자체 정보를 저장하는 데이터베이스를 사용합니다. 이 데이터베이스에는 사이트 설정 및 관리자 정보 같은 것들이 저장됩니다. 여기서는 편의상 sqlite을 사용해서 컨테이너 내부에서만 사용합니다. 이 예제에서는 graphite-web 대시보드를 사용하지 않습니다. grafana를 사용할 것이므로 별로 중요하지 않습니다. (참고로 기본 관리자 계정은 admin/admin 입니다)&lt;/p&gt;

&lt;p&gt;local&lt;em&gt;settings.py에는 graphite-web 설정이 들어갑니다만, 실제 파이썬 코드를 사용하므로 바로 환경변수를 사용할 수 있습니다. 앞에서 사용한 `setup&lt;/em&gt;configs.sh`처럼 쉘 스크립트를 사용할 필요가 없습니다. 파이썬 코드를 바로 사용해서 환경변수를 통해 설정을 적용할 수 있습니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;LOG_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/var/log/graphite&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CARBONLINK_HOSTS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="n"&gt;CARBONLINK_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CARBONLINK_HOSTS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CLUSTER_SERVERS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    &lt;span class="n"&gt;CLUSTER_SERVERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CLUSTER_SERVERS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MEMCACHE_HOSTS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="n"&gt;CLUSTER_SERVERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MEMCACHE_HOSTS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재 중요한 옵션은 &lt;code&gt;CARBONLINK_HOSTS&lt;/code&gt;입니다. 위에서 설명한 대로 carbon에 직접 연결해서 아직 whisper에 저장되지 않은 데이터를 읽어오기 위한 용도입니다. 다시 앞선 graphite-web 실행 명령어를 살펴봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8000:8000 -e &lt;span class="nv"&gt;CARBONLINK_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;172.17.42.1:7002&amp;quot;&lt;/span&gt; --volumes-from whisper nacyot/graphite-web
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이를 통해 &lt;code&gt;CARBONLINK_HOSTS&lt;/code&gt;를 통해 carbon에서 직접 최신 데이터를 받아오며 &lt;code&gt;--volumes-from&lt;/code&gt;을 통해서 whisper 데이터를 읽어오는 것을 알 수 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='graphite-정리'&gt;Graphite 정리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;현재 상황을 확인해보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps -a
&lt;/span&gt;&lt;span id="line-2"&gt;CONTAINER ID        IMAGE                        COMMAND                CREATED             STATUS                      PORTS                                                                    NAMES
&lt;/span&gt;&lt;span id="line-3"&gt;3acf95727292        nacyot/graphite-web:latest   /usr/bin/gunicorn_dj   10 minutes ago      Up 10 minutes               0.0.0.0:8000-&amp;gt;8000/tcp                                                   thirsty_ritchie
&lt;/span&gt;&lt;span id="line-4"&gt;5ec8670bef73        nacyot/carbon-cache:latest   /bin/sh -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;./setup_   10 minutes ago      Up 10 minutes               0.0.0.0:2003-&amp;gt;2003/tcp, 0.0.0.0:2004-&amp;gt;2004/tcp, 0.0.0.0:7002-&amp;gt;7002/tcp   tender_newton
&lt;/span&gt;&lt;span id="line-5"&gt;48a012d30afb        nacyot/whisper:latest        /bin/sh                12 minutes ago      Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 12 minutes ago                                                                            whisper
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞서 설명했듯이 whisper는 실제로 실행중인 컨테이너가 아니므로 &lt;code&gt;-a&lt;/code&gt; 옵션을 사용하지 않으면 보이지 않습니다. carbon-cache를 사용해서 whisper에 데이터를 저장하고 graphite-web에서 저장된 데이터와 carbon-cache에서 최신 데이터를 가져오도록 완벽히 세팅되었습니다.&lt;/p&gt;

&lt;p&gt;여기까지 잘 따라오셨다면 &lt;code&gt;http://0.0.0.0:8000&lt;/code&gt;에 접속해봅니다. 몇 번인가 언급했다시피 graphite-web은 api 서버이자, 대시보드 어플리케이션 역할을 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/BiV7oAE.png" alt="Grphite-Web Dashboard"&gt;
&lt;p class="shape-title"&gt;Graphite-Web 대시보드&lt;/p&gt;r&lt;/p&gt;

&lt;p&gt;오오, 뭔가 나오네요 &amp;gt;_&amp;lt;&lt;/p&gt;

&lt;p&gt;아직 어떠한 데이터도 집어넣은 기억이 없으실 지도 모릅니다만, carbon은 기본적으로 데몬으로부터 간단한 데이터를 수집합니다.&lt;/p&gt;

&lt;h1&gt;&lt;a name='grafana'&gt;Grafana&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;Grafana는 Graphite나 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/influxdb'&gt;influxDB&lt;/a&gt;&lt;/span&gt;를 백엔드로 사용하는 대시보드 툴입니다. 처음 Graphite + Grafana 조합을 보면, ElasticSearch + Kibana 조합과 뭐가 다른 건지, 대체 가능한 건지 의문이 들 지도 모릅니다. 차이가 있다고 하면 있고, 없다고 하면 없기는 합니다. 그런 알쏭달쏭한 면이 있기는 하지만,  하나 분명한 차이는 Graphite는 단지 시간과 데이터를 받는 시계열 데이터베이스고, ElasticSearch를 사용한 모니터링은 로그 수집에 가깝다는 점입니다. 결론적으로 ElasticSearch가 Graphite의 기능을 대개 커버할 수 있을지는 모르지만, 단순 시계열 데이터를 저장하는데 최적화된 플랫폼은 아닙니다. 결국에 시스템 모니터링 + 로그 시스템을 구축할 때는 Graphite + Grafana와 ElasticSearch + Kibana 두 조합 모두 사용하는 게 답이 아닌가 하고, 필요하다면 각각에 대한 대체툴을 찾아야겠죠.&lt;/p&gt;

&lt;p&gt;어쨌건 약간 주제에서 빗겨난 이야기를 했습니다만, 다시 한 번 정리하면 Graphite는 시계열 데이터를 저장하는데 최적화되어있고, Grafana는 시계열 데이터를 보여주는데 최적화된 대시보드라고 할 수 있습니다. 아, 물론 Graphite를 기반으로 하는 대시보다 툴은 더 많이 있습니다. Garafana는 그 중에서 최근에 가장 잘 나가는 도구라고 보시면 됩니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='grafana-실행하기'&gt;Grafana 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 grafana를 실행시키기 위해서는 elasticsearch가 필요합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull dockerfile/elasticsearch
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음 명령어로 grafana를 실행합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull nacyot/grafana
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8001:8000 nacyot/grafana
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='dockerfile'&gt;Dockerfile&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Grafana는 &lt;span class='live_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/angularjs'&gt;Angularjs&lt;/a&gt;&lt;/span&gt;를 기반으로 만들어진 앱어플리케이션으로 자바스크립트 프로젝트입니다. 따라서 레일스나 장고와 같은 서버 계층을 가지고 있지 않습니다. 갑자기 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/centos' rel='noindex,nofollow'&gt;Centos&lt;/a&gt;&lt;/span&gt;를 사용하고 있습니다만, 이전에 작업하던 걸 기반으로 한 거라 별다른 의미이는 없습니다. 설치과정은 grafana 어플리케이션을 가져와서 적절한 위치에 설치하고 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/apache' rel='noindex,nofollow'&gt;apache&lt;/a&gt;&lt;/span&gt;를 기반으로 실행합니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;centos&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;centos6&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;MAINTAINER&lt;/span&gt; &lt;span class="n"&gt;Daekwon&lt;/span&gt; &lt;span class="n"&gt;Kim&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;propellerheaven&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iUvh&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/grafana/grafana.git&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Japan&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;ES_API_HOST&lt;/span&gt; &lt;span class="mf"&gt;172.17.42.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;ES_API_PORT&lt;/span&gt; &lt;span class="mi"&gt;9200&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;GRAPHITE_API_HOST&lt;/span&gt; &lt;span class="mf"&gt;172.17.42.1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;GRAPHITE_API_PORT&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup_configs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일단 다른 부분들은 대체로 비슷한데, 로컬 타임 설정하는 부분이 있습니다. 기본적으로 도커 컨테이너에서는 시간이 UTC로 설정된다는 걸 이해하고 있어야합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -i -t ubuntu bash
&lt;/span&gt;&lt;span id="line-2"&gt;root@1f27c50b400d:/# date
&lt;/span&gt;&lt;span id="line-3"&gt;Fri Jul 18 01:05:48 UTC 2014
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이는 여러모로 귀찮은 문제들을 발생시키곤 합니다. 어플리케이션 단에서 이 문제를 명시적으로 설정해서 푸는 방법도 있습니다만, 해당하는 설정이 작동하지 않는 경우 시스템 시간 설정을 바꾸는 것도 방법입니다. 여기서 시스템 시간 설정을 하는 이유는 아마 해당하는 이슈가 있었기 때문이라고 어렴풋이 떠올려봅니다만, 사실 정확히 기억나진 않습니다. 일단 여기서는 시스템 시간 설정을 바꿔줍니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='config.js-&amp;amp;-setup_configs.js'&gt;config.js &amp;amp; &lt;code&gt;setup_configs.js&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음으로 config.js를 살펴봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;settings&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;       &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;           &lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;               &lt;span class="nx"&gt;elasticsearch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ES_API_HOST:ES_API_PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;               &lt;span class="nx"&gt;datasources&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;                 &lt;span class="nx"&gt;graphite&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;                   &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;graphite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;                   &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GRAPHITE_API_HOST:GRAPHITE_API_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;                   &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;                   &lt;span class="nx"&gt;render_method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;                 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;               &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;               &lt;span class="nx"&gt;default_route&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/dashboard/file/default.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;               &lt;span class="nx"&gt;timezoneOffset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;               &lt;span class="nx"&gt;grafana_index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;grafana-dash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;               &lt;span class="nx"&gt;panel_names&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;                   &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;                   &lt;span class="s1"&gt;&amp;#39;graphite&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;               &lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;           &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;       &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dockerfile의 아래쪼을 보면 ENV로 ElasticSearch 서버와 Garphite 서버를 설정합니다. 여기서 ElasticSerach를 사용하는 게 의아하실 지도 모릅니다만, Grafana는 기본적으로 Kibana를 베이스로 하고 있으며 대시보드 설정을 ElasticSearch에 저장하고 있습니다. 네, 단지 그 용도로 사용합니다. 데이터는 Graphite에서 가져옵니다. 환경 변수에 저장된 서버 정보는 config.js에서 치환됩니다. 이는 carbon-cache 에서 사용했던 것과 같은 기법입니다. &lt;code&gt;setup_configs.conf&lt;/code&gt;를 살펴보죠.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;[&lt;/span&gt; -f /opt/grafana/src/config/config.js &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cp /opt/grafana/src/config/config.js /opt/grafana/src/config.js
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/ES_API_HOST/${ES_API_HOST}/g&amp;quot;&lt;/span&gt; ./src/config.js
&lt;/span&gt;&lt;span id="line-6"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/ES_API_PORT/${ES_API_PORT}/g&amp;quot;&lt;/span&gt; ./src/config.js
&lt;/span&gt;&lt;span id="line-7"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/GRAPHITE_API_HOST/${GRAPHITE_API_HOST}/g&amp;quot;&lt;/span&gt; ./src/config.js
&lt;/span&gt;&lt;span id="line-8"&gt;sed -i -e &lt;span class="s2"&gt;&amp;quot;s/GRAPHITE_API_PORT/${GRAPHITE_API_PORT}/g&amp;quot;&lt;/span&gt; ./src/config.js
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우선 별도의 설정 파일을 마운트했을 경우 해당하는 config.js를 우선적으로 사용할 수 있도록 했습니다. 기본적으로 이 이미지는 ElasticSearch와 Graphite 서버에 연결할 것을 전제하고 있습니다만, Grafana는 데이터 백엔드로 여러 서버를 지정할 수도 있고 InfluxDB를 지정할 수 있습니다. 물론 다른 설정들도 필요한 경우 수정할 수 있어야하니까요. 설정에 관한 자세한 사항 &lt;a href="http://grafana.org/docs/"&gt;Grafana 문서&lt;/a&gt;를 참조해주세요.&lt;/p&gt;

&lt;p&gt;나머지 부분은 서버 설정을 치환하는 부분입니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='grafana.conf-&amp;amp;-run.sh'&gt;grafana.conf &amp;amp; run.sh&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Apache 설정입니다. Grafana는 자체적인 웹 서버를 가지지 않으므로 nginx나 apache를 사용해서 실행해야합니다. 별 다른 내용은 없습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;Listen 80
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;    ServerName grafana
&lt;/span&gt;&lt;span id="line-4"&gt;    DocumentRoot &amp;quot;/opt/grafana/src&amp;quot;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;run.sh는 아파치를 실제로 실행시키는 파일입니다. &lt;code&gt;-DFOREGROUND&lt;/code&gt; 옵션은 아파치를 데몬이 아니라 포그라운드에서 띄워줍니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;/usr/sbin/httpd -d . -f /etc/httpd/conf/httpd.conf -e info -DFOREGROUND
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='grafana-사용하기'&gt;Grafana 사용하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;네, 여기까지 Grafana 실행 및 내부적으로 어떻게 실행하는 지에 대해서 설명했습니다. 앞서 실행시에 8001번 포트로 내부를 연결했습니다. 웹브라우저로 &lt;code&gt;0.0.0.0:8001&lt;/code&gt;에 접속해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://imgur.com/UYDytKS.png" alt="Grafana"&gt;
&lt;p class="shape-title"&gt;Grafana Randomwalk&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;첫 페이지에 생성되는 데이터는 &lt;span class='dead_link'&gt;&lt;a href='http://wiki.nacyot.com/documents/randomwalk' rel='noindex,nofollow'&gt;RandomWalk&lt;/a&gt;&lt;/span&gt;로 생성된 시계열 그래프입니다.&lt;/p&gt;

&lt;p&gt;앞서 Graphite-Web 에서 본 그래프는 아래와 Grafana에서는 아래와 같이 보입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/yY0Uoa9.png" alt="Grafana"&gt;
&lt;p class="shape-title"&gt;Grafana Graph(Carbon 데몬이 수집한 데이터)&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;이 글에서는 Grafana의 사용법은 기본적인 개념만 익히면 어렵지 않습니다만, 그 얘기는 또 다음 기회에...&lt;/p&gt;

&lt;h1&gt;&lt;a name='소스코드'&gt;소스코드&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nacyot/docker-graphite"&gt;https://github.com/nacyot/docker-graphite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 글에서 다룬 Dockerfile의 최신 코드는 위 저장소에 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/nacyot/whisper/"&gt;https://registry.hub.docker.com/u/nacyot/whisper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/nacyot/carbon-cache/"&gt;https://registry.hub.docker.com/u/nacyot/carbon-cache/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/nacyot/graphite-web/"&gt;https://registry.hub.docker.com/u/nacyot/graphite-web/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/nacyot/grafana/"&gt;https://registry.hub.docker.com/u/nacyot/grafana/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각각의 이미지는 Docker Hub에서 확인할 수 있습니다.&lt;/p&gt;

&lt;h1&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-flag'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;먼 길을 돌아왔습니다. 하지만 시작에서 이야기한 대로 실행하는 것은 간단합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --name whisper nacyot/whisper
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 2003:2003 -p 2004:2004 -p 7002:7002 --volumes-from whisper -e &lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cache nacyot/carbon-cache
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8000:80 -e &lt;span class="nv"&gt;CARBONLINK_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;172.17.42.1:7002&amp;quot;&lt;/span&gt; --volumes-from whisper nacyot/graphite-web
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 8001:8000 nacyot/grafana
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 사용하시고자 할 때는 커스터마이징이 필요할 것 같긴합니다만, 테스트 용도로 사용하는 동안에는 이 이미지들을 바로 사용해도 큰 문제는 없을 것입니다. Docker를 사용하면 위에서 설명한 모든 내용이 이 명령어 5개로 압축됩니다.&lt;/p&gt;

&lt;p&gt;사실 이 전부를 다 가지고 있는 이미지 하나를 만드는 것도 가능합니다. 실제로 Docker Hub를 뒤져보면 굉장히 많은 하나로된 Grahpite 이미지들이 있습니다. 오히려 여기서 소개한 방식으로 쪼개져있는 경우를 찾아보기 힘듭니다. 이렇게 쪼개놓은 데는 이유가 있습니다. 이 글에서는 아직 소개하지 않았습니다만, Grahpite는 기본적으로 스케일 아웃 가능하도록 설계되어있습니다. 즉 각 모듈을 조립할 수 있도록 구성해야 좀 더 쉽게 스케일 아웃이 가능해집니다. 고작 숫자라고 생각하실지도 모릅니다만, 다량의 숫자를 다수의 서버에서 동시다발적으로 수집한다면 서버에 금방 과부하가 걸릴 가능성은 매우 큽니다. 이럴 때 스케일 아웃을 통해 생각보다 훨씬 견고한 수치 수집 시스템을 만들 수 있겠죠.(이 이야기가 다음 포스트가 되면 좋겠다고 생각은 하고 있습니다만, 기약은 없습니다.)&lt;/p&gt;

&lt;p&gt;여기서 다룬 내용은 Graphite 시작에 불과합니다. Graphite 자체에 대해서도 이해해야할 주제들이 꽤 있습니다만, Graphite는 무엇보다도 생태계가 상당히 잘 갖춰져있는 오픈소스 모니터링 툴입니다. &lt;a href="https://collectd.org/"&gt;Collected&lt;/a&gt;, &lt;a href="https://github.com/BrightcoveOS/Diamond"&gt;Diamond&lt;/a&gt;, &lt;a href="https://github.com/mojodna/metricsd"&gt;Metricsd&lt;/a&gt;, &lt;a href="http://sensuapp.org/"&gt;Sensu&lt;/a&gt; 같은 툴을 통해서 관리중인 모든 서버의 수치 데이터를 수집할 수도 있고, 부하가 커질 경우 위에서 말한 것처럼 스케일 아웃도 가능하고 &lt;a href="https://github.com/etsy/statsd/"&gt;Statsd&lt;/a&gt;를 써서 버퍼 서버로 사용할 수도 있습니다. 또한 여기서는 Grafana만을 다뤘지만 앞서 언급한대로 다양한 대시보드 툴을 사용해 자신만의 대시보드를 만들 수도 있습니다. 나아가 &lt;a href="https://github.com/arachnys/cabot"&gt;Cabot&lt;/a&gt; 같은 툴을 이용해 수치를 감시하다가 특정 조건에 의해 경고를 보낼 수도 있습니다.&lt;/p&gt;

&lt;p&gt;Graphite와 함께 즐거운 모니터링의 생활화를 도모해보시길!&lt;/p&gt;
</content>
  </entry>
</feed>
