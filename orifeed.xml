<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nacyot의 프로그래밍 이야기</title>
  <subtitle>Nacyot의 프로그래밍 이야기</subtitle>
  <id>http://blog.nacyot.com/</id>
  <link href="http://blog.nacyot.com/"/>
  <link href="http://blog.nacyot.com/orifeed.xml" rel="self"/>
  <updated>2015-12-09T10:40:00+09:00</updated>
  <author>
    <name>nacyot(Daekwon Kim)</name>
  </author>
  <entry>
    <title>증분검색을 통한 텍스트 필터링 도구 페코(Peco) - 명령어 히스토리를 비롯한 셸(shell) 어디서나 증분검색하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-12-09-incremental-search-tool-peco/"/>
    <id>http://blog.nacyot.com/articles/2015-12-09-incremental-search-tool-peco/</id>
    <published>2015-12-09T10:40:00+09:00</published>
    <updated>2016-05-19T17:06:46+09:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/XKk4660.png' /&gt;&lt;p&gt;셸(shell)은 매력적인 도구이지만, 많은 사람들에게 원시적인 도구로 오해받곤 한다. CLI의 대표적인 원시성으로는 각각의 프로그램들이 개별적으로 사용자와 대화하는 대신, 셸을 통해서만 명령이 가능하다는 점을 들 수 있다. 하지만 이러한 점은 커다란 장점이 되기도 한다. 예를 들어 프로그램들이 &lt;code&gt;STDIN&lt;/code&gt;과 &lt;code&gt;STDOUT&lt;/code&gt;만으로 데이터를 주고받을 수 있다. 또한 셸 인터페이스의 개선이 모든 프로그램의 사용성 개선과 직결되기도 한다. 애플리케이션의 단절을 전제로 하는 GUI에서는 이러한 장점을 누리기 어렵다.&lt;/p&gt;

&lt;p&gt;페코(Peco)는 특히 인터페이스를 개선해주는 후자에 해당하는 도구이다. 페코는 개별적으로 사용가능한 인터렉티브 데이터 필터링 도구인 동시에, 셸과 함께 사용하면 셸의 사용성을 개선할 수 있다. 이 글에서는 페코의 기본적인 사용법과 셸의 히스토리 검색과 결합해서 사용하는 방법에 대해서 알아본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='페코(peco)---cli-증분검색도구'&gt;페코(Peco) - CLI 증분검색도구&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/peco/peco"&gt;페코(Peco)&lt;/a&gt;는 강력한 데이터 필터링 도구이다. 달리 말해서 텍스트 증분검색을 통한 필터링 도구라고 할 수도 있다. 원래 같은 목적으로 만들어진 파이썬 기반의 &lt;a href="https://github.com/mooz/percol"&gt;Percol&lt;/a&gt;이라는 도구가 있었으나, 성능이나 멀티 플랫폼 지원을 위해 lestrrat 씨에 의해 고 프로그래밍 언어(Go)로 재구현되었다. 이를 통해 파이썬 없이도 바이너리를 통해 윈도우/리눅스/OSX에서 바로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;이미 익숙할 사람도 있겠지만 있지만 증분검색(Incremental Search)라는 단어가 낯설게 느껴질 수도 있다. 먼저 증분검색이 무엇인지부터 살펴보고 가자. 증분검색도 검색 방법의 하나이다. 좀 더 구체적인 사례를 들자면 증분검색은 키워드를 통해서 검색 결과를 얻는 것보다는 키워드를 입력하는 과정에서 검색엔진이 입력에 따라 보여주는 자동완성 결과가 있다. 즉, 검색어를 입력하는 과정에서 점진적으로 검색을 수행하는 방법을 이야기한다. 예를 들어 최종적으로 &lt;code&gt;apple&lt;/code&gt;라는 검색을 하기 위해서 a를 먼저 입력한다. 그러면 a에 매칭이 되는 모든 단어가 검색이 된다. 다음으로 ap를 입력하면 ap에 매칭이 되는 모든 단어가 검색이 된다.&lt;/p&gt;

&lt;p&gt;증분검색은 이미 널리 사용되고 있으며, 좋은 인터페이스의 대표적인 사례로 꼽힌다. 검색어 자동완성과 애플리케이션 런처는 물론 대부분의 웹브라우저와 텍스트 에디터들이 이러한 기능을 지원하고 있다. 웹브라우저에서는 파이어폭스가 선구적으로 이러한 기능을 지원했다. 웹 페이지 상에서 찾기 도구를 사용하면 사용자의 입력에 따라 웹 페이지에서 매치하는 모든 부분이 하이라이트된다. 이 기능이 얼마나 강력하냐면, 필자를 비롯해 단지 이러한 기능 때문에 파이어폭스를 사용하는 사람들이 있었을 정도다. 이해를 돕기 위해 간단한 예제를 보고 넘어가자.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/MrqjF6Y.png" alt="파이어폭스 - 에 증분검색"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/EyPs1BM.png" alt="파이어폭스 - 에서 증분검색"&gt;&lt;/p&gt;

&lt;p&gt;이러한 검색 방법은 디지털 매체에서 글을 읽는 방법 자체를 바꿔놓을 정도로 강력하다. Peco는 바로 이러한 증분검색을 통한 텍스트 검색과 필터링을 셸에서 사용하도록 지원해준다.&lt;/p&gt;

&lt;p&gt;그럼 이제 직접 설치하고, 사용해보자.&lt;/p&gt;

&lt;h2&gt;&lt;a name='설치'&gt;설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/peco/peco/releases"&gt;Peco 릴리즈 페이지&lt;/a&gt;에서는 플랫폼 별로 실행가능한 바이너리 파일을 압축 파일 형태로 제공한다. 이를 다운받아 적절한 위치에 압축을 풀어서 사용하면 된다. 예를 들어 Mac OS X를 사용하고 있다면 다음과 같이 설치한다(어디서든 경로 지정없이 실행하고 싶다면 &lt;code&gt;$PATH&lt;/code&gt; 상의 디렉터리로 적절히 복사하거나 링크를 걸어야한다).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://github.com/peco/peco/releases/download/v0.3.5/peco_darwin_amd64.zip
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unzip peco_darwin_amd64.zip
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 외에도 OS X의 brew나 윈도우즈의 choco와 같은 패키지 관리자를 사용한 설치도 지원하고 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Mac&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;OS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;X&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;tap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;peco&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;peco&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;peco&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Windows&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="nl"&gt;c:&lt;/span&gt;&lt;span class="o"&gt;\&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;choco&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;peco&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치가 정상적으로 끝났다면, 명령어가 있는지 확인해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;peco --version
&lt;/span&gt;&lt;span id="line-2"&gt;peco: v0.3.5
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='기본적인-사용법'&gt;기본적인 사용법&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;페코는 표준 출력을 넘겨받아서 증분검색을 해준다. 예를 들어 OSX의 시스템 로그를 출력해서 페코에 넘겨줄 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /var/log/systom.log &lt;span class="p"&gt;|&lt;/span&gt; peco
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실행하면 다음과 같은 화면을 볼 수 있다. 이 상태에서 글자를 입력하면 증분검색을 해나간다. 다음과 같이 글자를 완성해나감에 따라 조금씩 검색이 되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/M99a3Av.png" alt="Peco 실행"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/egjdr3n.png" alt="Peco - fi 검색"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/PVjNj8Q.png" alt="Peco - firefox 검색"&gt;&lt;/p&gt;

&lt;p&gt;여러 키워드를 동시에 검색하는 것도 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/bAcyPpH.png" alt="Peco - 다중 키워드 검색"&gt;&lt;/p&gt;

&lt;p&gt;또한 ctrl + r 키로 검색 모드를 바꿀 수 있다. 검색 모드로는 IgnoreCase, CaseSensitive, SmartCase 등을 지원하며, Regexp 모드에서는 정규표현식을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/uvvaPUh.png" alt="Peco - 정규표현식 검색"&gt;&lt;/p&gt;

&lt;p&gt;이런 식으로 로그를 빠르고 쉽게 필터링할 수 있으며, 최종적으로 원하는 결과를 선택하면 표준출력으로 출력해준다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='ps로-프로세스-찾아서-종료하기'&gt;ps로 프로세스 찾아서 종료하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;peco로 필터링된 결과를 다른 프로세스의 표준입력으로 넘겨줄 수 있다. 이를 통해서 다양한 작업이 가능하다. 다음 예제는 peco로 원하는 프로세스를 찾아서 프로세스 ID를 출력하는 예제이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ps -ef &lt;span class="p"&gt;|&lt;/span&gt; peco &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/8JzE1AO.png" alt="Peco - 프로세스 탐색"&gt;&lt;/p&gt;

&lt;p&gt;chorme 프로세스들을 검색해본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/4n5caT3.png" alt="Peco - chrome 검색"&gt;&lt;/p&gt;

&lt;p&gt;ctrl + space로 다중 선택을 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/dVh3BFd.png" alt="Peco - 다중 선택"&gt;&lt;/p&gt;

&lt;p&gt;다중 선택이 된 상태에서 엔터를 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/Sbz1kgS.png" alt="Peco - 실행 결과"&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 선택한 프로세스 ID 값들이 출력된 것을 알 수 있다. 그럼 프로세스 종료까지 하려면 어떻게 해야할까? 이렇게 선택한 값들을 &lt;code&gt;kill&lt;/code&gt; 명령어의 인자로 넘겨주면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ps -ef &lt;span class="p"&gt;|&lt;/span&gt; peco &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs &lt;span class="nb"&gt;kill&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='페코를-통한-명령어-히스토리-검색'&gt;페코를 통한 명령어 히스토리 검색&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p lang="ko" dir="ltr"&gt;bash에서 Ctrl-R을 누르면 이전에 입력했던 명령어 중에 prefix 검색을 할 수 있다. 이거 알고 나서 삶이 많이 편해졌음&lt;/p&gt;&amp;mdash; Taeho Kim (@needkoolquality) &lt;a href="https://twitter.com/needkoolquality/status/662967984093200385"&gt;2015년 11월 7일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p lang="ko" dir="ltr"&gt;In bash, &amp;#39;ctrl-r&amp;#39; searches your command history as you type (여태 이걸 몰랐다.)&lt;/p&gt;&amp;mdash; Park Jinwoo (@park_jinwoo) &lt;a href="https://twitter.com/park_jinwoo/status/486780447951572992"&gt;2014년 7월 9일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p lang="ko" dir="ltr"&gt;bash &amp;lt;CTRL-R&amp;gt; 이 좋은 걸 이제 알다니..&lt;/p&gt;&amp;mdash; Namhoon Kim (@yanhkim) &lt;a href="https://twitter.com/yanhkim/status/480955791931752449"&gt;2014년 6월 23일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p lang="ko" dir="ltr"&gt;유닉스 사용자를 위한 팁 : bash 에서 ctrl + R 을 누르면 command를 history에서 인터랙티브하게 찾을 수 있다. reverse-i-search 라고 함. 진작에 알았으면 좋았을 걸 -_-&lt;/p&gt;&amp;mdash; Park, SeongHoon (@replicax) &lt;a href="https://twitter.com/replicax/status/22244837325"&gt;2010년 8월 27일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p lang="ko" dir="ltr"&gt;유닉스 터미널에서 ctrl+r하니까 신세계가!&lt;/p&gt;&amp;mdash; 의심의 눈 (@Daliot) &lt;a href="https://twitter.com/Daliot/status/508955885838675969"&gt;2014년 9월 8일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;reverse-i-search&lt;/code&gt;가 좋다는 간증은 여기저기서 볼 수 있습니다만... 페코는 더더더더 개에에엥장합니다.&lt;/p&gt;

&lt;p&gt;ctrl + r 기본 기능 대신에 페코로 명령어 히스토리를 검색에 사용하고, 선택한 명령어를 바로 실행할 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='osx-zsh에서-페코로-명령어-히스토리-검색하고-실행하기'&gt;OSX zsh에서 페코로 명령어 히스토리 검색하고 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서는 &lt;a href="http://qiita.com/uchiko/items/f6b1528d7362c9310da0"&gt;uchiko 님의 스크립트&lt;/a&gt;를 사용한다. 이 스크립트는 zsh과 oh-my-zsh을 지원한다. 다음 스크립트를 &lt;code&gt;source&lt;/code&gt;에 넘겨주면 작동한다. (셸에 익숙하지 않은 사람들을 위해 좀 더 친절하게 설명하자면, 아래 스크립트를 &lt;code&gt;~/.zsh/peco-history.zsh&lt;/code&gt;로 저장한다음 &lt;code&gt;~/.zshrc&lt;/code&gt; 파일 마지막에 &lt;code&gt;source ~/.zsh/peco-history.zsh&lt;/code&gt;을 추가하고 셸을 재실행하면 적용될 것이다)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="vg"&gt;qiita&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;uchiko&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;items&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;f6b1528d7362c9310da0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;uchiko&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="vg"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;peco&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;history&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;tac&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;which&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;tac&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="vg"&gt;tac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tac&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="vg"&gt;tac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tail -r&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;BUFFER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="vg"&gt;history&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="vg"&gt;eval&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="vg"&gt;tac&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="vg"&gt;peco&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="vg"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$LBUFFER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$#&lt;/span&gt;&lt;span class="vg"&gt;BUFFER&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;zle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;screen&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="vg"&gt;zle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;peco&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;history&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="vg"&gt;bindkey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;^r&amp;#39; peco-select-history&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 ctrl + r을 누르면 단순 prefix 검색 대신 이전에 사용했던 명령어를 필터링할 수 있는 peco가 실행된다. 이 글을 작성하면서 입력했던 명령어들이 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/lk83q8j.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;나는 머리가 나빠서 docker 같이 긴 명령어는 못 외운다. 적당히 기억을 더듬어 이전에 실행했던 redis 이미지 사용법을 증분검색해본다(이 화면은 뜨지 않을 것입니다. 이 명령어는 제가 이전에 실행을 했던 명령어입니다)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/sPl6nA5.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;빙고! 이걸 선택하면 이 명령어를 바로 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/7ck36vT.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;멋져라!&lt;/p&gt;

&lt;h3&gt;&lt;a name='osx-bash에서-명령어-히스토리-검색하고-실행하기'&gt;OSX bash에서 명령어 히스토리 검색하고 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;bash에서는 &lt;a href="http://qiita.com/yungsang/items/09890a06d204bf398eea"&gt;yungsang 님의 스크립트&lt;/a&gt;를 사용하면 편리하다. zsh과 마찬가지로 정상 작동되는 것으로 확인 완료.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="vg"&gt;qiita&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;yungsang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;items&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="il"&gt;09890&lt;/span&gt;&lt;span class="vg"&gt;a06d204bf398eea&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;yungsang&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="vg"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ignoredups&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="vg"&gt;peco&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;history&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;NUM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;history&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;wc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;FIRST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="il"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;NUM&lt;/span&gt;&lt;span class="il"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="vg"&gt;FIRST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;peco-history&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;history&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="vg"&gt;HISTCMD&lt;/span&gt;&lt;span class="il"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No history&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;fc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="vg"&gt;FIRST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="vg"&gt;nr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;uniq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;nr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;sed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;E&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;s/^[0-9]+[[:blank:]]+//&amp;#39; | peco | head -n 1)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$CMD&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Replace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;peco-history&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="vg"&gt;CMD&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;history&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="vg"&gt;CMD&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;osascript&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Send&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;UP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;keystroke&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;console&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;osascript&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;tell application &amp;quot;System Events&amp;quot; to keystroke (ASCII character 30)&amp;#39; &amp;amp;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Uncomment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;below&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;execute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;here&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;directly&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="vg"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;eval&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="vg"&gt;CMD&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-30"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;peco-history&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-31"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;history&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="vg"&gt;HISTCMD&lt;/span&gt;&lt;span class="il"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-32"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-33"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-34"&gt;&lt;span class="vg"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;&amp;quot;\C-r&amp;quot;:&amp;quot;peco-history\n&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='셸-히스토리-설정에-대한-작은-팁'&gt;셸 히스토리 설정에 대한 작은 팁&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;페코와 명령어 히스토리의 조합은 명령어 암기보다 느슨한 연상을 통한 점진적 학습을 도와준다. 여러 명령어를 활용하고, 시도하고, 공부하는 동안에 명령어나 옵션을 완전히 외우지 않더라도 증분검색을 통해서 내가 입력했던 명령어들을 찾아갈 수 있는 것이다. 이러한 접근을 지원하기 위헤서 미리 셸 히스토리 저장 개수를 늘려놓으면 좋다. zsh에서는 &lt;code&gt;~/.zshrc&lt;/code&gt;에 다음 두 행을 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="il"&gt;100000000&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="vg"&gt;SAVEHIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="il"&gt;100000000&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bash에서는 &lt;code&gt;~/.bashrc&lt;/code&gt;에 다음 두 행을 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="vg"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="ko"&gt;&lt;p lang="ko" dir="ltr"&gt;한국어로 된 percol 소개 문서가 하나도 없다니!&lt;/p&gt;&amp;mdash; nacyot (@nacyo_t) &lt;a href="https://twitter.com/nacyo_t/status/476909836181835777"&gt;2014년 6월 12일&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;(percol/peco 글을 쓰려고 한지 1년 넘게 걸린 것 같은... 기분 탓)&lt;/p&gt;

&lt;p&gt;개인적으로 증분검색 인터페이스를 정말 좋아한다. 파이어폭스의 검색 기능도 정말 충격적이었고, OSX의 스팟라이트를 비롯한 다양한 런처들, 그리고 Emacs의 명령어 인터페이스 확장(anything, helm)들은 한 번 써보면 절대로 버릴 수 없다. 그 이유는 이러한 인터페이스가 정확한 기억에 의존하기보다 지속적인 학습을 통한 느슨한 연상을 활용하기 때문이다. 사람마다 다르겠지만 Emacs 사용자라고 단축키 수백개씩 외우거나 하진 않는다. 오히려 이런 인터페이스가 없는 GUI 도구들이 훨씬 더 정확한 기억에 의존한다. Peco는 이러한 이 매력적인 증분검색 인터페이스를 셸 위에서 사용할 수 있도록 구현한 도구이다. &lt;/p&gt;

&lt;p&gt;이 글에서는 Peco의 정말 간단한 사용법만을 소개했다. 그럼에도 그 강력함이 충분히 전달되었을 것이다(희망사항). &lt;a href="https://github.com/peco/peco"&gt;peco/peco&lt;/a&gt;에 가면 더욱 다양한 예제와 기능들에 대한 설명을 찾아볼 수 있다. Peco는 기본적으로 표준 입출력을 활용한 도구이기 때문에 파이프라는 셸의 철학에도 잘 부합하고 입출력을 주고받는 곳에서라면 어디에서라도 활용 방법은 무궁무진하다.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>루비와 익명 함수 -  블록(block), Proc(절차, procedure) 객체와 람다(lambda) 함수의 차이 이해하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-12-07-ruby-proc-and-lambda/"/>
    <id>http://blog.nacyot.com/articles/2015-12-07-ruby-proc-and-lambda/</id>
    <published>2015-12-08T01:36:00+09:00</published>
    <updated>2016-05-19T17:06:46+09:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/TVYlS05.png' /&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://ruby-korea.github.io/advent-calendar/"&gt;루비 Advent Calendar 2015&lt;/a&gt; 7일차로 참석합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;루비에서 가장 특징적이고 많이 사용되는 문법이 바로 블록입니다. 루비에서는 블록 문법을 통해서 하나의 익명 함수를 손쉽게 함수에 넘겨줄 수 있습니다. 대부분의 반복문을 비롯해 인터페이스로도 자주 사용되기 때문에 익명 함수 개념을 이해하는 것은 매우 중요합니다. 블록을 사용하지 않더라도 루비에서는 명시적으로 익명 함수 객체를 생성할 수 있습니다. 익명 함수를 만드는 두 가지 대표적인 방법이 바로 Proc 객체와 &lt;code&gt;lambda&lt;/code&gt;문을 사용하는 것입니다. 이 글에서는 루비에서의 익명 함수와 Proc 객체와 &lt;code&gt;lambda&lt;/code&gt;문으로 생성된 익명 함수의 차이점을 살펴보겠습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='proc(절차,-procedure)-객체-이해하기'&gt;Proc(절차, Procedure) 객체 이해하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;루비에서는 Proc 클래스를 통해서 익명 함수를 생성할 수 있습니다. 여기서 Proc은 Procedure의 줄임말로 어떤 처리 과정(절차)을 담고있다는 의미입니다. Proc 또한 일반적인 루비 클래스와 다르지 않으므로 Prow.new 메서드를 통해서 객체를 생성할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="c1"&gt;# ArgumentError: tried to create Proc object without a block&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설명이 조금 까다로워집니다만, &lt;code&gt;Proc.new&lt;/code&gt; 메서드는 블록을 통해서 절차(루비 표현식들)를 넘겨받습니다. 설명이 귀찮아진다는 의미는 블록 자체도 익명 함수기 때문입니다. 루비에서는 메서드 뒤에  &lt;code&gt;do...end&lt;/code&gt; 형태로 블록이라는 특별한 문법을 사용할 수 있습니다. &lt;code&gt;do&lt;/code&gt;와 &lt;code&gt;end&lt;/code&gt; 사이에는 루비 표현식이 들어갑니다. 이 &lt;code&gt;do...end&lt;/code&gt; 사이의 표현식들은 실행되지 않은 채로 익명 함수로서 그대로 실행하는 메서드에 전달됩니다. 여기서는 이 부분에 대해서는 다루지 않을 것입니다. 어쨌건 루비 표현식들이 고스란히 함수로 전달된다는 것이 중요합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Proc.new&lt;/code&gt;도 블록을 통해서 익명 함수를 전달받습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Proc:0x007f99f12c6bf8@(pry):2&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Proc.new&lt;/code&gt;는 Proc 객체를 반환합니다. 이 생성자 메서드는 넘겨받은 익명 함수에 대해서 어떠한 일도 하지않고, 익명 함수를 그대로 저장을 합니다. 앞서 말했듯이 블록에 쓰여진 루비 표현식은 곧바로 실행되지 않습니다. 따라서 &lt;code&gt;puts &amp;#39;Hello, world!&amp;#39;&lt;/code&gt;는 출력되지 않습니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='proc-객체-실행하기'&gt;Proc 객체 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이 Proc 객체는 이제 원하는 시점에 언제라도 실행할 수 있습니다. 다음 예제에서는 이 Proc 객체를 변수에 대입하고 실행하는 방법을 살펴보겠습니다. Proc 객체를 실행하는 방법은 크게 3가지가 있습니다. 첫번째는 &lt;code&gt;.call()&lt;/code&gt; 메서드 호출입니다. 제일 명확한 표현법입니다. 이외에도 &lt;code&gt;.()&lt;/code&gt;과 &lt;code&gt;[]&lt;/code&gt;와 같은 조금은 낯설게 보이는 방법도 있습니다. 기본적으로 &lt;code&gt;.call()&lt;/code&gt;과 다르지 않습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c1"&gt;# 여기서는 편의상 do...end 대신 { }을 사용했습니다&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c1"&gt;# Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="c1"&gt;# Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="c1"&gt;# Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;형태는 다르지만 모두 같은 방식으로 동작하는 걸 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;파이썬이나 자바스크립트 같은 언어를 사용해왔다면 이런 표현이 거슬릴 지도 모릅니다. 자바스크립트에서는 익명 함수와 기명함수의 실질적인 차이가 없습니다. 따라서 자바스크립트에서는 아래의 두 방법으로 함수를 선언한 결과가 실질적으로 같습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c1"&gt;// 일반적인 함수 선언&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello1&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c1"&gt;// 익명 함수를 사용한 함수 선언&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hello2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;함수를 호출하는 방법도 같습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nx"&gt;hello1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="c1"&gt;// Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="nx"&gt;hello2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c1"&gt;// Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이는 루비와는 명백히 다릅니다. 위의 루비 예제에서는 익명 함수(Proc 객체)를 proc에 대입했습니다만, 함수처럼 직접 호출하는 것은 불가능합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="c1"&gt;# NoMethodError: undefined method `a&amp;#39; for main:Object&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬이나 자바스크립트에서는 함수 이름으로 접근하면 함수 자체에 접근할 수 있고 이를 직접 호출할 수 있지만 루비에서는 그렇지 않습니다. NoMethodError 예외가 발생하는 이유는 간단합니다. 말그대로 p라는 이름으로 정의된 함수가 존재하지 않기 때문입니다. 이 이유를 이해하기 위해서는 루비의 메서드 호출 방식을 이해할 필요가 있습니다만, 여기서는 익명 함수와 기명 함수가 존재하는 공간이 다르다는 정도에서 넘어가겠습니다.&lt;/p&gt;

&lt;p&gt;이 주제에 대해서는 &lt;a href="http://blog.nacyot.com/articles/2014-12-17-diffrence-of-ruby-and-python/"&gt;루비와 파이썬에서 함수 호출과 함수 참조에 대한 차이&lt;/a&gt;에서 좀 더 자세히 다루고 있으니 참고해주시기 바랍니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='블록'&gt;블록&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;블록은 엄밀히 말하면 Proc 객체는 아닙니다(이에 대해서는 뒤에서 설명합니다). 단, 메서드 선언시에 &lt;code&gt;&amp;amp;&lt;/code&gt; 연산자를 통해서 블록을 명시적으로 Proc 객체로 받아올 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="s1"&gt;end&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="c1"&gt;# Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='proc'&gt;proc&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Kernel#proc 메서드도 있습니다. 이 메서드는 &lt;code&gt;Proc.new&lt;/code&gt;와 같습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c1"&gt;# Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='proc-객체와-람다(lambda)'&gt;Proc 객체와 람다(lambda)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;흥미롭게도(그리고 혼란스럽게도) 루비에는 &lt;code&gt;lambda&lt;/code&gt;라고 하는 Proc 객체를 생성하는 또 다른 방법이 존재합니다. 먼저 &lt;code&gt;lambda&lt;/code&gt;를 통해서 Proc 객체를 만들어보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c1"&gt;# Proc&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="c1"&gt;# Hello, world!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;루비 1.9부터는 신택스 슈가인 &lt;code&gt;-&amp;gt;&lt;/code&gt;를 사용할 수도 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;왜 &lt;code&gt;lambda&lt;/code&gt;가 존재하는 걸까요? 람다라는 표현을 거슬러 올라가면 람다 대수가 나옵니다. 람다 대수는 알론조 처치에 의해 만들어진 수학 체계입니다. 이 체계가 흥미로운 것은 하나의 인자를 받는 함수들만을 사용하면서, 튜링 컴플리트하다는 점입니다. 즉, 완전히 수학적이면서 튜링 머신에서 가능한 모든 계산이 가능하다는 의미입니다. 단, 여기서 &lt;code&gt;lambda&lt;/code&gt;라는 표현은 엄밀한 의미에서 수학적인 표현이라기보다는 루비 이전의 언어들에서 익명 함수를 의미할 때 사용해오던 관용구라고 이해하는 게 좋습니다. 루비에서는 이렇게 생성된 객체가 일반적인 Proc 객체보다 좀 더 함수답게 작동한다는 차이점을 가지고 있습니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='proc#lambda?-를-사용한-lambda-여부-확인'&gt;Proc#lambda? 를 사용한 lambda 여부 확인&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 본격적으로 차이점을 알아버기 전에 일반적인 Proc 객체와 &lt;code&gt;lambda&lt;/code&gt;로 만들어진 객체를 구분하는 방법을 살펴보겠습니다. Proc 객체의 &lt;code&gt;lambda?&lt;/code&gt; 메서드로 &lt;code&gt;lambda&lt;/code&gt;로 생성된 함수인지를 확인할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda?&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nb"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda?&lt;/span&gt;     &lt;span class="c1"&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda?&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda?&lt;/span&gt;       &lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 일반적인 메서드를 객체화해서 Proc 객체로 변환하면 lambda Proc 객체가 됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;hello_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="n"&gt;hello_method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda?&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;더 자세한 내용은 &lt;a href="http://ruby-doc.org/core-1.9.3/Proc.html#method-i-lambda-3F"&gt;루비 문서&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='인자-검사-방식의-차이'&gt;인자 검사 방식의 차이&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;그 첫 번째 차이점으로 &lt;code&gt;lambda&lt;/code&gt;로 만들어진 Proc 객체는 인자 개수를 엄격하게 검사합니다. 일반적으로 블록에서는 블록 인자라는 독특한 방법으로 인자를 받습니다. 여기서는 하나의 인자를 받는 Proc 객체를 만들고, 인자 개수를 바꿔가며 실행해보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, #{name}!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c1"&gt;# Hello, !&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="c1"&gt;# Hello, Jack!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="c1"&gt;# Hello, 1!&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정의에서는 하나의 인자를 사용하지만, 인자 개수가 달라지더라도 에러가 발생하지 않습니다. 이런 점에서 Proc 객체는 이름 그대로 &lt;strong&gt;절차&lt;/strong&gt;만 저장된 객체라고 할 수 있습니다. 반면  &lt;code&gt;lambda&lt;/code&gt;로 만든 Proc 객체는 다르게 작동합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c1"&gt;# 신택스 슈가를 사용할 때는 다음과 같이 정의합니다&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="c1"&gt;# ArgumentError: wrong number of arguments (0 for 1)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="c1"&gt;# hello, Jack!&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="c1"&gt;# ArgumentError: wrong number of arguments (5 for 1)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자를 넘기지 않거나 더 많은 인자를 넘긴 경우 &lt;code&gt;ArgumentError&lt;/code&gt; 예외가 발생한 것을 볼 수 있습니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='return-작동-방식의-차이'&gt;return 작동 방식의 차이&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;proc&lt;/code&gt;과 &lt;code&gt;lambda&lt;/code&gt;의 또 다른 차이 점은 &lt;code&gt;return&lt;/code&gt;의 작동방식입니다. 먼저 일반적은 Proc 객체가 동작하는 방식을 살펴보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;return_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="c1"&gt;# LocalJumpError: unexpected return&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;밖에서 Proc 객체를 넘겨받으면 &lt;code&gt;LocalJumpError&lt;/code&gt; 예외를 발생시킵니다. 이는 &lt;code&gt;return&lt;/code&gt;이 어떤 맥락에서 해석되어야하는 지가 불분명하기 때문입니다.(Proc 객체? 아니면 Proc 객체를 실행하는 문맥?)&lt;/p&gt;

&lt;p&gt;다음은 밖에서 넘겨받는 대신 안에서 Proc 객체를 생성하는 예제입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_two&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="n"&gt;return_two&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="c1"&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 1을 반환합니다. 놀랍게도 Proc 객체의 &lt;code&gt;return&lt;/code&gt; 문이 &lt;code&gt;return_two&lt;/code&gt;의 &lt;code&gt;retrun&lt;/code&gt;으로 실행된 것을 알 수 있습니다. 이런 의도로 Proc 객체를 쓰는 일은 아마 거의 없을 듯 합니다.&lt;/p&gt;

&lt;p&gt;그럼 이번에는 &lt;code&gt;lambda&lt;/code&gt;로 만든 Proc 객체를 실행해보죠&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;return_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="c1"&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 2를 반환했습니다. 좀 더 자세히 살펴보기 위해서 &lt;code&gt;p.call&lt;/code&gt;의 반환값을 출력해보겠습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="n"&gt;return_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="c1"&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;p.call&lt;/code&gt;의 반환값이 1이 되는 것을 알 수 있습니다. 이를 통해서 &lt;code&gt;lambda&lt;/code&gt; 함수에서 &lt;code&gt;return&lt;/code&gt; 문을 사용하면 Proc 객체, 즉 익명 함수 자체의 반환이 되는 것을 알 수 있습니다. 따라서 &lt;code&gt;lambda&lt;/code&gt; 함수에서는 1을 반환하고, &lt;code&gt;return_two&lt;/code&gt; 함수에서는 의도한 대로 넘겨준 lambda Proc 객체와는 무관하게 2를 반환합니다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='break-작동-방식의-차이'&gt;break 작동 방식의 차이&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;break&lt;/code&gt;도 &lt;code&gt;return&lt;/code&gt;과 비슷한 차이가 있습니다. Proc 객체에서 break를 사용하면 LocalJumpError 예외를 발생시킵니다. &lt;code&gt;return&lt;/code&gt; 문의 경우와 마찬가지입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c1"&gt;# 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="c1"&gt;# LocalJumpError: break from proc-closure&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;반면에 lambda를 사용하면 break는 lambda Proc 객체 안으로 한정됩니다. 따라서 반복문 안에서 아무런 영향도 끼치지 않고 &lt;code&gt;i==2&lt;/code&gt; 조건을 만족할 때 lambda 안에서 break가 실행될 뿐입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c1"&gt;# 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='블록과-proc-객체의-차이'&gt;블록과 Proc 객체의 차이&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;블록은 Proc과 비슷하지만 엄밀히 말하면 Proc 객체와는 조금 다릅니다. 블록은 메서드와 결합된 문맥에서만 존재하기 때문에 이를 Proc 객체로 만들기는 어렵습니다. 다음 예제에서는 반복자를 통해서 break가 어떻게 다르게 작동하는 지를 살펴봅니다. 블록에서는 break가 정상적으로 작동합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c1"&gt;# 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 정확히 같은 일을 하는 Proc 객체를 넘겨줍니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="c1"&gt;# 2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="c1"&gt;# LocalJumpError: break from proc-closure&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LocalJumpError가 발생합니다. 이는 넘겨진 함수가 클로저로 실행되는데, 그 안에서 break를 사용하고 있기 때문에 발생하는 예외입니다. 순수한(?) 블록에서는 이 문제를 적절히 해결해주는 걸 알 수 있습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;여기까지 배운 지식을 활용하면 다음과 같은 이상해보이는 구문이 정상적인 루비 구문이라는 걸 이해할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="c1"&gt;# nil&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이게 요지는 아닙니다만, 루비에서 블록과 익명 함수 개념에 대한 이해는 아무리 강조해도 지나치지 않습니다. 많이들 어려움을 느끼는 부분도 Proc과 lambda처럼 비슷해보이면서도 다른 것들입니다. 특히 proc이나 lambda는 Kernel 클래스에 있어서 문법처럼 보이기도 하고 함수처럼 보이기도 하고 분명 헷갈리기 쉬운 요소입니다. 나아가 lambda에는 &lt;code&gt;-&amp;gt;&lt;/code&gt;라는 신택스 슈가도 있고, 이러한 익명 함수를 실행시키는 방법으로는 &lt;code&gt;.call()&lt;/code&gt;, &lt;code&gt;.()&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;와 같이 세 가지나 준비되어 있습니다. 처음 보면 당황스러울 수도 있지만 루비에서는 다들 많이 사용되는 표현이므로 확실히 익혀두는 게 좋습니다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='참고자료'&gt;참고자료&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.ruby-lang.org/ja/2.2.0/method/Kernel/m/proc.html"&gt;Ruby 2.2.0 リファレンスマニュアル(레퍼런스 매뉴얼) - module function Kernel.#lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ruby-doc.org/core-2.2.0/Proc.html"&gt;ruby-doc.org - Proc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>프로그래밍은 왜 어려운가 - 벤 프라이(Ben Fry)의 Distellamap으로 생각해보는 다익스트라의 'GOTO문은 해롭다(Go To Statement Considered Harmful)'</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-12-02-programming-is-difficult/"/>
    <id>http://blog.nacyot.com/articles/2015-12-02-programming-is-difficult/</id>
    <published>2015-12-03T00:10:00+09:00</published>
    <updated>2016-05-19T17:06:46+09:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/xwuGSjK.pngg' /&gt;&lt;p&gt;최근에 현대카드 디자인 라이브러리에서 열린 &lt;a href="http://design.hyundaicardcapital.com/771"&gt;Designing with Data&lt;/a&gt; 전시를 보고 왔는데 그 중에서 Ben Fry의 &lt;a href="http://benfry.com/distellamap/"&gt;Distellamap&lt;/a&gt;이라는 작품이 유독 인상깊었습니다.&lt;/p&gt;

&lt;p&gt;이 작품은 Atari 2600 게임 코드(어셈블리) 전체를 한 평면에 놓고 코드가 점프하는 지점들을 연결한 작품입니다. 얼핏 봐도 알 수 있지만 프로그램 내에서도 아주 많은 선들로 연결되어있습니다. 프로그램은 선형적으로 실행되지 않는다는 걸 노골적으로 보여주고 있죠.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;개인적으로 &lt;strong&gt;프로그래밍은 왜 어려운가&lt;/strong&gt;라는 주제에 관심이 있는데, 이 작품은 프로그램의 실행 로직을 사람이 쫓아갈 수 없는 프로세스의 본질적인 비선형성을 잘 보여주고 있습니다. 제가 CS 전공이 아니라 정확하지는 않을 수 있지만, 이는 GOTO이라는 아주 저수준의 제어구조에서 오는 특징이기도 합니다. 실제로 현대적인 프로그래밍 언어들인 GOTO와 같은 저수준 제어구조를 의도적으로 배제하는 대신에 함수, 반복문, 조건문과 같은 고수준의 제어 추상화 구문을 제공합니다.&lt;/p&gt;

&lt;p&gt;프로그래머들은 대개 GOTO문은 나쁘다고 배우는데, 그 이유까지 생각해보기는 쉽지 않습니다. 저는 distellamap이 보여주는 GOTO의 비선형성을 보면서 GOTO가 왜 나쁜지 다시 한 번 생각해보았습니다. GOTO의 가장 큰 특징은 비선형성에 있다고 생각했는데, 사실 고수준의 제어문을 도입한다고 하더라도 프로세스의 비선형성은 전혀 사라지지 않는다는 사실을 깨달았습니다.&lt;/p&gt;

&lt;p&gt;제가 내린 결론은 이렇습니다. GOTO는 비선형성 때문에 나쁜 게 아니라 섬세하지 않기 때문에 나쁩니다. GOTO는 어떤 지점에서라도 어디로라도 갈 수 있습니다. 반면에 고수준 제어구조에서는 점프할 수 있는 곳이 엄격하게 한정됩니다. 또한 콜스택을 통해서 깊이라는 개념도 가지고 있습니다. 즉, 정도의 차이는 있지만 GOTO도 고수준 제어문도 비선형적인 프로세스로 실행된다는 사실 자체는 다르지 않습니다.&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;다익스트라의 악명 높은(?) &lt;a href="http://www.u.arizona.edu/%7Erubinson/copyright_violations/Go_To_Considered_Harmful.html"&gt;Go To Statement Considered Harmful&lt;/a&gt;는 한 구절 한 구절 주옥 같은데, 흥미로운 구절 하나를 인용해볼까합니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My second remark is that our intellectual powers are rather geared to master static relations and that our powers to visualize processes evolving in time are relatively poorly developed. For that reason we should do (as wise programmers aware of our limitations) our utmost to shorten the conceptual gap between the static program and the dynamic process, to make the correspondence between the program (spread out in text space) and the process (spread out in time) as trivial as possible.&lt;/p&gt;

&lt;p&gt;내 두번째 주장은 우리의 지적 능력은 정적인 관계에 더 잘 들어맞고, 시간에 따른 진행과정을 시각화하는 능력은 상대적으로 덜 발달했다는 점이다. 이러한 이유로 우리는 (자신의 한계를 알고 있는 현명한 프로그래머로서) 정적인 프로그램과 동적인 프로세스 사이의 간극을 줄이기 위해 최선을 다해야 하며, 이를 통해 프로그램(텍스트 공간에 흩뿌려진)과 (시간에 흩뿌려진) 진행과정 사이를 가능한 일치시켜야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기서 다익스트라는 아주 명시적으로 정적인 프로그램과 동적인 프로세스 사이의 갭에 대한 이야기를 하고 있습니다. 저는 프로그램과 프로세스가 각각 프로그래밍의 인간적인 면과 기계적인 면에 대응한다고 봅니다. 즉 프로그램은 인간의 사고 방식에 대응하며, 프로세스는 컴퓨터의 실행 방식에 대응합니다. GOTO 조차도 이미 충분히 추상화되어있는 형태라 컴퓨터의 실행방식보다는 인간의 사고 방식에 훨씬 더 가깝습니다. 따라서 프로그래밍이 어려운 가장 근본적인 이유는 인간의 사고 방식과 프로그램의 실행 모델이 전혀 다르기 때문이 아닐까요.&lt;/p&gt;

&lt;p&gt;더욱 흥미로운 점이 있습니다. 프로그래밍 언어는 이러한 추상화된 제어구조를 더 섬세하게 다룰 수 있는 형태로 발전해나가고 있는데, 문제는 사실 그러한 이상적인 추상화는 사람들의 일반적인 사고 흐름에서 빗겨나 있습니다. 제가 앞서 말한 인간의 사고 방식은 엄밀히 말하면 사람들의 일반적인 사고의 흐름이라기보다는 아주 이상적인 잘 추상화된 사고 방식에 가깝습니다. 결국에 다익스트라가 말한 것에 덧붙여 한 가지 분열이 더 발생합니다. 우리는 프로그래밍을 이해하기 위한 세가지 접근방식에 대해 생각해볼 필요가 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;사람들의 일반적인 사고 방식&lt;/li&gt;
&lt;li&gt;(텍스트 상에서) 프로그래밍 언어에서 추구하는 이상적인 추상화를 구현하기 위한 사고방식&lt;/li&gt;
&lt;li&gt;(시간 상에서) 기계가 실제로 작동한 방식&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;안타깝게도 이 세가지는 자동적으로 일치하지 않습니다. 오히려 이것들을 화해시키는 거의 불가능에 가깝습니다.&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/bombasstard/status/659870778410823680"&gt;&lt;img src="http://i.imgur.com/g1ipwVA.png" alt="Java Callstack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이러한 분열은 디버깅이 프로그래밍과 다른 형태의 사고 방식을 요구하는 데서도 드러납니다. 디버깅은 프로그래밍의 연장선 상에 있다고 여겨지곤 합니다. 하지만 디버깅은 프로그래밍과는 아주 다른 능력을 요구합니다. 프로그래머는 정적인 프로그램을 작성하지만 디버깅을 통해서 프로세스가 실행되는 중간 과정에 개입하게 됩니다. 디버깅은 콜스택을 추적하기 때문에 내가 작성한 프로그램이 실제로 얼마나 깊은 위치에서 실행되는 지를 보여줍니다. 일반적으로 소스 코드 위에서 한 단계 두 단계 정도를 쫓아가도 수십단계를 쫓아가며 프로그램의 구조를 이해하는 경우는 드뭅니다. 그런데 바로 그런 방식이 컴퓨터(프로세스)가 프로그램을 실행하는 방식입니다. 즉 사고의 흐름과 컴퓨터의 실행 모델의 접점은 내가 만든 프로그램의 실행 구조를 내가 직접 쫓아가는 게 아주 어렵다는 걸 깨닫게 해줍니다. 더욱이 이상적인 추상화를 위해 구축된 복잡한 구조는 프로그램 실행이 아주아주 깊은 구조에서 이루어지는 경향을 만듭니다.&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;흥미롭게도 고수준 프로그래밍 언어를 사용하는 프로그래머들은 디버깅을 제외하면 컴퓨터의 실행 방식에 개입할 일이 거의 없습니다. 그래서 이런 영역은 대개 언어가 위임 받아서 다뤄집니다. 문제는 이상적인 추상화를 다루는 두번째 영역으로 이관됩니다. 실제로 루비를 만든 &lt;a href="http://wiki.nacyot.com/documents/programming_language_for_beginner/"&gt;마츠는 초심자를 위한 프로그래밍 언어&lt;/a&gt;라는 글에서 두번째 관점에서 초심자들의 한계를 이야기하면서 초심자들이 선호하는 언어에 대해서 이야기합니다. 이전에 짧게 언급했던 Clojure를 만든 리치 히키의 &lt;a href="http://www.slideshare.net/evandrix/simple-made-easy"&gt;Simple made easy&lt;/a&gt;라는 발표도 두번째 관점에서 함수형 프로그래밍 언어가 어떻게 객체지향적 언어보다 우월한지를 보여줍니다. 특히 객체지향과 함수형 프로그래밍이라는 두 개의 큰 맥락은 두 번째 영역이 어떻게 발전해왔는지를 잘 보여줍니다. 어쨌건 공통된 특징은 고수준 언어일수록 언어적인 표현성과 섬세하게 나눠지는 비선형적인 코드 구성을 중요시한다는 점입니다. 프로세스는 여전히 가동되지만 가려져버리고, 저수준 언어에서보다 덜 중요한 것으로 여겨집니다.&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;컴퓨터가 이해할수 있는 코드는 어느 바보나 다 작성할 수 있다. 좋은 프로그래머는 사람이 이해할 수 있는 코드를 짠다 - 마틴 파울러&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로그래밍은 왜 어려운가, 좀 더 쉬운 부분부터 짚어보면 추상화가 어렵기 때문입니다. 이 글에서 이야기했던 개념들로 설명하자면 인간의 일반적인 사고방식과 프로그래밍적 추상화가 다르기 때문입니다. 이는 수학이 어려운 이유와도 비슷하다고 생각합니다. 하지만 수학적인 사고방식에 가까운 함수형 프로그래밍 언어보다는 절차형 언어에 기반한 객체지향 언어가 업계에서 지배적이었던 걸 생각해보면 이러한 추상화에 대한 감각이 반드시 수학적인 사고방식을 요하는 것은 아닙니다. 분명한 건 어쨌거나 객체지향이든 람다 칼큘러스든 일반인들이 이해하기는 곧바로 이해하기는 굉장히 비직관적이고 어려운 개념이라는 점입니다. 이를 위해서 많은 사람들이 비유를 시도하지만, 대개는 혼란을 더하거나 중요한 개념에 대한 잘못된 인식을 심어주곤 합니다.&lt;/p&gt;

&lt;p&gt;하지만 추상화가 어려운 건 프로그래밍이 어려운 일부밖에 설명하지 못 합니다. 저는 오랫동안 프로그래밍을 해왔지만 많은 부분에 있어서 컴퓨터는 내가 제어할 수 없다는 공포심 같은 것을 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;다시 distellamap으로 돌아가보겠습니다. 추상화가 어려움에도 불구하고 프로그래밍이 어려운 좀 더 본질적인 이유는, distellamap이 더 잘 보여주고 있다고 생각합니다. 프로그래머가 작성한 프로그램과 컴퓨터가 실행하는 프로세스는 일치하지 않습니다. 이러한 관계는 어지간해서는 보기 힘듭니다. 왜냐면 추상화에서 가장 중요한 교훈은 항상 최소한의 블록을 독립적으로 프로그래밍하는 일이기 때문입니다. 프로그래머는 각각의 블록이 자신의 역할만 제대로 하도록 프로그램을 작성합니다.&lt;/p&gt;

&lt;p&gt;그래서 처음 프로그래밍을 배우는 사람에게 가르치기 어려운 것 중에 하나가 바로 어디에 무엇이 위치해야하는 지입니다. 왜 어렵냐면 코드가 프로그램 상에서 어디에 있는 지는 별로 중요하지 않기 때문입니다. 어디에 있어야 하는지, 어떤 순서여야 하는지 이런 당위성에 대한 주장은 모두 거짓말입니다. 코드는 어디에 있어도 무차별합니다(단, 이 주장은 대개 사실이지만 폭력적입니다). 심지어 프로젝트 디렉터리 구조는 그저 관습에 불과합니다. 대부분의 현대적인 프로그래밍 언어 해석기들은 파일의 위치 같은 것은 크게 신경 쓰지 않습니다. 사실 메모리에 로드되고 나면 프로세스는 파일 시스템의 위치나 순서에 구애받지 않기 때문이라는 게 더 적절한 표현일지도 모릅니다. 순서나 구조에 어떠한 당위성도 없기 때문에 사람들이 어려워하는 건 어떻게 보면 당연한 일입니다. 프로그래머들 역시 그렇게 해야된다는 건 알지만 왜 그렇게 해야하는 건지는 설명하기 어렵습니다. distellamap이 드러내는 프로세스의 비선형적 실행 구조는 이러한 잘 설명되지 않는 공백들을 보여줍니다.&lt;/p&gt;

&lt;p&gt;안타깝게도 프로그램을 작성한 사람의 사고방식과 프로세스가 실행되는 방식이 자동적으로 일치하는 일은 영원히 일어나지 않겠죠. 그렇기 때문에 다시 한 번 다익스트라의 교훈을 되새길 필요가 있지 않을까요.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;we should do (as wise programmers aware of our limitations) our utmost to shorten the conceptual gap between the static program and the dynamic process&lt;/p&gt;

&lt;p&gt;이러한 이유로 우리는 (자신의 한계를 알고 있는 현명한 프로그래머로서) 정적인 프로그램과 동적인 프로세스 사이의 간극을 줄이기 위해 최선을 다해야 하며, 이를 통해 프로그램(텍스트 공간에 흩뿌려진)과 (시간에 흩뿌려진) 진행과정 사이를 가능한 일치시켜야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;a name='관련된-글'&gt;관련된 글&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.u.arizona.edu/%7Erubinson/copyright_violations/Go_To_Considered_Harmful.html"&gt;Go To Statement Considered Harmful by Edsger W. Dijkstra (1968)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://david.tribble.com/text/goto.html"&gt;Go To Statement Considered Harmful:
A Retrospective by David R. Tribble (2005)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Considered_harmful"&gt;Considered harmful&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.phpschool.com/gnuboard4/bbs/board.php?bo_table=old_talkbox&amp;amp;wr_id=289198"&gt;마이크로소프트웨어 창간 20주년 기념 :: 고전을 찾아서 ①  - 다익스트라, 왜 goto에 시비(?)를 거는가? &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;P.S. 리뷰해주신 &lt;a href="https://raccoonyy.github.io/"&gt;raccoony&lt;/a&gt; 님 감사합니다.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>기계의 한계를 결정짓는 요소. CPU 클럭 혹은 인간의 욕망</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-11-22-the-limitiation-of-computer/"/>
    <id>http://blog.nacyot.com/articles/2015-11-22-the-limitiation-of-computer/</id>
    <published>2015-11-22T23:02:00+09:00</published>
    <updated>2016-05-19T17:06:46+09:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;p&gt;&amp;quot;미래는 이미 와있다. 단지 널리 퍼져있지 않을 뿐이다.&amp;quot; - 윌리엄 깁슨&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;지인과 이야기하다가 발전 사관에 대한 이야기가 나왔다. 발전사관은 인류의 본성이 아니냐고 할 만큼 사람들의 마음 안에 강하게 자리잡고 있다. 이것은 사회 문화와 역사에 대해서만 그런 것은 아니다. &lt;em&gt;기술&lt;/em&gt; 역시 발전한다. 적어도 나는 사회 / 문화 / 역사의 발전사관은 처음부터 잘못되었을 가능성이 아주 높다고 생각하는 사람 중 하나이다. 그런 것들은 단지 놓여진 상황이 변할 뿐이지, 명확한 지표도 없는 것을 &amp;#39;발전&amp;#39;으로 묘사하는 것부터가 이미 이데올로기적이다. 그런데 기술은 어떤가. 기술이 CPU의 클럭 속도나 단위시간당 생산량 따위로 치환해서 설명될 수 있다면 기술은 분명 발전해왔다고 말할 수 있을 것이다. 적어도 그 말에는 동의하지 않을 수 없다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;그런데 기술이 충분히 발전하기 시작하면서 기묘한 일이 벌어지기 시작한다. 기술의 발전은 이미 우리가 그 기술의 발전을 인지하는 정도를 넘어서버렸다. 과학과 기술의 발견과 발전은 인류가 해낼 수 있는 능력의 관점에서 사람들이 향유하고 있는 기술을 뛰어넘어버린 것이다. 이것은 단순히 최첨단 기술이 상용화에 몇 년에 걸린다는 이야기만을 지적하는 것은 아니다. 상용화에 걸리는 시간은 기술적 완결성과 일반인들이 기술을 이용할 수 있는 사이의 시간적 거리에 관한 이야기다. 그러한 시간적 거리는 시간에 의해서 작동적으로 매워지고 말 것이다. 마치 세탁기, 냉장고, 컬러 TV, 컴퓨터, 스마트폰이 시간이 지나면서 인류에게 있어서 빼놓을 수 없는 보편적이고 필수적인 물건이 된 것과도 비슷하다. 그렇다면 기술의 발전이 인지를 넘어섰다는 의미는 무엇일까.&lt;/p&gt;

&lt;p&gt;나는 그 의미가 바로 &amp;quot;미래는 이미 와있다&amp;quot;라는 윌리엄 깁슨의 이야기와 맞닿아 있다고 생각한다. 이러한 역전이 가장 극적으로 일어난 분야가 바로 개인용 컴퓨터이다. 컴퓨터를 하나의 계산 기계로 바라보자면 컴퓨터가 단위시간 당 계산해낼 수 있는 양은 전적으로 컴퓨터의 하드웨어적인 성능에 달려있는 문제이다. 하지만 이미 개인용 컴퓨터가 수십년 전의 슈퍼 컴퓨터의 계산 능력을 넘어서있다고 얘기할 때, 모든 개인용 컴퓨터의 소유자들이 그러한 컴퓨터의 성능을 최대로 활용하고 있는 것은 아니다. 바로 컴퓨터로 가능한 일들이 우리의 인지를 뛰어넘어버린 것이다. 달리 말하면 우리는 컴퓨터의 역량을 최대한 활용할 만큼 컴퓨터에게 많은 일을 시킬 수 없다. 여기서 이야기하는 바를 좀 더 정식화해보자면, 컴퓨터의 능력이라는 것을 바라보던 기존의 시각은 &lt;code&gt;f(컴퓨터의 하드웨어적 성능)&lt;/code&gt;이다. 즉, 컴퓨터의 한계는 하드웨어적 성능에 의해서 결정되는 함수인 것이다. &lt;code&gt;미래가 와 있다&lt;/code&gt;는 말은 &lt;code&gt;컴퓨터의 하드웨어적 성능&lt;/code&gt;은 이미 우리가 상상할 수 있는 모든 일을 처리하고도 충분할 만큼 컴퓨터 성능이 좋아졌다는 것을 의미힌다. 적어도 대부분의 사람들에게는 컴퓨터의 하드웨어적 성능이 부족해서 내가 하고 싶은 걸 처리할 수 없다는 말은 아무런 의미가 없다. 만약 정말로 그렇다고 할지라도, 하드웨어를 교체하면 대부분의 경우는 해결가능하다.&lt;/p&gt;

&lt;p&gt;더 이상 컴퓨터의 한계를 나타내는 &lt;code&gt;f(x)&lt;/code&gt;라는 함수가 있을 때 x라는 독립 변수는 컴퓨터의 하드웨어적 성능이 아니다. 그리고 그렇기 때문에 &amp;quot;단지 멀리 퍼져있지 않을 뿐이다&amp;quot;. 이 한계를 결정짓는 것은 일단 하드웨어가 아니다. 나는 이 독립변수가 크게 두 가지라고 생각한다. 첫 번째는 인터페이스다. 이미 컴퓨터로 하는 일은 단순 계산을 벗어났으며 우리가 어떤 일을 처리하고자 할 때는 그에 대한 적절한 인터페이스를 가진 소프트웨어를 필요로 한다. 문제는 처리하고자 하는 일과 이 일을 처리할 적절한 소프트웨어가 없을 때 기본적으로 컴퓨터의 한계는 하드웨어의 한계가 아닌 인터페이스의 한계에서 결정된다. 컴퓨터는 만능 머신이지만, 이 만능 머신이라는 뜻이 반드시 모든 일을 처리하기 위한 적절한 인터페이스를 갖추고 있음을 의미하지는 않는다.&lt;/p&gt;

&lt;p&gt;두번째는 인간적인 요소다. 대표적으로 디지털 리터러시라는 표현이 있다. 사람이 컴퓨터가 작동하는 방식을 얼마나 잘 이해하는 지, 그리고 어떤 일을 어떤 소프트웨어로 처리할 지에 대한 적절한 지식을 가지고 있어야만 컴퓨터의 활용 능력을 극대화할 수 있기 때문이다. 이러한 기초적인 문제조차도 컴퓨터의 능력을 극도로 떨어뜨리는 아주 치명적인 요소가 되곤 한다. 단순히 디지털 리터러시 뿐만이 아니라, 욕망 또한 중요한 문제이다. 컴퓨터는 스스로 작동하는 기계가 아니다. 컴퓨터가 무엇을 계산하는 지는, 혹은 무엇을 계산해야하는 지는 전적으로 인간에게 달려있다.  인간은 컴퓨터 위에서 오히려 단순 노동으로는 대체될 수 없는 일들을 더 많이 해나가고 있다.&lt;/p&gt;

&lt;p&gt;아직 지저분하지만, 컴퓨터의 한계를 결정짓는 요소를 통해 다시 함수를 정의해보자. 컴퓨터의 능력을 한계짓는 함수는 &lt;code&gt;f(컴퓨터의 하드웨어적 성능)&lt;/code&gt;이 아니라 &lt;code&gt;MIN(하드웨어의 성능, 인터페이스, 인간의 능력과 욕망)&lt;/code&gt;에서 결정된다. 그런데 하드웨어 성능은 이미 충분한 것이라고 가능한다면, &lt;code&gt;MIN(인터페이스, 인간의 능력과 욕망)&lt;/code&gt;으로 표현할 수 있을 것이다. 만약 이 함수가 틀렸고, 기술의 발전이 인간에게 자동적으로 적용되는 거라면 기술 격차라는 것은 결코 생기지 않을 것이다. 그렇다면 기술 격차가 존재하는 게 아니라, 그러한 기술의 혜택을 누리는 정도에 대한 빈부 격차만이 존재할 것이다. 하지만 그 말은 결코 사실이 아니며, 이미 기술 격차라는 것은 아주 선명한 문제이다.&lt;/p&gt;

&lt;p&gt;역설적으로 인간의 의해 기술이 발전하는 것이 아니라, 이미 충분히 발전된 기술의 가능성은 그 자체로서는 존재하지 않고, 인터페이스와 인간의 지식에 의해서 처음으로 그 가능성이 현실로 발현된다.  어쩌면 여기에 기술의 발전 위에서조차, 혹은 그러한 혜택을 충분히 누리면서도 발전사관을 거부할 수 있는 단초가 있을 지도 모른다. 많은 사람들이 &lt;code&gt;기술의 발전&lt;/code&gt;은 당연한 것이라고 생각하지만 사실 컴퓨터의 하드웨어적 성능이 앞으로 계속해서 무한히 늘어난다고 해도 그것이 곧바로 더 큰 능력을 가진다고 말해야할 지는 미지수이기 때문이다. 앨런 케이가 맥루한의 &amp;#39;미디어는 메시지다&amp;#39;라는 말에 영향을 받은 것처럼, 개인용 컴퓨터는 기계적인 계산 기계가 아니라 오히려 미디어에 더 가까운 것이다. 그렇기 때문에 그것을 사용하는 사람이 그 기계를 충분히 내화시키지 못 한다면, 결국에 컴퓨터의 능력은 바로 그 지점에서 제한되어버리고 만다. 그렇기 때문에 미래는 이미 와있고, 널리 퍼지지 못 한 것은 그것을 충분히 내화하지 못 한 사람들에게는 존재하지 않은 세계이기 때문이다. (그래서 넓은 의미에서 해커들은 자신들이 일정부분 가장 진화된 인류라고 생각하고 있을 지도 모른다. 가장 발달된 기술을 향유하기 때문이 아니라 기계의 가장 큰 가능성을 끌어낼 수 있는 사람들이기 때문이다)&lt;/p&gt;

&lt;p&gt;SF 영화를 보면 미래사회에서 충분히 사이보그화된 주인공에게 지식을 주입하는 장면이 나오곤 한다. 사이보그화는 이미 이루어진 것이다. 하지만 단순히 신체를 강화시키는 사이보그를 넘어, 그 안에 숨겨져 있는 기계의 잠재성은 그 사이보그 주체의 지식에 의해서 결정될 수 밖에 없다. 뒤돌아 생각해보면 이러한 지식의 주입이 미디어로서의 미래 세계를 주인공에 내화시키는 일이 아닌가 싶다. 기술을 발전시킴으로서 그 변화가 주인공에게 주어지는 것이 아니라, 기술에 대한 지식을 주입함으로서 기계의 가능성과 인간의 가능성이 동시에 극대화되는 것이다. 기계가 진화한 것이 아니라, 이미 기계는 충분히 진화해있다. 이러한 진화된 기계의 활용을 극대화하기 위해 인간의 지식을 넓힌 것이다. 그러한 미래 사회에서, 그리고 지금 우리가 살아가고 있는 현실에서도 이미 모든 기계는 단말기가 아닌 범용 컴퓨터화되었다.&lt;/p&gt;

&lt;p&gt;집을 생각해보자. 스마트 홈 시스템에서 모든 전자기기는 컴퓨터일 것이다. 컴퓨터는 외부의 다른 컴퓨터나 인간과 소통할 수 있는 인터페이스를 가진다. 하지만 단순히 모든 전자기기가 컴퓨터라는 데서 이야기는 끝나지 않는다. 우리가 그것들과 좀 더 고도의 커뮤니케이션을 하기 위해서는(즉, 내 의사를 전달하기 위해서는) 좀 더 일반적이고 서로 연동가능한 API가 필요하다. 하지만 대부분의 전자 기기들은 이러한 인터페이스를 가지고 있지 않을 뿐더러, 있더라도 독자적인 표준을 따른다. 즉, 모든 전자기기는 컴퓨터이지만 서로 소통하지 못 하고, 외부의 중계 또한 받지 않는다. 그렇기 때문에 스마트 홈 시스템은 각각의 기기들 간의 소통이나 사람과의 소통을 증진하는 방향이 아니라, 하나의 업체가 집 전체를 일괄적으로 설계하고자 하는 유혹을 받기 쉽다. 그것들은 기본적을 기기들 간의 소통을 증진 시키기 위한 개선이다. 간헐적으로 기기들간의 소통이 증진된다고 모든 문제가 해결되지는 않는다. 사람의 욕망은 대개 좀 더 복잡하게 기술되어야한다. 만약 그렇지 못하다면 자동화는 무엇을 위한 것인가? 마치 데스크탑 위에서 애플리케이션 간 자동화를 구축하듯이 전자기기들 간의 워크플로우를 만드는 범용적인 인터페이스가 만들어질 수 있을까? 그리고 그런 인터페이스들은 대개 충분히 복잡할 텐데 사람들은 이 인터페이스를 통해서 자신의 의사를 얼마나 잘 전달할 수 있을까? 나는 단순한 보일러 조작 단말기한테도 매번 내 의사를 전달하는 데 실패하는데 말이다. 모든 기기들은 자신의 역할을 충분히 할 수 있다는 것이 증명되어있다. 이것들을 궁극적으로 다음 단계로 고양 시키는 것은 결국에 인터페이스와 그것을 사용하는 사람의 지식이다. 거꾸로 말하면 이제 컴퓨터 시스템의 한계는 컴퓨터의 연산능력이 아니라 바로 개인의 지식에 의해서 한계 지어진다.&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;바네바 부시가 개인용 컴퓨터의 청사진을 그리는 동안에, 그러한 하드웨어적 장비들은 현실적으로 구현되지 않은 것들이었다. 하지만 그러한 기획은 처음부터 공장-기계들의 가치와는 동떨어진 것이었다. 단위시간당 생산량이란 원래 공장-기계이 가치를 판단한기 위한 지표이다. 그런데 이미 바네바 부시의 기획이 하드웨어적으로 충분히 가능해진 시점에서 바라보자면, 그의 기획이 그랬던 것처럼 개인용 컴퓨터에는 단위시간당 생산량이란 지표가 무엇을 의미하는 지 불분명한 일이 벌어지고 만다. 만약 우리가 개인용 컴퓨터를 이야기하면서 여전히 CPU의 클럭수를 가장 중요한 요소로 생각해왔던 거라면 여전히 그것을 공장-기계로 받아들여왔기 때문이라고 생각한다. 더 빠르고 더 많은 것을 해내는 것은 중요하다. 하지만 지금 가장 빠른 컴퓨터가 수십만배 빠른 컴퓨터가 있더라도 이미지 편집용 소프트웨어가 작동될 수 없다면, 그것보다 수십만배 느려도 이미지 편집용 소프트웨어가 있는 컴퓨터가 나을 수도 있다. 클럭은 인간이 인식할 수 있는 단위가 아니며, CPU는 인간이 직접 접근 가능한 인터페이스도 아니다.&lt;/p&gt;

&lt;p&gt;그래서 흥미롭게도 어느 지점에서부터는 더 이상 기술의 한계는 기술적이지 않고, 사회적이거나, 개인적이다. 인터페이스, 그리고 욕망. 그 순환 과정은 결국에 인간의 문제다. 인터페이스는 우리가 컴퓨터로 무엇을 할 수 있는가를 정의한다. 기계에 대한 지식은 곧 인터페이스에 대한 이해이자, 인터페이스를 확장시킬 수 있는 컴퓨터와 인간이 맞닿게 만들어주는 능력 자체이다. 그리고 결국에 그 위에서 무엇을 하고 싶은가가 우리의 욕망이다. 욕망이 지식을 습득하는 원동력이 되고, 결국에 기계를 이해하는 것이 우리 자신을 이해하는 것이 되고 말았다. 기계의 능력은 이제 사용자의 능력으로 정의된다. 기계의 클럭은 계산을 몇 번 할 수 있는 지를 나타내는 것이 아니라, 그것을 사용하는 인간의 능력이 충분할 때 기계가 최대한 할 수 있는 일의 한계를 의미하는 것이다.&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;실은 모든 도구가 그렇다. 도구의 능력을 한계지우는 건 사용하는 사람이다. 그렇기 때문에 사람들은 단순한 도구조차도 잘 쓰는 사람을 존경심 어린 눈으로 쳐다본다. 명필은 붓을 가리지 않는 말도 그런 맥락에서 이해될 수 있을 것이다. 하지만 문제를 그런 식으로 치환해서는 안 된다. 컴퓨터는 범용적 도구이고, 비유하자면 완성형 니미츠급 항공모함 같은 존재이기 때문이다. 사람의 능력이 도구의 가치를 초월하게 만드는 것이 아니다. 컴퓨터라는 도구는 이미 사람들이 그 한계를 초월할 수 없을 정도로 발전되어 있고(이것은 마치 비행기 조종석의 복잡함 같은 인터페이스의 복잡함에 대한 이야기가 아니다), 그 가치는 사람들이 그것을 어떻게 운용하는 지에 의해서 결정된다. 또한 그 방향성 역시 사람의 욕망에 의해서 결정된다.&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;우리가 필요로 하는 것은 노동을 절감해주는 컴퓨터가 아니라 우리가 해야 할 일을 증가시켜 주는 컴퓨터이다. 즉, 때로는 말장난을 하기도 하고(이것은 맥루한의 생각이다), 이전에는 생각치도 못했던 것을 알려주는 조이스(Joyce)의 가교역할을 하기도 하며(이것은 브라운의 생각이다), 컴퓨터가 우리를 작가에 주목하게 하는 것이 아니라 우리를 작가로 만드는 것이다(나의 생각이다). - 존 케이지&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Serverspec(서버스펙)을 통한 도커 이미지 테스트 자동화</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-06-30-serverspec-with-docker/"/>
    <id>http://blog.nacyot.com/articles/2015-06-30-serverspec-with-docker/</id>
    <published>2015-07-07T10:25:00+09:00</published>
    <updated>2016-05-19T17:06:46+09:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/MyCDEgF.jpg' /&gt;&lt;p&gt;Immutable Infrastructure와 컨테이너로 대표되는 도커(Docker)와 함께 서버 분야에 많은 변화를 가져온 것은 Configuration Management 도구들이었다. 쉐프(Chef), 퍼펫(Puppet), 앤서블(Ansible)로 대표되는 CM 툴들은 독자적인 DSL을 통해서 서버의 이상적인 상태와 그에 다다르는 과정을 선언적으로 기록한다. 그리고 이 기록을 통해서 원하는 서버의 특정 상태를 재현하게 도와준다. 이러한 흐름을 Infrastructure as Code라고 표현하기도 한다. 서버의 코드화, 여기서 한 단계 더 나아가면 또 다른 흥미로운 아이디어를 만나게된다. 서버가 코드라면 소프트웨어를 검증하는 기법들을 똑같이 적용할 수 있지 않을까?&lt;/p&gt;

&lt;p&gt;서버스펙(Serverspec)은 바로 이 질문에 대한 답을 보여주는 도구이다. 이 글에서는 Serverspec을 통해서 도커 이미지를 테스트하는 방법에 대해서 다룬다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='서버스펙(serverspec)을-통한-도커-이미지-테스트'&gt;서버스펙(Serverspec)을 통한 도커 이미지 테스트&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이제 테스트 환경을 마련하고 실제로 테스트를 작성해보도록하자. 서버스펙에는 기본적으로 프로젝트를 초기화를 돕는 &lt;code&gt;serverspec-init&lt;/code&gt;이라는 명령어가 포함되어있다. 여기서는 이 명령어를 사용하지 않고 진행한다. 먼저 루비의 기본적인 구조와 비슷하게 spec 디렉터리를 만들고 그 아래에 테스트 코드를 넣을 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;serverspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;docker&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Gemfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;spec&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;mongodb_image_spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;rb&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;spec_helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;rb&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;디렉터리 구조는 아주 간단한다. 프로젝트 메인 디렉터리 아래에 spec 디렉터리를 만들고 테스트 설정 파일은 &lt;code&gt;spec_helper.rb&lt;/code&gt;와 테스트 파일은 &lt;code&gt;mongodb_image_spec.rb&lt;/code&gt;를 준비한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='도커-이미지-준비'&gt;도커 이미지 준비&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서는 시스템에 도커가 설치되어있다고 가정한다(boot2docker도 무방하며, 실제로 이 글의 내용은 boot2docker를 통해서 테스트되었다). 도커를 통해서 nginx 공식 이미지를 다운로드 받는다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull nginx:latest
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='gemfile을-통한-의존성-관리'&gt;Gemfile을 통한 의존성 관리&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Serverspec을 통한 인프라 테스트는 루비를 기반으로 돌아간다(즉, 시스템에 루비가 설치되어있어야한다). 루비를 테스트를 위해 사용할 의존성 관리를 위해 프로젝트 루트에 다음과 같이 Gemfile을 작성한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://rubygems.org&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="vg"&gt;gem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3e,21ec&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="vg"&gt;gem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;docker-api&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gemfile은 프로젝트의 의존성을 관리하고, 프로젝트 내에서 사용될 실행 가능한 명령어들을 관리하기 위해 사용된다. 이제 의존성을 설치해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle install
&lt;/span&gt;&lt;span id="line-2"&gt;Fetching gem metadata from https://rubygems.org/.......
&lt;/span&gt;&lt;span id="line-3"&gt;Resolving dependencies...
&lt;/span&gt;&lt;span id="line-4"&gt;Using diff-lcs 1.2.5
&lt;/span&gt;&lt;span id="line-5"&gt;Using excon 0.45.3
&lt;/span&gt;&lt;span id="line-6"&gt;...
&lt;/span&gt;&lt;span id="line-7"&gt;Using specinfra 2.36.6
&lt;/span&gt;&lt;span id="line-8"&gt;Using serverspec 2.19.0
&lt;/span&gt;&lt;span id="line-9"&gt;Using bundler 1.7.3
&lt;/span&gt;&lt;span id="line-10"&gt;Your bundle is &lt;span class="nb"&gt;complete&lt;/span&gt;!
&lt;/span&gt;&lt;span id="line-11"&gt;Use &lt;span class="sb"&gt;`&lt;/span&gt;bundle show &lt;span class="o"&gt;[&lt;/span&gt;gemname&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; to see where a bundled gem is installed.
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치가 끝났으면 프로젝트 루트 아래에서 rspec 명령어가 작동하는지 테스트해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rspec --version
&lt;/span&gt;&lt;span id="line-2"&gt;3.3.1
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;잘 동작한다!&lt;/p&gt;

&lt;h3&gt;&lt;a name='spec_helper.rb'&gt;&lt;code&gt;spec_helper.rb&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;spec_helper.rb&lt;/code&gt;는 프로젝트에 적용되는 RSpec 설정파일이다. &lt;code&gt;:host&lt;/code&gt;에는 테스트에 사용할 적절한 도커 서버의 주소를 입력한다. &lt;code&gt;:docker_image&lt;/code&gt;는 테스트할 대상을 의미하며, &lt;code&gt;:os&lt;/code&gt;는 테스트 대상이 되는 서버의 운영체제를 의미한다. 서버스펙은 이 옵션을 통해서 테스트에서 사용하는 DSL을 추상화한다. &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt;에는 적절한 사용자 이름을 넣어준다. 여기서는 OSX에서 boot2docker를 사용하고 있다고 가정하고 있으며 ssl key가 다른 곳에 있다면 적절한 위치를 지정해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;serverspec&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="vg"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="vg"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="vg"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;https://192.168.59.103:2376&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="vg"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;docker_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;tutum/mongodb&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="vg"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;os&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;family:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="vg"&gt;Docker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;client_cert:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;/Users/&amp;lt;USERNAME&amp;gt;/.boot2docker/certs/boot2docker-vm/cert.pem&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;client_key:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;/Users/&amp;lt;USERNAME&amp;gt;/.boot2docker/certs/boot2docker-vm/key.pem&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;ssl_ca_file:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;/Users/&amp;lt;USERNAME&amp;gt;/.boot2docker/certs/boot2docker-vm/ca.pem&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;scheme:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;https&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;read_timeout:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;3600&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="vg"&gt;Excon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;ssl_verify_peer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='mongodb_image_spec.rb'&gt;&lt;code&gt;mongodb_image_spec.rb&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이 파일에는 테스트 코드를 작성한다. 테스트 코드는 RSpec 고유의 DSL로 작성되며, 서버스펙은 서버를 검증하기 위한 도구들을 제공한다. 아마 루비나 RSpec에 친숙하다면, 이 코드를 보고 어떤 내용인지 바로 알 수 있을 것이며, 안 써봤어도 직관적으로 이해할 수 있을 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;spec_helper&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;tutum/mongodb Image&amp;#39; do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;/etc&amp;#39;) do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be_directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;mongod&amp;#39;) do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be_running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;port&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be_listening&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기에는 3개의 테스트가 기술되어있다. 서버스펙에서는 리소스라는 개념을 사용해서 테스트를 수행한다. 먼저 첫번째 테스트에서 쓰인 리소스는 &lt;code&gt;file&lt;/code&gt;이다. 이를 통해서 &lt;code&gt;/etc&lt;/code&gt;가 디렉터리인지 검증한다. 그 다음으로 두번째 테스트에서는 &lt;code&gt;process&lt;/code&gt; 리소스를 통해서 &lt;code&gt;mongod&lt;/code&gt; 프로세스가 실행중인지 검증한다. 마지막으로 &lt;code&gt;port&lt;/code&gt; 리소스를 통해서 27017 포트가 대기중인지 검증한다. 서버스펙은 서버를 검증하기 위한 다양한 리소스를 제공하고 있으며 더 많은 리소스들에 대해서는 &lt;a href="http://serverspec.org/resource_types.html"&gt;서버스펙 공식 사이트&lt;/a&gt;에서 찾아볼 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='rspec으로-테스트-실행하기'&gt;rspec으로 테스트 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이제 테스트 코드도 모두 작성했으니, 테스트가 정상적으로 작동하는지 검증하는 일만 남았다. 프로젝트 메인에서 테스트를 실행해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rspec .
&lt;/span&gt;&lt;span id="line-2"&gt;tutum/mongodb IMage
&lt;/span&gt;&lt;span id="line-3"&gt;  File &lt;span class="s2"&gt;&amp;quot;/etc&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;    should be directory
&lt;/span&gt;&lt;span id="line-5"&gt;  Process &lt;span class="s2"&gt;&amp;quot;mongod&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;    should be running
&lt;/span&gt;&lt;span id="line-7"&gt;  Port &lt;span class="s2"&gt;&amp;quot;27017&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    should be listening
&lt;/span&gt;&lt;span id="line-9"&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;Finished in 6.18 seconds &lt;span class="o"&gt;(&lt;/span&gt;files took 1.14 seconds to load&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="m"&gt;3&lt;/span&gt; examples, &lt;span class="m"&gt;0&lt;/span&gt; failures
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모든 테스트가 성공했다! 테스트를 통해서 &lt;code&gt;/etc&lt;/code&gt; 디렉터리가 존재하고, &lt;code&gt;mongod&lt;/code&gt; 프로세스가 실행되고 있으며, &lt;code&gt;27017&lt;/code&gt; 포트가 대기중임을 알 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='테스트-주도-인프라스트럭처(test-driven-infrastructure)'&gt;테스트 주도 인프라스트럭처(Test Driven Infrastructure)&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;여기까지 서버스펙을 통해서 이미 생성되어져 있는 도커 이미지를 검증하는 방법에 대해서 살펴보았다. 그렇다면 소프트웨어 개발과 마찬가지로 &lt;code&gt;Dockerfile&lt;/code&gt;을 만드는 과정 전체를 테스트해보는 것은 어떨까?&lt;/p&gt;

&lt;p&gt;물론 이것도 가능하다. 여기서는 redis 이미지를 직접 만들어가면서 테스트를 수행해보자.&lt;/p&gt;

&lt;h3&gt;&lt;a name='디렉터리-구조'&gt;디렉터리 구조&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;serverspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;docker&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Gemfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Guardfile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;spec&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;rb&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;spec_helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;rb&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='spec_helper.rb'&gt;&lt;code&gt;spec_helper.rb&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 spec_helper.rb은 앞선 예제를 그대로 사용하되, 이미지 부분을 주석처리 한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="c"&gt;# set :docker_image, &amp;#39;nacyot/redis&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='nacyot_redis_image_spec.rb'&gt;&lt;code&gt;nacyot_redis_image_spec.rb&lt;/code&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Redis 서버가 정상적으로 작동하는 지 확인하기 위한 테스트를 준비한다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;spec_helper&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;nacyot/redis Image&amp;#39; do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Docker:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;build_from_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;.&amp;#39;);&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;docker_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;/etc&amp;#39;) do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be_directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;redis-server&amp;#39;) do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be_installed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;/usr/local/bin/redis-server&amp;#39;) do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be_executable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;redis-server&amp;#39;) do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be_running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;port&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be_listening&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="vg"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 작성한 테스트들 역시 기본적인 rspec 문법으로 작성되었으며 서버스펙의 리소스들을 사용하고 있다.&lt;/p&gt;

&lt;p&gt;주목할만한 부분이 있다. 이전에는 없었던 &lt;code&gt;before(:all)&lt;/code&gt; 절이 추가되었는데, 이 부분은 테스트를 실행하기에 앞서 한 번 실행된다. 여기서 하는 일은 프로젝트 루트의 &lt;code&gt;Dockerfile&lt;/code&gt;로부터 도커 이미지를 생성하고, 테스트 대상 이미지를 동적으로 지정하는 일이다(이 때 이미지 이름이 아니라, 빌드로부터 반환되는 이미지 ID를 사용한다). 이를 통해서 별도로 빌드 명령을 수행하지 않아도, 테스트를 수행할 때마다 자동적으로 빌드를 하고 테스트를 수행한다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='guard를-통한-자동테스트'&gt;Guard를 통한 자동테스트&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;이번 프로젝트에서는 Guard를 통해서 Dockerfile과 spec 파일의 변경을 감지하고 테스트할 수 있도록 한다. 이를 위해 Gemfile을 다음과 같이 수정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="vg"&gt;gem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;serverspec&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="vg"&gt;gem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;docker-api&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="vg"&gt;gem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;guard&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="vg"&gt;gem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;guard-rspec&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로젝트 루트에서 추가한 의존성을 설치해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 아래와 같이 Guardfile을 작성한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bundle exec rspec&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;  &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guard/rspec/dsl&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;  &lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guard&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Dsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;spec_files&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;(%&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;{^&lt;/span&gt;&lt;span class="n"&gt;Dockerfile$&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spec/nacyot_redis_image_spec.rb&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 Guard 파일의 내용은 spec 디렉터리 아래의 파일이나 dockerfile이 변경되었을 때 테스트를 자동적으로 실행하도록 한다.&lt;/p&gt;

&lt;p&gt;이제 별도의 터미널을 실행해서 프로젝트 루트에서 다음 명령어를 실행하면 파일이 변경될 때마다 테스트가 자동적으로 실행된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;bundle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;guard&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nl"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="il"&gt;47&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="il"&gt;59&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;INFO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Guard:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;RSpec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;running&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nl"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="il"&gt;47&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="il"&gt;59&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;INFO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Guard&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;now&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;watching&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;/Users/.../docker-with-serverspec&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='첫번째-이터레이션-:-이미지-생성하기'&gt;첫번째 이터레이션 : 이미지 생성하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 빈 Dockerfile을 만들고 베이스 이미지를 지정해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ubuntu:&lt;/span&gt;&lt;span class="mf"&gt;14.04&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Guard에서 이 변화를 알아채고 자동적으로 테스트를 수행할 것이다. 앞서 이야기했듯이 테스트가 실행되면 자동적으로 이미지가 빌드되므로 빌드는 별도로 수행하지 않아도 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;directory&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;installed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;FAILED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;executable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;FAILED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;FAILED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;listening&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;FAILED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="vg"&gt;Finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5.23&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;took&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.30381&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="nl"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;failures&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="vg"&gt;Failed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;examples:&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="vg"&gt;rspec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb:&lt;/span&gt;&lt;span class="il"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;installed&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="vg"&gt;rspec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb:&lt;/span&gt;&lt;span class="il"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/redis-server&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;executable&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="vg"&gt;rspec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb:&lt;/span&gt;&lt;span class="il"&gt;22&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;running&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="vg"&gt;rspec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb:&lt;/span&gt;&lt;span class="il"&gt;26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;listening&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째 테스트만 성공하고, 나머지 테스트가 실패했다! &lt;/p&gt;

&lt;h3&gt;&lt;a name='두번째-이터레이션-:-apt-get을-통해서-redis-설치하기'&gt;두번째 이터레이션 : apt-get을 통해서 redis 설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dockerfile 뒤에 다음 내용을 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="kr"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;sed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;s/archive.ubuntu.com/ftp.daum.net/g&amp;#39; /etc/apt/sources.list&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="kr"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;\&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;server&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자동적으로 테스트가 실행된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;directory&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;installed&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;executable&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;FAILED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;listening&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;FAILED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="vg"&gt;Finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.42&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;took&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.29263&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="nl"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;failures&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="vg"&gt;Failed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;examples:&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="vg"&gt;rspec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb:&lt;/span&gt;&lt;span class="il"&gt;22&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;running&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="vg"&gt;rspec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;nacyot_redis_image_spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb:&lt;/span&gt;&lt;span class="il"&gt;26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;listening&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;redis-server 패키지의 설치를 검증하는 두번째, 세번째 테스트도 통과했다!&lt;/p&gt;

&lt;h3&gt;&lt;a name='세번째-이터레이션-:-redis-실행하기'&gt;세번째 이터레이션 : redis 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dockerfile 뒤에 다음 내용을 추가해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;server&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에도 자동적으로 테스트가 실행된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="vg"&gt;nacyot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;Image&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;directory&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;installed&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;executable&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;running&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="vg"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="vg"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;listening&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="vg"&gt;Finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;6.94&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;took&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.29334&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="nl"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;failures&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테스트가 모두 통과했다! 이를 통해 이 이미지로부터 레디스(redis) 서버가 정상적으로 실행되는 것을 보장할 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='테스트-코드'&gt;테스트 코드&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;여기서 사용한 프로젝트와 테스트 코드는 &lt;a href="https://github.com/nacyot/serverspec_tutorial"&gt;serverspec_tutorial&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;인프라가 정상적인 상태에 있다는 것을 증명하는 것은 매우 중요한 주제이다. 그럼에도 불구하고 이러한 테스트는 대부분 자동화되어있지 않다. Serverspec은 원래 ssh를 통해서 서버의 상태나 CM 툴과 함께 사용을 목적으로 만들어진 도구이다. 이 훌륭한 도구는 단순히 기존 서버 환경 뿐만 아니라 빌드를 통해 완성된 이미지를 구성하는 도커와 같은 컨테이너 시스템을 테스트하는 데도 적격이다. 이를 통해 소프트웨어 테스트 뿐만 아니라 소프트웨어를 탑재한 이미지가  배포되기 전에 정상적으로 작동하는지, 필요한 파일들을 제대로 포함하고 있는지까지 함께 검증하는 것이 가능하다. 또한 서버가 코드처럼 다뤄질 수 있다면, 테스트 자동화는 물론 저장소와 연동해서 CI를 통해 지속적인 통합 역시 가능해진다.&lt;/p&gt;

&lt;p&gt;이제 딱딱해 보이고 하드웨어에 더 가깝게 취급되던 인프라가 이제 정말로 소프트웨어 영역에 좀 더 가까워지고 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='보충'&gt;보충&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;테스트 과정에서 도커 공식 이미지에서 주로 이용되는 debian 환경에 대해서는 포트 리스닝 테스트가 정상적으로 작동하지 않았다. 아직 일부 환경에서 몇몇 리소스들이 정상적으로 작동하지 않을 가능성이 있다. 다음 글에서는 서버스펙에서 도커 테스트가 어떻게 실행되는 지 살펴본다.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>엘라스틱서치(elasticsearch)에 한글 형태소 분석기 은전한잎(eunjeon) 적용하기</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-06-13-eunjeon-with-elasticsearch/"/>
    <id>http://blog.nacyot.com/articles/2015-06-13-eunjeon-with-elasticsearch/</id>
    <published>2015-06-13T06:05:00+09:00</published>
    <updated>2016-05-19T17:06:46+09:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/DxnlLeu.jpg' /&gt;&lt;p&gt;엘라스틱(elastic)에서 개발한 엘라스틱서치(elasticsearch)는 루씬 기반의 검색 서버이다. 설치도 간편하며 기본 설정으로 사용해도 충분히 강력하지만 기본적으로 한국어 분석을 지원하지 않는다. 예를 들어 &amp;quot;아버지가 방에 들어간다&amp;quot;라는 한국어 문장을 인덱스해도 &amp;quot;아버지&amp;quot;로는 검색이 안 되고, 반드시 &amp;quot;아버지가&amp;quot;로 검색해야만 결과에 출력된다. 이는 엘라스틱서치의 기본 토크나이저가 공백이나 특수문자만으로 단어들을 분리하기 때문이다. 이러한 문제를 해결하기 위해서는 n-gram 분석이나, 형태소 분석과 같은 인덱스를 추가로 지원해야한다. 이 글에서는 일본어 형태소 분석기 mecab를 한국어에 맞춰 수정한 은전한잎(mecab-ko)을 통해 엘라스틱서치에서 한국어를 인덱스하는 방법에 대해서 다룬다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='tl;dr'&gt;TL;DR&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Docker를 사용해 한글 형태소 분석기가 적용된 엘라스틱서치를 바로 사용해볼 수 있다. 필요한 경우 (일반적으로 boot2docker 사용할 경우 사용하는 주소인) &lt;code&gt;192.168.59.103&lt;/code&gt; 대신 적절한 주소로 대체한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -p 9200:9200 nacyot/elasticsearch-korean
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XPUT http://192.168.59.103:9200/korean/ -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;settings&amp;quot;: {&amp;quot;index&amp;quot;:{&amp;quot;analysis&amp;quot;:{&amp;quot;analyzer&amp;quot;:{&amp;quot;korean&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;custom&amp;quot;,&amp;quot;tokenizer&amp;quot;:&amp;quot;mecab_ko_standard_tokenizer&amp;quot;}}}}}}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://192.168.59.103:9200/korean/_analyze?analyzer&lt;span class="o"&gt;=&lt;/span&gt;korean&lt;span class="se"&gt;\&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.tokens[] | {token: .token, type: .type}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="c"&gt;# 분석 결과&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-13"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-25"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;INFLECT&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='설치하기'&gt;설치하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;엘라스틱서치에서 한글 형태소 분석기를 사용하려면 은전한잎을 설치할 필요가 있다. 다음 설치 방법은 우분투 14.04 운영체제에 오라클 자바 8 버전과 엘라스틱서치가 설치되었다는 것을 전제로 작성되었다. 은전한잎 플러그인은 엘라스틱서치 1.3 ~ 1.6(2015년 6월 현재 최신버전)에서 사용가능하다. 테스트에 사용한 버전은 1.6이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='은전한잎(mecab-ko)-설치'&gt;은전한잎(mecab-ko) 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 은전한잎을 설치한다. 은전한잎은 일본어 형태소 분석기 mecab를 한국어에 맞게 수정한 프로젝트로 mecab-ko라는 프로젝트 이름을 가지고 있다. 최신버전 및 자세한 내용은 &lt;a href="https://bitbucket.org/eunjeon/mecab-ko"&gt;저장소&lt;/a&gt;를 참고하기 바란다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;의존성&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;automake&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;perl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;essential&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;wget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="vg"&gt;bitbucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;eunjeon&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;downloads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="mf"&gt;-0.996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="mf"&gt;-0.9.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;xvf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="mf"&gt;-0.996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="mf"&gt;-0.9.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;빌드&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;및&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="mf"&gt;-0.996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="mf"&gt;-0.9.2&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;configure&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;check&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;ldconfig&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='mecab-ko-dic-설치'&gt;mecab-ko-dic 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음으로 형태소 분석을 위한 사전을 설치한다. 자세한 내용은 &lt;a href="https://bitbucket.org/eunjeon/mecab-ko-dic/"&gt;저장소&lt;/a&gt;를 참조하기 바란다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;dic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;wget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="vg"&gt;bitbucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;eunjeon&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;dic&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;downloads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;dic&lt;/span&gt;&lt;span class="mf"&gt;-2.0.0&lt;/span&gt;&lt;span class="il"&gt;-20150517&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;xvf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;dic&lt;/span&gt;&lt;span class="mf"&gt;-1.6.1&lt;/span&gt;&lt;span class="il"&gt;-20140814&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;빌드&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;및&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;dic&lt;/span&gt;&lt;span class="mf"&gt;-1.6.1&lt;/span&gt;&lt;span class="il"&gt;-20140814&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;autogen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="vg"&gt;configure&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='mecab-java-설치'&gt;mecab-java 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;다음므로 tagger와 lexicon의 메모리 누수가 해결된 mecab-java 버전을 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;환경&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;변수&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;설정&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;JAVA_TOOL_OPTIONS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;Dfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;UTF8&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;java&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;다운로드&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;opt&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;wget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;googlecode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;files&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;java&lt;/span&gt;&lt;span class="mf"&gt;-0.996&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;xvf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;java&lt;/span&gt;&lt;span class="mf"&gt;-0.996&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;gz&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;빌드&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;및&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;설치&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;java&lt;/span&gt;&lt;span class="mf"&gt;-0.996&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;sed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;s|/usr/lib/jvm/java-6-openjdk/include|/usr/lib/jvm/java-8-oracle/include|&amp;#39; Makefile&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;빌드된&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;파일&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;이동&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;elasticsearch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;실행시&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;참조해주어야&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;함&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;cp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;libMeCab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;so&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;lib&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a name='엘라스틱서치-mecab-ko-플러그인-설치'&gt;엘라스틱서치 mecab-ko 플러그인 설치&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;마지막으로 엘라스틱서치에서 사용할 수 있도록 mecab-ko를 설치한다. &lt;code&gt;&amp;lt;ELASTICSEARCH_PATH&amp;gt;&lt;/code&gt;에는 엘라스틱서치가 설치된 경로를 넣어준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;ELASTICSEARCH_PATH&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="vg"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="vg"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="mf"&gt;-0.17.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="vg"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="vg"&gt;bitbucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;eunjeon&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;lucene&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;analyzer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;downloads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;elasticsearch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;mecab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;ko&lt;/span&gt;&lt;span class="mf"&gt;-0.17.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vg"&gt;zip&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a name='형태소-분석을-통한-한국어-문장-검색'&gt;형태소 분석을 통한 한국어 문장 검색&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;먼저 엘라스틱서치를 앞서 빌드한 &lt;code&gt;mecab-java&lt;/code&gt;를 참조시켜서 실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;elasticsearch -Djava.library.path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/lib
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;한글 분석기가 정상적으로 작동하는 지 확인하기 위해 우선 기본 분석기를 통해서 문장을 분석해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://0.0.0.0:9200/_analyze?pretty&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="c"&gt;# 분석 결과&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;  &lt;span class="s2"&gt;&amp;quot;tokens&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 0,
&lt;/span&gt;&lt;span id="line-10"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 4,
&lt;/span&gt;&lt;span id="line-11"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-12"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 1
&lt;/span&gt;&lt;span id="line-13"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-14"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-16"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 5,
&lt;/span&gt;&lt;span id="line-17"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 7,
&lt;/span&gt;&lt;span id="line-18"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-19"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 2
&lt;/span&gt;&lt;span id="line-20"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;      &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-23"&gt;      &lt;span class="s2"&gt;&amp;quot;start_offset&amp;quot;&lt;/span&gt;: 8,
&lt;/span&gt;&lt;span id="line-24"&gt;      &lt;span class="s2"&gt;&amp;quot;end_offset&amp;quot;&lt;/span&gt;: 12,
&lt;/span&gt;&lt;span id="line-25"&gt;      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;lt;HANGUL&amp;gt;&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-26"&gt;      &lt;span class="s2"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;: 3
&lt;/span&gt;&lt;span id="line-27"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-29"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에 얘기한대로 문장이 &amp;quot;아버지가&amp;quot; 통째로 분석된다. 이렇게 되면 &amp;quot;아버지&amp;quot;로는 이 문장을 검색할 수 없다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;데이터&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;입력&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;XPUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;http://0.0.0.0:9200/default/text/1&amp;#39; -d &amp;#39;{&amp;quot;text&amp;quot;: &amp;quot;아버지가 방에 들어간다&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;아버지&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;XGET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;http://0.0.0.0:9200/default/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;아버지가&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;XGET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;http://0.0.0.0:9200/default/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지가&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;아버지가 방에 들어간다&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-25"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-26"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-27"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-28"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 &lt;code&gt;korean&lt;/code&gt;이라는 이름으로 &lt;code&gt;mecab_ko_standard_tokenizer&lt;/code&gt;가 적용된 인덱스를 생성한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XPUT http://0.0.0.0:9200/korean/ -d &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="s1"&gt;  &amp;quot;settings&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="s1"&gt;    &amp;quot;index&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="s1"&gt;      &amp;quot;analysis&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="s1"&gt;        &amp;quot;analyzer&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="s1"&gt;          &amp;quot;korean&amp;quot;:{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="s1"&gt;            &amp;quot;type&amp;quot;:&amp;quot;custom&amp;quot;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="s1"&gt;            &amp;quot;tokenizer&amp;quot;:&amp;quot;mecab_ko_standard_tokenizer&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="s1"&gt;          }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="s1"&gt;        }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="s1"&gt;  },&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="s1"&gt;  &amp;quot;mappings&amp;quot;: {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="s1"&gt;    &amp;quot;text&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="s1"&gt;      &amp;quot;properties&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="s1"&gt;        &amp;quot;text&amp;quot; : {&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="s1"&gt;          &amp;quot;type&amp;quot; : &amp;quot;string&amp;quot;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="s1"&gt;          &amp;quot;analyzer&amp;quot;: &amp;quot;korean&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="s1"&gt;        }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-21"&gt;&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-23"&gt;&lt;span class="s1"&gt;  }&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-24"&gt;&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 인덱스를 통해서 한국어 문장을 분석해본다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -XGET http://0.0.0.0:9200/korean/_analyze?analyzer&lt;span class="o"&gt;=&lt;/span&gt;korean&lt;span class="se"&gt;\&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;아버지가 방에 들어간다&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.tokens[] | {token: .token, type: .type}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지가&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-5"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;아버지&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-9"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방에&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-13"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;EOJEOL&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;방&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-17"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;  &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;들어간다&amp;quot;&lt;/span&gt;,
&lt;/span&gt;&lt;span id="line-21"&gt;  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;INFLECT&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-22"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 &amp;quot;아버지&amp;quot;나 &amp;quot;방&amp;quot;이 명사로 분석된 것을 알 수 있다. 이렇게 인덱스가 되면 정상적으로 검색이 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;데이터&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;입력&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;XPUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;http://0.0.0.0:9200/korean/text/1&amp;#39; -d &amp;#39;{&amp;quot;text&amp;quot;: &amp;quot;아버지가 방에 들어간다&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;아버지&amp;#39;로 검색&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;XGET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;&amp;#39;http://0.0.0.0:9200/korean/_search&amp;#39; -d &amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;term&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;아버지&amp;quot;}}}}&amp;#39; | jq .hits&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;korean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.15342641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;아버지가 방에 들어간다&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞서 확인한 분석 결과대로 검색이 되는 것을 알 수 있다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;일반적으로 동적으로 풀텍스트 서치를 하는 경우 원하는 결과가 검색될 가능성은 높지만, 매우 비효율적이고 검색 대상이 많아질수록 느려진다. 반면에 이른바 검색엔진으로 분류되는 도구들은 미리 텍스트를 분석해 인덱스를 만들기 때문에 매우 효율적으로 검색이 가능하다. 단, 인덱스를 의도한대로 만들어야만 원하는 검색결과를 얻을 수 있다. 앞서 살펴보았듯이 한글 문장을 검색하고자 한다면, 적절히 형태소 분석을 통한 한글 인덱스와 n-gram 인덱스를 만들어줄 필요가 있다. 엘라스틱서치에서는 analyzer와 mapping을 통해서 각 인덱스와 타입들에 대해서 섬세하고 풍부한 인덱스 기능을 지원하고 있다. 이러한 기능들을 잘 활용한다면 의도한 대로 검색 결과를 얻을 수 있을 것이다.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>주피터(Jupyter) 노트북과 자바스크립트 환경 이해하기 - 주피터 위에서 d3.js를 활용한 시각화</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-05-21-d3js-in-jupyter/"/>
    <id>http://blog.nacyot.com/articles/2015-05-21-d3js-in-jupyter/</id>
    <published>2015-05-21T08:45:00+09:00</published>
    <updated>2016-05-19T17:06:46+09:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/eDpIHJo.jpg' /&gt;&lt;p&gt;기존의 아이파이썬(IPython)에서 이제 본격적으로 주피터 프로젝트로 옮겨가는 과정이 한창 진행중이다. 주피터의 핵심에 대해서는 &lt;strong&gt;&lt;a href="http://blog.nacyot.com/articles/2015-05-08-jupyter-multiple-pythons/"&gt;주피터 다중 커널 개념 이해하기&lt;/a&gt;&lt;/strong&gt;에서 이미 다루었듯이, 파이썬을 비롯한 다양한 언어의 커널을 지원한다는 데 있다. 맥락은 조금 다르지만, 아이파이썬은 이미 훌륭한 자바스크립트 실행환경에서 작동한다는 점에서 주피터 이전에도 이미 멀티 커널을 기본적으로 지원하고 있었다고 할 수 있다. 이 글에서는 이러한 기능을 활용해 주피터 위에서 자바스크립트 코드를 작성 및 실행하고, d3.js 라이브러리를 통해 시각화를 하는 방법에 대해 간단히 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#45432;&amp;#53944;&amp;#48513;-&amp;#47564;&amp;#46308;&amp;#44592;'&gt;&amp;#45432;&amp;#53944;&amp;#48513; &amp;#47564;&amp;#46308;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#45432;&amp;#53944;&amp;#48513;-&amp;#47564;&amp;#46308;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;먼저 주피터를 실행하고 Python3 커널로 노트북을 만든다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/tJdRdHAm.png" alt="Python3 커널 노트북 만들기"&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a name='&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#47588;&amp;#51649;'&gt;&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944; &amp;#47588;&amp;#51649;&lt;a class="anchor-link" href="#&amp;#51088;&amp;#48148;&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#47588;&amp;#51649;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;주피터 노트북에서는 매직 커맨드를 통해 단순히 파이썬 코드를 실행시키는 것 이외에도 다양한 작업을 수행할 수 있도록 도와준다. 이러한 매직 커맨드들은 언어 커널에 정의되어 있으면 파이썬 커널에서는 이를 위해 &lt;code&gt;%%&lt;/code&gt;를 앞에 붙여서 실행한다. 예를 들어 &lt;code&gt;%%html&lt;/code&gt; 매직을 사용하면 html 코드를 직접 결과 블록에 삽입할 수 있다. &lt;code&gt;%%html&lt;/code&gt;을 첫 줄에 작성하고, 아래부터는 html코드를 작성한다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;68번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;html&lt;/span&gt;

&amp;lt;style&amp;gt;
.hello-world{
    border: 1px solid black; 
    width: 300px; 
    height: 50px; 
    font-size: 2em; 
    padding: 0.3em;
}
&amp;lt;/style&amp;gt;

&amp;lt;div class=&amp;#39;hello-world&amp;#39;&amp;gt;
Hello ,html magic!
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_html rendered_html output_subarea "&gt;

&lt;style&gt;
.hello-world{
    border: 1px solid black; 
    width: 300px; 
    height: 50px; 
    font-size: 2em; 
    padding: 0.3em;
}
&lt;/style&gt;

&lt;div class='hello-world'&gt;
Hello ,html magic!
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;위와 같이 html 코드를 바로 사용할 수 있음을 알 수 있다. 더욱 편리한 점은 주피터의 기본 에디터 &lt;a href="http://codemirror.net"&gt;CodeMirror&lt;/a&gt;는 다양한 언어를 지원하기 있어서, 주피터는 이를 통해 자동적으로 HTML 문법을 지원해준다.&lt;/p&gt;
&lt;p&gt;이와 마찬가지로 자바스크립트 코드를 실행할 수 있도록 &lt;code&gt;%%javascript&lt;/code&gt; 매직도 지원하고 있다. 여기서는 먼저 현재 주피터 셀의 결과 요소를 얻어올 수 있도록 헬퍼를 작성해서 사용한다(이 헬퍼가 필요한 이유에 대해서는 뒤에서 자세히 설명한다).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;69번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

window.get_element = function(el){
    if(el){ $(el).html('') }
    return (el !== undefined) ? el[0] : $('script').last().parent()[0];
};

element = undefined;
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;70번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;Hello, js magic!&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

var target = get_element(element)
$(target).append('&lt;div class="hello-world"&gt;Hello, js magic!&lt;/div&gt;')
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;자바스크립트 블록도 정상적으로 출력이 된다. 주피터 노트북은 웹브라우저에서 작동하기 때문에 커널을 통해서 파이썬 코드를 평가하는 것은 물론, 이제 &lt;code&gt;%%html&lt;/code&gt;과 &lt;code&gt;%%javascript&lt;/code&gt; 매직을 통해서 자유롭게 웹 페이지의 요소들을 다룰 수 있다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#54764;&amp;#54140;-&amp;#54632;&amp;#49688;-&amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;'&gt;&amp;#54764;&amp;#54140; &amp;#54632;&amp;#49688; &amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#54764;&amp;#54140;-&amp;#54632;&amp;#49688;-&amp;#51060;&amp;#54644;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;앞선 예제에서는 &lt;code&gt;get_element&lt;/code&gt;라는 헬퍼 함수를 작성했다. 이 함수를 이해하기에 앞서 한가지 짚고 넘어갈 부분이 있다. 주피터 노트북의 &lt;code&gt;%%javascript&lt;/code&gt; 매직 안에서는 element라는 특별한 요소가 정의되어있다. 이 element에는 현재 주피터 노트북 셀의 결과 요소가 지정되어 있고, 이를 조작해서 현재 셀의 출력 결과에 대한 조작을 할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어서 jupyter notebook 위에서는 헬퍼 함수 없이도 다음과 같이 코드가 정상적으로 작동한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;I don&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/dNogkPrl.png" alt="element를 활용한 자바스크립트 평가"&gt;&lt;/p&gt;
&lt;p&gt;일반적이지 않은 매직 셀을 평범한 셀처럼 사용할 수 있게 해주는 흥미로운 부분이다. 하지만 주피터 노트북의 저장 포맷인 ipynb 파일에는 자바스크립트 매직 셀의 실행 결과가 저장되지는 않는다. 이는 단지 브라우저 위에서 실행될 뿐이다. ipynb에는 실행 결과가 저장되는 대신에 output 속성 아래에 다음과 같이 &lt;code&gt;application/javascript&lt;/code&gt; 형식으로 소스코드 자체가 저장된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "$(element).append('&amp;lt;div class="hello-world"&amp;gt;I don't need helper!&amp;lt;/div&amp;gt;')",

(이하 생략)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 저장된 ipynb 파일은 jupyter notebook이나 nbviewer에서 파일을 읽었을 때 이 스크립트를 그대로 실행하는 방식으로 결과를 복원해준다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;&lt;a name='jupyter-notebook&amp;#44284;-nbviewer-&amp;#47784;&amp;#46160;-&amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;'&gt;jupyter notebook&amp;#44284; nbviewer &amp;#47784;&amp;#46160; &amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#jupyter-notebook&amp;#44284;-nbviewer-&amp;#47784;&amp;#46160;-&amp;#51648;&amp;#50896;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;그런데 문제는 element에 있다. jupyter notebook에서는 코드를 직접 실행하거나, 저장된 파일을 읽어들여도 element 요소가 적절하게 해석된다. 하지만 nbviewer에서는 element 요소를 적절하게 해석하지 못 한다. 실제로 nbviewer에서 실행되는 코드를 살펴보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output_subarea output_javascript &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;hello-world&amp;quot;&amp;gt;I don&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&amp;#39;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nbviewer에서 ipynb 파일을 로드해서 코드를 열어보면 해당하는 output 위치에 이런 스크립트 태그가 들어가게 된다. 여기서는 element 요소가 없을 뿐더러, 더더욱 심각한 것은 이 스크립트 실행되고 있는 위치를 특정할 수 있는 어떠한 방법도 제공하지 않는다. 당연하지만 웹 브라우저는 &lt;code&gt;element&lt;/code&gt; 요소를 찾을 수 없다는 에러를 내며 아무것도 보여주지 않는다. 주피터 노트북을 직접 사용할 수 있는 환경이라면 무방하지만, 이렇게 되면 nbviewer를 통해서 정적으로 노트북을 공유하는 것이 불가능해진다. 위에서 정의한 헬퍼함수는 바로 이러한 문제를 해결하기 위해서 만든 임시방편이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수는 element가 있는 환경과 없는 환경을 나눠서 출력 결과를 반환한다. element가 있으면 이를 그대로 사용하고, 없으면 현재 실행되고 있는 스크립트 태그를 찾아 그 부모를 반환하다. 이는 이 코드가 실행될 때 정의되어있는 마지막 스크립트 요소가 해당 코드를 포함한 script 요소라는 점을 활용한 약간은 편법적인 방법이다(이 방법 외에 코드가 실행되는 위치를 특정하는 방법을 찾기 쉽지 않았다).&lt;/p&gt;
&lt;p&gt;이 헬퍼는 &lt;code&gt;get_element(element)&lt;/code&gt;와 같이 사용하며, 이를 통해서 노트북과 뷰어 양 쪽 모두를 지원할 수 있다. 마지막 줄에서는 nbviewer에서 element가 정의되어 있지 않다는 에러를 방지하기 위해서 전역 환경 element 변수에 undefined를 대입한다. 이제 nbviewer에서도 정상적으로 작동하는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/0Up02eWl.png" alt="nbviewer에서도 실행 결과가 정상적으로 출력된다!"&gt;&lt;/p&gt;
&lt;p&gt;이제 자바스크립트를 사용해 노트북을 작성할 수 있음은 물론, 이를 정적으로 공유도 할 수 있게 되었다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='require.js-&amp;#49324;&amp;#50857;&amp;#54644;-&amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196;-&amp;#50808;&amp;#48512;-&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;'&gt;require.js &amp;#49324;&amp;#50857;&amp;#54644; &amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196; &amp;#50808;&amp;#48512; &amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944; &amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#require.js-&amp;#49324;&amp;#50857;&amp;#54644;-&amp;#46041;&amp;#51201;&amp;#51004;&amp;#47196;-&amp;#50808;&amp;#48512;-&amp;#49828;&amp;#53356;&amp;#47549;&amp;#53944;-&amp;#49324;&amp;#50857;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;조금 더 나아가보자. 주피터 노트북에는 기본적으로 몇 가지 외부 스크립트들이 포함되어 있다. jquery, moment, require.js가 기본 외부 스크립트이다. 이러한 스크립트는 프로필 설정을 통해서 미리 추가할 수도 있지만, &lt;code&gt;require.js&lt;/code&gt;가 눈에 띈다. 이를 사용하면 AMD 방식으로 동적으로 외부 스크립트를 읽어오는 것이 가능해진다. 이를 통해 미리 외부 스크립트들을 준비해야하는 번잡함과 전역 환경에 스크립트들을 로드해서 생길 수 있는 문제들을 피해갈 수 있다.&lt;/p&gt;
&lt;p&gt;이를 사용하려면 먼저 외부 스크립트 주소를 &lt;code&gt;require.config&lt;/code&gt;에 정의한다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;71번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://d3js.org/d3.v3.min&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

require.config({
    paths: {
        d3: "http://d3js.org/d3.v3.min"
    }
});
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;config에 정의한 d3 스크립트를 사용하려면 다음과 같이 require 함수에 사용하고자 하는 외부스크립트와 실행하려는 함수를 넘겨주면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;// 이제 이 안에서는,&lt;/span&gt;
  &lt;span class="c1"&gt;// d3.js 라이브러리를 사용해 코드를 작성할 수 있다&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;스크립트가 제대로 로드되었는지 확인해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;&lt;a name='&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752;-&amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688;-&amp;#54056;&amp;#53556;&amp;#51012;-&amp;#54876;&amp;#50857;&amp;#54644;-&amp;#52636;&amp;#47141;-&amp;#50948;&amp;#52824;-&amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;'&gt;&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752; &amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688; &amp;#54056;&amp;#53556;&amp;#51012; &amp;#54876;&amp;#50857;&amp;#54644; &amp;#52636;&amp;#47141; &amp;#50948;&amp;#52824; &amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;&lt;a class="anchor-link" href="#&amp;#53364;&amp;#47196;&amp;#51200;&amp;#50752;-&amp;#51593;&amp;#49884;&amp;#49892;&amp;#54665;&amp;#54632;&amp;#49688;-&amp;#54056;&amp;#53556;&amp;#51012;-&amp;#54876;&amp;#50857;&amp;#54644;-&amp;#52636;&amp;#47141;-&amp;#50948;&amp;#52824;-&amp;#48372;&amp;#51221;&amp;#54616;&amp;#44592;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;안타깝게도, 여기서도 위에서 이야기했던 것과 비슷한 문제가 하나 있다. require는 비동기적으로 실행되며 d3가 로드된 다음에서야 넘겨진 함수를 호출하도록 되어있다. 즉, d3가 로드되는 것을 기다리지 않고 다음 스크립트들을 실행해버린다. 주피터 노트북 위에서는 자바스크립트 실행에 대해서 독립된 영역이 사용되기 때문에 무방하지만, nbviewer에서는 위에서 보았듯이 모든 코드가 script 태그로 그냥 삽입된다. 따라서 그냥 실행하면 모든 변수가 전역에 노출되어 버린다. 따라서 target 변수는 실행하자마자 갱신되고, 이미 모든 코드가 실행되어버렸기 때문에 nbviewer에서 마지막에 호출된 &lt;code&gt;get_element(element)&lt;/code&gt;가 모든 셀의 출력 위치가 된다. 아래는 여러 셀에서 출력한 모든 그래프가 마지막 셀에 그려져 버린 경우이다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/5OU34Exl.png" alt="클로저를 사용하지 않은 경우"&gt;&lt;/p&gt;
&lt;p&gt;이 문제를 해결하려면 즉시실행함수 패턴과 클로저를 사용해서 미리 결과를 출력한 대상을 정의해두어야 한다. 즉 위에서 정의했던 코드는 다음과 같이 작성되어야 한다. 이를 통해서 함수로 각 셀의 실행 환경을 분리하고, &lt;code&gt;targetElement&lt;/code&gt;를 정확히 지정할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// 이 안에서 d3.js 라이브러리를 사용하고,&lt;/span&gt;
        &lt;span class="c1"&gt;// targetElement를 통해서 결과를 출력한다&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 모든 결과가 의도한 위치에서 출력될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/DuRRFgXl.png" alt="클로저를 사용한 경우"&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='d3.js&amp;#47484;-&amp;#54876;&amp;#50857;&amp;#54620;-&amp;#49884;&amp;#44033;&amp;#54868;'&gt;d3.js&amp;#47484; &amp;#54876;&amp;#50857;&amp;#54620; &amp;#49884;&amp;#44033;&amp;#54868;&lt;a class="anchor-link" href="#d3.js&amp;#47484;-&amp;#54876;&amp;#50857;&amp;#54620;-&amp;#49884;&amp;#44033;&amp;#54868;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;자잘한 문제들로 인해 조금 돌아서 왔다. 이제 d3.js를 실제로 사용해서 정말 간단하게 동그라미 몇 개를 실제로 그려보자.&lt;/p&gt;
&lt;p&gt;먼저 require를 통해서 정말로 d3 객체를 읽어오는 지 확인해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;72번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        $(targetElement).append($('&lt;p&gt;' + d3 + '&lt;/p&gt;'))
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;code&gt;[object Object]&lt;/code&gt;가 나오는 것을 봐서는 무언가 읽어온 것을 알 수 있다. 이번엔 d3.js의 &lt;code&gt;max&lt;/code&gt; 함수를 사용해보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;73번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        $(targetElement).append($('&lt;p&gt;' + d3.max([3,91,82,34,19]) + '&lt;/p&gt;'))
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;결과값이 정상적으로 출력된다. 이를 통해 d3.js가 정상적으로 로드되었다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이제 동그라미를 그려보자.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;74번째 입력:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;350px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;100px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;border&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1px solid lightgray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        
        &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;skyblue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;50px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;

(function(){
    var targetElement = get_element(element);
    require(['d3'], function(){
        var data = [1, 2, 3, 4, 5, 6, 10]
        var svg = d3.select(targetElement).append('svg')
            .attr('width', '350px')
            .attr('height', '100px')
            .style('border', '1px solid lightgray');
        
        svg.selectAll('circle')
            .data(data)
            .enter()
            .append('circle')
            .style('fill', 'skyblue')
            .attr('cx', function(d, i){ return i * (350/data.length) + 15})
            .attr('cy', '50px')
            .attr('r', function(d){ return d * 3})
    });
})();
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;정말 그냥 데이터 배열을 통해서 생성한 동그라미다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;&lt;a name='&amp;#44208;&amp;#47200;'&gt;&amp;#44208;&amp;#47200;&lt;a class="anchor-link" href="#&amp;#44208;&amp;#47200;"&gt;&lt;/a&gt;&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;이를 통해 자바스크립트와 d3.js를 활용해(다른 라이브러리 어떤 것이라도 가능하다) 노트북을 작성할 수 있다. 아직 nbviewer에서는 이런 부분에 대한 지원이 약한 편인데(앞으로 지원 여부도 명확하지 않다), 약간의 편법을 통해서 피해갈 수 있다. 아래 링크들은 실제로 이러한 방식을 사용해서 만들어본 몇 가지 예제들이다. 모두 nbviewer를 통해서 웹에서 직접 확인해볼 수 있다. 심지어(?) 지금 읽고 있는 글도 nbviewer에서 직접 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/github/nacyot/blog.nacyot.com-source/blob/master/source/iruby/d3js-in-jupyter.ipynb"&gt;D3.js in Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/2abc5e8c80c3916500ba"&gt;Rounded Donut Chart 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/e868d09bb6434d9c76c4"&gt;Line Graph Iterations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/nacyot/c0190709f56024eb516e"&gt;D3.js 5장, 6장 예제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>launchctl을 사용한 맥 OSX에서 서비스 등록하기 - 주피터(Jupyter, IPython &gt;= 3) 노트북 서비스 등록 예제</title>
    <link rel="alternate" href="http://blog.nacyot.com/articles/2015-05-13-jupyter-as-a-service/"/>
    <id>http://blog.nacyot.com/articles/2015-05-13-jupyter-as-a-service/</id>
    <published>2015-05-13T10:13:00+09:00</published>
    <updated>2016-05-19T17:06:46+09:00</updated>
    <author>
      <name>nacyot(Daekwon Kim)</name>
    </author>
    <content type="html">&lt;img src='http://i.imgur.com/3tBPtzI.jpg' /&gt;&lt;p&gt;아주 자주 사용하는 프로그램은 컴퓨터가 켜져있으면 어김없이 실행된다. 그래서 사용자들은 보통 이러한 프로그램을 시작 프로그램에 등록해서 사용하곤 한다. 이러한 프로그램이 백그라운드 작업을 하는 프로그램이거나 서버 프로그램이라면 매번 터미널을 열어서 실행한다는 것이 여간 번거로운 일이 아닐 것이다. 맥 OSX에서도 이와 같은 상황을 겪을 수 있는데, 적절히 커스텀 서비스를 등록해 이러한 번거로움을 피해갈 수 있다. 이 글에서는 &lt;a href="http://www.jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;을 예제로 OSX 서비스 등록과 간단한 조작법에 대해서 살펴본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;&lt;a name='jupyter-notebook-서비스-등록-예제'&gt;Jupyter Notebook 서비스 등록 예제&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서는 Jupyter(IPython) Notebook을 예제로 소개한다. IPython은 파이썬 REPL의 확장으로 웹 기반의 노트북을 지원한다. 이는 서버로 작동하는데, 데스크탑에서 사용하는 경우 매번 서버를 실행해줘야하는 번거로움이 있다. 여기서는 로컬 환경에서 실행되는 Jupyter Notebook을 서비스로 만들어서 항상 &lt;code&gt;http://localhost:8888&lt;/code&gt;로 접근 가능하도록 만든다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='jupyter-notebook'&gt;Jupyter Notebook&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 Jupyter Notebook을 사용가능한 환경을 준비한다(기본적으로 설치된 파이썬을 이용하거나 필요하면 &lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt; 등을 이용해 적절한 환경을 구축한다. 파이썬 &amp;gt; 3, 아이파이썬 &amp;gt; 3를 추천한다). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install zeromq
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install ipython&lt;span class="o"&gt;[&lt;/span&gt;notebook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/span&gt;&lt;span id="line-4"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.061 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Using MathJax from CDN: https://cdn.mathjax.org/mathjax/latest/MathJax.js
&lt;/span&gt;&lt;span id="line-5"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.117 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Serving notebooks from &lt;span class="nb"&gt;local &lt;/span&gt;directory: /Users/toto/Library/LaunchAgents
&lt;/span&gt;&lt;span id="line-6"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; active kernels
&lt;/span&gt;&lt;span id="line-7"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; The IPython Notebook is running at: http://localhost:8888/
&lt;/span&gt;&lt;span id="line-8"&gt;&lt;span class="o"&gt;[&lt;/span&gt;I 01:30:10.118 NotebookApp&lt;span class="o"&gt;]&lt;/span&gt; Use Control-C to stop this server and shut down all kernels &lt;span class="o"&gt;(&lt;/span&gt;twice to skip confirmation&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code&gt;localhost:8888&lt;/code&gt;로 노트북 서버에 접근가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/rbIGYXi.png" alt="Jupyter(IPython) Notebook"&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name='launchagent-서비스-파일-준비하기'&gt;LaunchAgent 서비스 파일 준비하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;먼저 &lt;code&gt;~/Library&lt;/code&gt; 디렉터리 아래에 &lt;code&gt;LaunchAgents&lt;/code&gt; 디렉터리가 있는 지 확인한다. 그리고 &lt;code&gt;com.jupyter.server.plist&lt;/code&gt; 파일을 생성해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p ~/Library/LaunchAgents/
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;touch com.jupyter-python3.server.plist
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;com.jupyter.server.plist&lt;/code&gt; 파일에 다음과 같이 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-2"&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-3"&gt;&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-4"&gt;  &lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-5"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-6"&gt;    &lt;span class="nt"&gt;&amp;lt;true&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-7"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-8"&gt;    &lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-9"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-10"&gt;    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.jupyter.server&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-11"&gt;    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-12"&gt;    &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-13"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/your/ipython/path&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-14"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;notebook&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-15"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--ip=0.0.0.0&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-16"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--port=8888&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-17"&gt;      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--notebook-dir=/your/notebook/path&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-18"&gt;    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-19"&gt;  &lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id="line-20"&gt;&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 설정에서 &lt;code&gt;/your/ipython/path&lt;/code&gt;와 &lt;code&gt;/your/notebook/path&lt;/code&gt;는 직접 자신이 사용하는 디렉터리로 지정해야한다. &lt;code&gt;/your/ipython/path&lt;/code&gt;는 &lt;code&gt;which ipython&lt;/code&gt; 명령어로 위치를 확인할 수 있고, &lt;code&gt;your/notebook/path&lt;/code&gt;는 앞으로 작성하게 될 노트북을 디렉터리를 원하는 곳에 생성하고 그 경로를 지정해준다.&lt;/p&gt;

&lt;p&gt;다음으로 서비스를 등록(load)한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl load ~/Library/LaunchAgents/com.jupyter.server.plist
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;단, launchctl은 tmux와 같은 터미널 멀티플렉서 환경에서는 정상적으로 실행되지 않는 경우가 있으니, 기본 터미널에서 사용하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기까지 정상적으로 설정했다면 이제 시스템이 실행될 때 자동적으로 서비스를 실행할 것이다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='서비스-실행하기'&gt;서비스 실행하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl start com.jupyter.server
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 설정의 경우, &lt;code&gt;RunAtLoad&lt;/code&gt; 키를 통해서 로드 시에 서비스를 자동 실행한다. 필요한 경우 launchctl을 통해서 직접 서비스를 실행할 수도 있다. 서비스를 실행하면 웹페이지가 직접 기본 브라우저로 실행된다. 그렇지 않다면 웹브라우저에서 &lt;code&gt;http://localhost:8888&lt;/code&gt;로 접근할 수 있다.&lt;/p&gt;

&lt;h3&gt;&lt;a name='서비스-중지하기'&gt;서비스 중지하기&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span id="line-1"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;launchctl stop com.jupyter.server
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;launchctl을 통해서 서비스를 중지할 수 있다(자동으로 실행되지 않게하려면 unload 후 파일을 삭제해야한다). 단, 위와 같이 &lt;code&gt;KeepAlive&lt;/code&gt;가 설정되어 있으면 종료되도 다시 실행된다.&lt;/p&gt;

&lt;h2&gt;&lt;a name='결론'&gt;결론&lt;/a&gt; &lt;span class='to_toc'&gt;&lt;a href='#toc'&gt;&lt;i class='fa fa-angle-double-up'&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;이 글에서는 Jupyter Notebook을 서비스로 등록해서 사용하는 법에 대해서 살펴보았다. 하지만 서비스 파일의 기본적인 구조만 익혀둔다면, 이외에도 다양한 서비스들을 직접 정의해서 편리하게 사용할 수 있을 것이다. 더불어 OSX의 서비스는 실행 상태 유지(&lt;code&gt;&amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;&lt;/code&gt;), 로드 시 실행하기(&lt;code&gt;&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;&lt;/code&gt;), 반복 실행(&lt;code&gt;&amp;lt;key&amp;gt;StartInterval&amp;lt;/key&amp;gt;&lt;/code&gt;), 표준 출력(&lt;code&gt;&amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;&lt;/code&gt;), 표준 에러(&lt;code&gt;&amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;&lt;/code&gt;) 리다이렉트 등 더 다양한 설정들도 지원한다. 자세한 내용은 다음 페이지를 참조하기 바란다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html"&gt;Apple Developer - Daemons and Services Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
  &lt;strong&gt;이 글이 도움이 되셨나요?&lt;/strong&gt;
  &lt;div&gt;
    &lt;a href='http://blog.nacyot.com' target="_blank"&gt;
      nacyot의 프로그래밍 이야기 메인으로 이동하기
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href='https://twitter.com/intent/follow?screen_name=nacyo_t' target="_blank"&gt;
      &lt;img style='display: inline' width='20' height='20' src='http://blog.nacyot.com/images/twitter.png' /&gt;
      Twitter에서 nacyot 팔로우하기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
